
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity$2 = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty$1() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children$1(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity$2, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children$1(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.52.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src/Components/Logo.svelte generated by Svelte v3.52.0 */

    const file$h = "src/Components/Logo.svelte";

    function create_fragment$j(ctx) {
    	let div;
    	let a;
    	let svg;
    	let g2;
    	let g1;
    	let path0;
    	let path1;
    	let path2;
    	let path3;
    	let g0;
    	let path4;
    	let defs;
    	let clipPath;
    	let rect;
    	let t0;
    	let h2;
    	let t1;
    	let span;
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			svg = svg_element("svg");
    			g2 = svg_element("g");
    			g1 = svg_element("g");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			g0 = svg_element("g");
    			path4 = svg_element("path");
    			defs = svg_element("defs");
    			clipPath = svg_element("clipPath");
    			rect = svg_element("rect");
    			t0 = space();
    			h2 = element("h2");
    			t1 = text("MLU-EXPL");
    			span = element("span");
    			span.textContent = "AI";
    			t3 = text("N");
    			attr_dev(path0, "id", "Vector");
    			attr_dev(path0, "d", "M90.6641 83.1836C96.8828 83.1836 101.941 78.1289 101.941 71.8906V71.8242C101.941 65.5898 96.8945 60.5312 90.6641 60.5312C84.4453 60.5312 79.3828 65.5898 79.3828 71.8242V71.8906C79.3828 78.1289 84.4336 83.1836 90.6641 83.1836Z");
    			attr_dev(path0, "fill", /*robotLogoColor*/ ctx[1]);
    			add_location(path0, file$h, 10, 10, 322);
    			attr_dev(path1, "id", "Vector_2");
    			attr_dev(path1, "d", "M143.305 83.1836C149.523 83.1836 154.586 78.1289 154.586 71.8906V71.8242C154.586 65.5898 149.535 60.5312 143.305 60.5312C137.09 60.5312 132.027 65.5898 132.027 71.8242V71.8906C132.027 78.1289 137.078 83.1836 143.305 83.1836Z");
    			attr_dev(path1, "fill", /*robotLogoColor*/ ctx[1]);
    			add_location(path1, file$h, 15, 10, 651);
    			attr_dev(path2, "id", "Vector_3");
    			attr_dev(path2, "d", "M163.586 159.402H173.609V122.641H163.586V159.402Z");
    			attr_dev(path2, "fill", /*robotLogoColor*/ ctx[1]);
    			add_location(path2, file$h, 20, 10, 981);
    			attr_dev(path3, "id", "Vector_4");
    			attr_dev(path3, "d", "M60.3594 159.402H70.3867V122.641H60.3594V159.402Z");
    			attr_dev(path3, "fill", /*robotLogoColor*/ ctx[1]);
    			add_location(path3, file$h, 25, 10, 1136);
    			attr_dev(path4, "id", "Vector_5");
    			attr_dev(path4, "d", "M182.16 30.0781H51.8047V10.0234H182.16V30.0781ZM182.16 103.609H51.8047V40.1055H182.16V103.609ZM144.559 168.789H89.4062V113.641H144.559V168.789ZM0 0V10.0234H15.8789V46.7891H25.9023V10.0234H41.7812V113.641H79.3867V178.816H96.9297V215.578H106.957V178.816H127.016V215.578H137.039V178.816H154.586V113.641H192.188V10.0234H233.969V0");
    			attr_dev(path4, "fill", /*robotLogoColor*/ ctx[1]);
    			add_location(path4, file$h, 31, 12, 1318);
    			attr_dev(g0, "id", "Group");
    			add_location(g0, file$h, 30, 10, 1291);
    			add_location(g1, file$h, 9, 8, 308);
    			attr_dev(g2, "id", "mlu_robot 1");
    			attr_dev(g2, "clip-path", "url(#clip0)");
    			add_location(g2, file$h, 8, 6, 255);
    			attr_dev(rect, "width", "233.97");
    			attr_dev(rect, "height", "215.58");
    			attr_dev(rect, "fill", "black");
    			add_location(rect, file$h, 41, 10, 1839);
    			attr_dev(clipPath, "id", "clip0");
    			add_location(clipPath, file$h, 40, 8, 1807);
    			add_location(defs, file$h, 39, 6, 1792);
    			attr_dev(svg, "width", "30");
    			attr_dev(svg, "height", "30");
    			attr_dev(svg, "viewBox", "0 0 234 216");
    			add_location(svg, file$h, 7, 5, 198);
    			attr_dev(span, "id", "ai");
    			attr_dev(span, "class", "svelte-htd26v");
    			add_location(span, file$h, 45, 29, 1966);
    			attr_dev(h2, "class", "logo svelte-htd26v");
    			add_location(h2, file$h, 45, 4, 1941);
    			attr_dev(a, "href", "https://mlu-explain.github.io");
    			attr_dev(a, "class", "svelte-htd26v");
    			add_location(a, file$h, 6, 2, 153);
    			attr_dev(div, "id", "intro-icon");
    			set_style(div, "--ai-color", /*aiLogoColor*/ ctx[0]);
    			attr_dev(div, "class", "svelte-htd26v");
    			add_location(div, file$h, 5, 0, 95);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, svg);
    			append_dev(svg, g2);
    			append_dev(g2, g1);
    			append_dev(g1, path0);
    			append_dev(g1, path1);
    			append_dev(g1, path2);
    			append_dev(g1, path3);
    			append_dev(g1, g0);
    			append_dev(g0, path4);
    			append_dev(svg, defs);
    			append_dev(defs, clipPath);
    			append_dev(clipPath, rect);
    			append_dev(a, t0);
    			append_dev(a, h2);
    			append_dev(h2, t1);
    			append_dev(h2, span);
    			append_dev(h2, t3);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*robotLogoColor*/ 2) {
    				attr_dev(path0, "fill", /*robotLogoColor*/ ctx[1]);
    			}

    			if (dirty & /*robotLogoColor*/ 2) {
    				attr_dev(path1, "fill", /*robotLogoColor*/ ctx[1]);
    			}

    			if (dirty & /*robotLogoColor*/ 2) {
    				attr_dev(path2, "fill", /*robotLogoColor*/ ctx[1]);
    			}

    			if (dirty & /*robotLogoColor*/ 2) {
    				attr_dev(path3, "fill", /*robotLogoColor*/ ctx[1]);
    			}

    			if (dirty & /*robotLogoColor*/ 2) {
    				attr_dev(path4, "fill", /*robotLogoColor*/ ctx[1]);
    			}

    			if (dirty & /*aiLogoColor*/ 1) {
    				set_style(div, "--ai-color", /*aiLogoColor*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Logo', slots, []);
    	let { aiLogoColor = "black" } = $$props;
    	let { robotLogoColor = "black" } = $$props;
    	const writable_props = ['aiLogoColor', 'robotLogoColor'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Logo> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('aiLogoColor' in $$props) $$invalidate(0, aiLogoColor = $$props.aiLogoColor);
    		if ('robotLogoColor' in $$props) $$invalidate(1, robotLogoColor = $$props.robotLogoColor);
    	};

    	$$self.$capture_state = () => ({ aiLogoColor, robotLogoColor });

    	$$self.$inject_state = $$props => {
    		if ('aiLogoColor' in $$props) $$invalidate(0, aiLogoColor = $$props.aiLogoColor);
    		if ('robotLogoColor' in $$props) $$invalidate(1, robotLogoColor = $$props.robotLogoColor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [aiLogoColor, robotLogoColor];
    }

    class Logo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { aiLogoColor: 0, robotLogoColor: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Logo",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get aiLogoColor() {
    		throw new Error("<Logo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set aiLogoColor(value) {
    		throw new Error("<Logo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get robotLogoColor() {
    		throw new Error("<Logo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set robotLogoColor(value) {
    		throw new Error("<Logo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Title.svelte generated by Svelte v3.52.0 */

    const file$g = "src/Components/Title.svelte";

    function create_fragment$i(ctx) {
    	let section;
    	let h10;
    	let t1;
    	let h11;
    	let t3;
    	let h3;
    	let a0;
    	let t5;
    	let a1;
    	let t7;
    	let a2;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h10 = element("h1");
    			h10.textContent = "Reinforcement Learning";
    			t1 = space();
    			h11 = element("h1");
    			h11.textContent = "A Gentle Introduction To Learning From Decisions";
    			t3 = space();
    			h3 = element("h3");
    			a0 = element("a");
    			a0.textContent = "Erin Bugbee";
    			t5 = text(", ");
    			a1 = element("a");
    			a1.textContent = "Anand Kamat";
    			t7 = text(", &\n    ");
    			a2 = element("a");
    			a2.textContent = "Jared Wilber";
    			attr_dev(h10, "id", "intro-hed");
    			attr_dev(h10, "class", "svelte-qiih5n");
    			add_location(h10, file$g, 1, 2, 23);
    			attr_dev(h11, "class", "intro-sub svelte-qiih5n");
    			add_location(h11, file$g, 2, 2, 72);
    			attr_dev(a0, "href", "https://erinbugbee.com");
    			add_location(a0, file$g, 4, 4, 176);
    			attr_dev(a1, "href", "https://www.linkedin.com/in/anand-kamat/");
    			add_location(a1, file$g, 4, 54, 226);
    			attr_dev(a2, "href", "https://twitter.com/jdwlbr");
    			add_location(a2, file$g, 5, 4, 300);
    			attr_dev(h3, "id", "intro__date");
    			attr_dev(h3, "class", "svelte-qiih5n");
    			add_location(h3, file$g, 3, 2, 150);
    			attr_dev(section, "id", "intro");
    			attr_dev(section, "class", "svelte-qiih5n");
    			add_location(section, file$g, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h10);
    			append_dev(section, t1);
    			append_dev(section, h11);
    			append_dev(section, t3);
    			append_dev(section, h3);
    			append_dev(h3, a0);
    			append_dev(h3, t5);
    			append_dev(h3, a1);
    			append_dev(h3, t7);
    			append_dev(h3, a2);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Title', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Title> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Title extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Title",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    /* src/Components/Intro.svelte generated by Svelte v3.52.0 */

    const file$f = "src/Components/Intro.svelte";

    function create_fragment$h(ctx) {
    	let section;
    	let p;
    	let t0;
    	let span;
    	let t2;
    	let br0;
    	let br1;
    	let t3;

    	const block = {
    		c: function create() {
    			section = element("section");
    			p = element("p");
    			t0 = text("In many situations, we learn by interacting with our environment. We observe\n    the current situation, take actions, and observe outcomes, and then reflect\n    on these previous occurrences when we take our next action. The field of\n    psychology has historically studied the human ability to learn from the\n    reinforcement of behaviors, and this influenced the development of an area\n    of machine learning: ");
    			span = element("span");
    			span.textContent = "reinforcement learning";
    			t2 = text(". Reinforcement learning (RL)\n    is an area of machine learning that focuses on how learning from interacting\n    with an environment can occur effectively for intelligent agents.\n    ");
    			br0 = element("br");
    			br1 = element("br");
    			t3 = text("\n    The goal of RL problems is to learn which actions to take and when to take them\n    to maximize cumulative reward over time. This differs from supervised learning,\n    as the decision maker is not told what is the correct action in the current situation\n    and instead must learn from the consequences of its own actions. It is also different\n    from unsupervised learning, as the goal is not to find structure in unlabeled\n    data but instead to maximize reward.");
    			attr_dev(span, "class", "bold");
    			add_location(span, file$f, 10, 25, 472);
    			add_location(br0, file$f, 13, 4, 705);
    			add_location(br1, file$f, 13, 10, 711);
    			attr_dev(p, "class", "body-text");
    			add_location(p, file$f, 4, 2, 32);
    			add_location(section, file$f, 3, 0, 20);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, p);
    			append_dev(p, t0);
    			append_dev(p, span);
    			append_dev(p, t2);
    			append_dev(p, br0);
    			append_dev(p, br1);
    			append_dev(p, t3);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Intro', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Intro> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Intro extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Intro",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* src/Components/ProblemStructure.svelte generated by Svelte v3.52.0 */

    const file$e = "src/Components/ProblemStructure.svelte";

    function create_fragment$g(ctx) {
    	let section;
    	let h1;
    	let t1;
    	let p;
    	let t2;
    	let span0;
    	let t4;
    	let span1;
    	let t6;
    	let span2;
    	let t8;
    	let span3;
    	let t10;
    	let span4;
    	let t12;
    	let span5;
    	let t14;
    	let span6;
    	let t16;
    	let span7;
    	let t18;
    	let br0;
    	let br1;
    	let t19;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h1 = element("h1");
    			h1.textContent = "Problem Structure";
    			t1 = space();
    			p = element("p");
    			t2 = text("In reinforcement learning problems, there is an ");
    			span0 = element("span");
    			span0.textContent = "agent";
    			t4 = text("\n    who makes decisions and learns how to achieve a goal. This agent interacts\n    with the ");
    			span1 = element("span");
    			span1.textContent = "environment";
    			t6 = text("\n    by taking ");
    			span2 = element("span");
    			span2.textContent = "actions";
    			t8 = text(". The environment produces\n    ");
    			span3 = element("span");
    			span3.textContent = "rewards";
    			t10 = text("\n    as a result of the actions taken, and these rewards provide insight into the\n    overall ");
    			span4 = element("span");
    			span4.textContent = "value";
    			t12 = text(" of taking an action in a particular\n    state. Actions may affect the environment, leading to changes in\n    ");
    			span5 = element("span");
    			span5.textContent = "state";
    			t14 = text(", which the agent observes. This process\n    continues with the agent taking actions and observing the resulting reward.\n    The agent uses this information to learn what actions it should take\n    depending on the circumstance. This mapping from states to actions governing \n    the agent's behavior is called a ");
    			span6 = element("span");
    			span6.textContent = "policy";
    			t16 = text(". The agent also learns a\n    ");
    			span7 = element("span");
    			span7.textContent = "value function";
    			t18 = text(" which it uses to estimate how\n    desirable the states are when behaving according to the policy. The learning in\n    reinforcement learning comes from the agent changing its policy and updating\n    its value function as a result of its experiences in the environment.\n    ");
    			br0 = element("br");
    			br1 = element("br");
    			t19 = text("\n    Typically, the agent interacts with the environment over time. At each time step,\n    an action is taken based on the agent’s policy, a reward is obtained, and the\n    next state is observed. The sequence of transitions experienced by the agent\n    starting from the intitial state until the final state is called a trial or an\n    episode.");
    			attr_dev(h1, "class", "body-header");
    			add_location(h1, file$e, 4, 2, 32);
    			attr_dev(span0, "class", "bold");
    			add_location(span0, file$e, 7, 52, 156);
    			attr_dev(span1, "class", "bold");
    			add_location(span1, file$e, 11, 13, 292);
    			attr_dev(span2, "class", "bold");
    			add_location(span2, file$e, 12, 14, 344);
    			attr_dev(span3, "class", "bold");
    			add_location(span3, file$e, 13, 4, 408);
    			attr_dev(span4, "class", "bold");
    			add_location(span4, file$e, 15, 12, 535);
    			attr_dev(span5, "class", "bold");
    			add_location(span5, file$e, 17, 4, 676);
    			attr_dev(span6, "class", "bold");
    			add_location(span6, file$e, 21, 37, 1020);
    			attr_dev(span7, "class", "bold");
    			add_location(span7, file$e, 22, 4, 1082);
    			add_location(br0, file$e, 26, 4, 1396);
    			add_location(br1, file$e, 26, 10, 1402);
    			attr_dev(p, "class", "body-text");
    			add_location(p, file$e, 6, 2, 82);
    			add_location(section, file$e, 3, 0, 20);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h1);
    			append_dev(section, t1);
    			append_dev(section, p);
    			append_dev(p, t2);
    			append_dev(p, span0);
    			append_dev(p, t4);
    			append_dev(p, span1);
    			append_dev(p, t6);
    			append_dev(p, span2);
    			append_dev(p, t8);
    			append_dev(p, span3);
    			append_dev(p, t10);
    			append_dev(p, span4);
    			append_dev(p, t12);
    			append_dev(p, span5);
    			append_dev(p, t14);
    			append_dev(p, span6);
    			append_dev(p, t16);
    			append_dev(p, span7);
    			append_dev(p, t18);
    			append_dev(p, br0);
    			append_dev(p, br1);
    			append_dev(p, t19);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProblemStructure', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProblemStructure> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ProblemStructure extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProblemStructure",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    const pi = Math.PI,
        tau = 2 * pi,
        epsilon = 1e-6,
        tauEpsilon = tau - epsilon;

    function Path() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null; // end of current subpath
      this._ = "";
    }

    function path() {
      return new Path;
    }

    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon));

        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
          var x20 = x2 - x0,
              y20 = y2 - y0,
              l21_2 = x21 * x21 + y21 * y21,
              l20_2 = x20 * x20 + y20 * y20,
              l21 = Math.sqrt(l21_2),
              l01 = Math.sqrt(l01_2),
              l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
              t01 = l / l01,
              t21 = l / l21;

          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }

          this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0),
            dy = r * Math.sin(a0),
            x0 = x + dx,
            y0 = y + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        }

        // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._ += "L" + x0 + "," + y0;
        }

        // Is this arc empty? We’re done.
        if (!r) return;

        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau + tau;

        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        }

        // Is this arc non-empty? Draw an arc!
        else if (da > epsilon) {
          this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
      },
      rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
      },
      toString: function() {
        return this._;
      }
    };

    function constant$2(x) {
      return function constant() {
        return x;
      };
    }

    function array$1(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function Linear(context) {
      this._context = context;
    }

    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // proceed
          default: this._context.lineTo(x, y); break;
        }
      }
    };

    function curveLinear(context) {
      return new Linear(context);
    }

    function x(p) {
      return p[0];
    }

    function y(p) {
      return p[1];
    }

    function line(x$1, y$1) {
      var defined = constant$2(true),
          context = null,
          curve = curveLinear,
          output = null;

      x$1 = typeof x$1 === "function" ? x$1 : (x$1 === undefined) ? x : constant$2(x$1);
      y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant$2(y$1);

      function line(data) {
        var i,
            n = (data = array$1(data)).length,
            d,
            defined0 = false,
            buffer;

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      line.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$2(+_), line) : x$1;
      };

      line.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$2(+_), line) : y$1;
      };

      line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$2(!!_), line) : defined;
      };

      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };

      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };

      return line;
    }

    function point(that, x, y) {
      that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x) / 6,
        (that._y0 + 4 * that._y1 + y) / 6
      );
    }

    function Basis(context) {
      this._context = context;
    }

    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3: point(this, this._x1, this._y1); // proceed
          case 2: this._context.lineTo(this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
          default: point(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function curveBasis(context) {
      return new Basis(context);
    }

    function ascending$1(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(f) {
      let delta = f;
      let compare = f;

      if (f.length === 1) {
        delta = (d, x) => f(d) - x;
        compare = ascendingComparator(f);
      }

      function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      }

      function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }

      function center(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function ascendingComparator(f) {
      return (d, x) => ascending$1(f(d), x);
    }

    function number$1(x) {
      return x === null ? NaN : +x;
    }

    const ascendingBisect = bisector(ascending$1);
    const bisectRight = ascendingBisect.right;
    bisector(number$1).center;
    var bisect = bisectRight;

    function extent(values, valueof) {
      let min;
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
      return [min, max];
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function ticks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        let r0 = Math.round(start / step), r1 = Math.round(stop / step);
        if (r0 * step < start) ++r0;
        if (r1 * step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) * step;
      } else {
        step = -step;
        let r0 = Math.round(start * step), r1 = Math.round(stop * step);
        if (r0 / step < start) ++r0;
        if (r1 / step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function initRange(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend$1(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb$1(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb$1, extend$1(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend$1(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    var constant$1 = x => () => x;

    function linear$1(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear$1(a, d) : constant$1(isNaN(a) ? b : a);
    }

    var rgb = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb(start, end) {
        var r = color((start = rgb$1(start)).r, (end = rgb$1(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb.gamma = rgbGamma;

      return rgb;
    })(1);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function interpolateNumber(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = interpolate(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function string(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function interpolate(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$1(b)
          : (t === "number" ? interpolateNumber
          : t === "string" ? ((c = color(b)) ? (b = c, rgb) : string)
          : b instanceof color ? rgb
          : b instanceof Date ? date
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
          : interpolateNumber)(a, b);
    }

    function interpolateRound(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    function constants(x) {
      return function() {
        return x;
      };
    }

    function number(x) {
      return +x;
    }

    var unit = [0, 1];

    function identity$1(x) {
      return x;
    }

    function normalize(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constants(isNaN(b) ? NaN : 0.5);
    }

    function clamper(a, b) {
      var t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisect(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer() {
      var domain = unit,
          range = unit,
          interpolate$1 = interpolate,
          transform,
          untransform,
          unknown,
          clamp = identity$1,
          piecewise,
          output,
          input;

      function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous() {
      return transformer()(identity$1, identity$1);
    }

    function formatDecimal(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent(x) {
      return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded(x * 100, p),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity(x) {
      return x;
    }

    var map = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale;
    var format$3;
    var formatPrefix;

    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      format$3 = locale.format;
      formatPrefix = locale.formatPrefix;
      return locale;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1;
    }

    function tickFormat(start, stop, count, specifier) {
      var step = tickStep(start, stop, count),
          precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format$3(specifier);
    }

    function linearish(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }
        
        while (maxIter-- > 0) {
          step = tickIncrement(start, stop, count);
          if (step === prestep) {
            d[i0] = start;
            d[i1] = stop;
            return domain(d);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }

        return scale;
      };

      return scale;
    }

    function linear() {
      var scale = continuous();

      scale.copy = function() {
        return copy(scale, linear());
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    function cubicInOut(t) {
        return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
    }

    function is_date(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    function get_interpolator(a, b) {
        if (a === b || a !== a)
            return () => a;
        const type = typeof a;
        if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
            throw new Error('Cannot interpolate values of different type');
        }
        if (Array.isArray(a)) {
            const arr = b.map((bi, i) => {
                return get_interpolator(a[i], bi);
            });
            return t => arr.map(fn => fn(t));
        }
        if (type === 'object') {
            if (!a || !b)
                throw new Error('Object cannot be null');
            if (is_date(a) && is_date(b)) {
                a = a.getTime();
                b = b.getTime();
                const delta = b - a;
                return t => new Date(a + t * delta);
            }
            const keys = Object.keys(b);
            const interpolators = {};
            keys.forEach(key => {
                interpolators[key] = get_interpolator(a[key], b[key]);
            });
            return t => {
                const result = {};
                keys.forEach(key => {
                    result[key] = interpolators[key](t);
                });
                return result;
            };
        }
        if (type === 'number') {
            const delta = b - a;
            return t => a + t * delta;
        }
        throw new Error(`Cannot interpolate ${type} values`);
    }
    function tweened(value, defaults = {}) {
        const store = writable(value);
        let task;
        let target_value = value;
        function set(new_value, opts) {
            if (value == null) {
                store.set(value = new_value);
                return Promise.resolve();
            }
            target_value = new_value;
            let previous_task = task;
            let started = false;
            let { delay = 0, duration = 400, easing = identity$2, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
            if (duration === 0) {
                if (previous_task) {
                    previous_task.abort();
                    previous_task = null;
                }
                store.set(value = target_value);
                return Promise.resolve();
            }
            const start = now() + delay;
            let fn;
            task = loop(now => {
                if (now < start)
                    return true;
                if (!started) {
                    fn = interpolate(value, new_value);
                    if (typeof duration === 'function')
                        duration = duration(value, new_value);
                    started = true;
                }
                if (previous_task) {
                    previous_task.abort();
                    previous_task = null;
                }
                const elapsed = now - start;
                if (elapsed > duration) {
                    store.set(value = new_value);
                    return false;
                }
                // @ts-ignore
                store.set(value = fn(easing(elapsed / duration)));
                return true;
            });
            return task.promise;
        }
        return {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe
        };
    }

    const margin = writable({
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
    });
    const banditEpsilon = writable(0.2);
    const lineEpsilon = writable(0.5);
    const gridEpsilon = writable(0.5);

    const gridWidth = writable(500);
    const gridHeight = writable(500);
    const gridMargin = writable({
      top: 8,
      bottom: 12,
      left: 16,
      right: 0,
    });
    const lineWidth = writable(125);
    const lineHeight = writable(125);
    const lineMargin = writable({
      top: 8,
      bottom: 20,
      left: 16,
      right: 0,
    });
    const banditWidth = writable(430);
    const banditHeight = writable(200);

    const robotScale = writable(0.22);
    const bananaScale = writable(0.13);
    const arrowScale = writable(0.09);

    const banditRobot = tweened(
      { x: 0.5, y: 0.5 },
      {
        duration: 200,
        easing: cubicInOut,
      }
    );

    const lineRobot = tweened(
      { x: 3.5, y: 0.5 },
      {
        duration: 200,
        easing: cubicInOut,
      }
    );

    const gridRobot = tweened(
      { x: 0.5, y: 1.5 },
      {
        duration: 200,
        easing: cubicInOut,
      }
    );

    const gridStatIndex = writable(0);
    const gridRecordInterval = writable(25);

    const lowRewardGrid = writable([
      [0, 0],
      [3, 3],
      [3, 1],
      [3, 0],
      [3, 0],
      
    ]);

    const highRewardGrid = writable([
      [2, 3],
      [0, 0],
      [0, 2],
      [0, 2],
      [0, 1],
    ]);

    const negRewardGrid = writable([
      [2, 2],
      [3, 1],
      [2, 2],
      [1, 2],
      [1, 1],
    ]);

    const startPosGrid =  writable([
      [0, 1],
      [3, 2],
      [3, 2],
      [3, 1],
      [3, 3],
     ]);


    const lineRobotPath = writable([{ x: 3.5, y: 0.5 }]);
    const gridRobotPath = writable([{ x: 3.5, y: 1.5 }]);

    const banditQValues = writable([
      {
        episodeNumber: [1, 2, 3],
        left: [2, 4, 6],
        right: [1, 2, 3],
        maxDirection: [1, 1, 1],
      },
    ]);

    const lineRecordInterval = writable(15);
    const lineQValues = writable([
      { episodeNumber: [0], left: [0], right: [0], maxDirection: ['left'] },
      { episodeNumber: [0], left: [0], right: [0], maxDirection: ['left'] },
      { episodeNumber: [0], left: [0], right: [0], maxDirection: ['left'] },
      { episodeNumber: [0], left: [0], right: [0], maxDirection: ['left'] },
      { episodeNumber: [0], left: [0], right: [0], maxDirection: ['left'] },
      { episodeNumber: [0], left: [0], right: [0], maxDirection: ['left'] },
      { episodeNumber: [0], left: [0], right: [0], maxDirection: ['left'] },
      { episodeNumber: [0], left: [0], right: [0], maxDirection: ['left'] },
    ]);

    const gridQValues = writable([
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
      {
        episodeNumber: [],
        up: [],
        down: [],
        left: [],
        right: [],
        maxDirection: [],
      },
    ]);

    /* src/Components/QChartBandit.svelte generated by Svelte v3.52.0 */
    const file$d = "src/Components/QChartBandit.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    // (63:2) {#each xScale.ticks() as tick}
    function create_each_block_1$5(ctx) {
    	let g;
    	let text_1;

    	let t_value = (/*tick*/ ctx[13] % /*tickModulo*/ ctx[2] == 0
    	? /*formatter*/ ctx[9](/*tick*/ ctx[13])
    	: "") + "";

    	let t;
    	let g_transform_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "class", "axis-text svelte-nbmex2");
    			attr_dev(text_1, "y", "17");
    			attr_dev(text_1, "text-anchor", "middle");
    			add_location(text_1, file$d, 64, 6, 1550);
    			attr_dev(g, "transform", g_transform_value = `translate(${/*xScale*/ ctx[1](/*tick*/ ctx[13]) + 0} ${/*height*/ ctx[7] - /*margin*/ ctx[8].bottom})`);
    			add_location(g, file$d, 63, 4, 1469);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*xScale, tickModulo*/ 6 && t_value !== (t_value = (/*tick*/ ctx[13] % /*tickModulo*/ ctx[2] == 0
    			? /*formatter*/ ctx[9](/*tick*/ ctx[13])
    			: "") + "")) set_data_dev(t, t_value);

    			if (dirty & /*xScale*/ 2 && g_transform_value !== (g_transform_value = `translate(${/*xScale*/ ctx[1](/*tick*/ ctx[13]) + 0} ${/*height*/ ctx[7] - /*margin*/ ctx[8].bottom})`)) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$5.name,
    		type: "each",
    		source: "(63:2) {#each xScale.ticks() as tick}",
    		ctx
    	});

    	return block;
    }

    // (87:2) {#each yScale.ticks() as tick}
    function create_each_block$7(ctx) {
    	let g;
    	let text_1;

    	let t_value = (/*tick*/ ctx[13] % 2 == 0
    	? /*formatter*/ ctx[9](/*tick*/ ctx[13])
    	: "") + "";

    	let t;
    	let g_transform_value;
    	let line0;
    	let line1;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			line0 = svg_element("line");
    			line1 = svg_element("line");
    			attr_dev(text_1, "class", "axis-text svelte-nbmex2");
    			attr_dev(text_1, "y", "0");
    			attr_dev(text_1, "dx", "1");
    			attr_dev(text_1, "text-anchor", "end");
    			attr_dev(text_1, "dominant-baseline", "middle");
    			add_location(text_1, file$d, 88, 6, 2128);
    			attr_dev(g, "transform", g_transform_value = `translate(${/*margin*/ ctx[8].left - 5} ${/*yScale*/ ctx[0](/*tick*/ ctx[13]) + 0})`);
    			add_location(g, file$d, 87, 4, 2054);
    			attr_dev(line0, "class", "axis-line svelte-nbmex2");
    			attr_dev(line0, "x1", /*margin*/ ctx[8].left);
    			attr_dev(line0, "x2", /*margin*/ ctx[8].left);
    			attr_dev(line0, "y1", /*margin*/ ctx[8].top);
    			attr_dev(line0, "y2", /*height*/ ctx[7] - /*margin*/ ctx[8].bottom);
    			attr_dev(line0, "stroke", "black");
    			add_location(line0, file$d, 98, 4, 2392);
    			attr_dev(line1, "class", "axis-line svelte-nbmex2");
    			attr_dev(line1, "x1", /*margin*/ ctx[8].left);
    			attr_dev(line1, "x2", /*width*/ ctx[6] - /*margin*/ ctx[8].right);
    			attr_dev(line1, "y1", /*height*/ ctx[7] - /*margin*/ ctx[8].bottom);
    			attr_dev(line1, "y2", /*height*/ ctx[7] - /*margin*/ ctx[8].bottom);
    			attr_dev(line1, "stroke", "black");
    			add_location(line1, file$d, 107, 4, 2608);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    			insert_dev(target, line0, anchor);
    			insert_dev(target, line1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*yScale*/ 1 && t_value !== (t_value = (/*tick*/ ctx[13] % 2 == 0
    			? /*formatter*/ ctx[9](/*tick*/ ctx[13])
    			: "") + "")) set_data_dev(t, t_value);

    			if (dirty & /*yScale*/ 1 && g_transform_value !== (g_transform_value = `translate(${/*margin*/ ctx[8].left - 5} ${/*yScale*/ ctx[0](/*tick*/ ctx[13]) + 0})`)) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (detaching) detach_dev(line0);
    			if (detaching) detach_dev(line1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(87:2) {#each yScale.ticks() as tick}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let svg;
    	let path0;
    	let path0_d_value;
    	let path0_transition;
    	let path1;
    	let path1_d_value;
    	let path1_transition;
    	let text0;
    	let t0;
    	let text1;
    	let t1;
    	let text1_x_value;
    	let current;
    	let each_value_1 = /*xScale*/ ctx[1].ticks();
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
    	}

    	let each_value = /*yScale*/ ctx[0].ticks();
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			text0 = svg_element("text");
    			t0 = text("Number of Episodes");
    			text1 = svg_element("text");
    			t1 = text("Q-Value");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(path0, "class", "pathLeft-line path svelte-nbmex2");
    			attr_dev(path0, "d", path0_d_value = /*pathGenerator*/ ctx[3](/*pathLeftData*/ ctx[5]));
    			add_location(path0, file$d, 49, 2, 1177);
    			attr_dev(path1, "class", "pathRight-line path svelte-nbmex2");
    			attr_dev(path1, "d", path1_d_value = /*pathGenerator*/ ctx[3](/*pathRightData*/ ctx[4]));
    			add_location(path1, file$d, 55, 2, 1295);
    			attr_dev(text0, "class", "bandit-axis-label svelte-nbmex2");
    			attr_dev(text0, "y", /*height*/ ctx[7] - 7);
    			attr_dev(text0, "x", /*width*/ ctx[6] / 2);
    			attr_dev(text0, "text-anchor", "middle");
    			add_location(text0, file$d, 71, 2, 1718);
    			attr_dev(text1, "class", "bandit-axis-label svelte-nbmex2");
    			attr_dev(text1, "y", /*margin*/ ctx[8].left / 3);
    			attr_dev(text1, "x", text1_x_value = -/*yScale*/ ctx[0](1));
    			attr_dev(text1, "text-anchor", "middle");
    			attr_dev(text1, "transform", "rotate(-90)");
    			add_location(text1, file$d, 77, 2, 1847);
    			attr_dev(svg, "width", /*width*/ ctx[6]);
    			attr_dev(svg, "height", /*height*/ ctx[7]);
    			add_location(svg, file$d, 47, 0, 1119);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(svg, null);
    			}

    			append_dev(svg, text0);
    			append_dev(text0, t0);
    			append_dev(svg, text1);
    			append_dev(text1, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svg, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*pathGenerator, pathLeftData*/ 40 && path0_d_value !== (path0_d_value = /*pathGenerator*/ ctx[3](/*pathLeftData*/ ctx[5]))) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (!current || dirty & /*pathGenerator, pathRightData*/ 24 && path1_d_value !== (path1_d_value = /*pathGenerator*/ ctx[3](/*pathRightData*/ ctx[4]))) {
    				attr_dev(path1, "d", path1_d_value);
    			}

    			if (dirty & /*xScale, height, margin, tickModulo, formatter*/ 902) {
    				each_value_1 = /*xScale*/ ctx[1].ticks();
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$5(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$5(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(svg, text0);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (!current || dirty & /*yScale*/ 1 && text1_x_value !== (text1_x_value = -/*yScale*/ ctx[0](1))) {
    				attr_dev(text1, "x", text1_x_value);
    			}

    			if (dirty & /*margin, width, height, yScale, formatter*/ 961) {
    				each_value = /*yScale*/ ctx[0].ticks();
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(svg, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!path0_transition) path0_transition = create_bidirectional_transition(path0, draw, { duration: 400 }, true);
    				path0_transition.run(1);
    			});

    			add_render_callback(() => {
    				if (!path1_transition) path1_transition = create_bidirectional_transition(path1, draw, { duration: 400 }, true);
    				path1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!path0_transition) path0_transition = create_bidirectional_transition(path0, draw, { duration: 400 }, false);
    			path0_transition.run(0);
    			if (!path1_transition) path1_transition = create_bidirectional_transition(path1, draw, { duration: 400 }, false);
    			path1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching && path0_transition) path0_transition.end();
    			if (detaching && path1_transition) path1_transition.end();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let xMax;
    	let xScale;
    	let yScale;
    	let pathLeftData;
    	let pathRightData;
    	let pathGenerator;
    	let tickModulo;
    	let $banditQValues;
    	validate_store(banditQValues, 'banditQValues');
    	component_subscribe($$self, banditQValues, $$value => $$invalidate(11, $banditQValues = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('QChartBandit', slots, []);
    	let width = 300;
    	let height = 260;
    	let index = 0;
    	const margin = { top: 10, right: 40, bottom: 40, left: 40 };
    	const formatter = format$3(".2d");
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<QChartBandit> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		line,
    		scaleLinear: linear,
    		format: format$3,
    		banditQValues,
    		width,
    		height,
    		index,
    		margin,
    		formatter,
    		tickModulo,
    		yScale,
    		xScale,
    		pathGenerator,
    		pathRightData,
    		pathLeftData,
    		xMax,
    		$banditQValues
    	});

    	$$self.$inject_state = $$props => {
    		if ('width' in $$props) $$invalidate(6, width = $$props.width);
    		if ('height' in $$props) $$invalidate(7, height = $$props.height);
    		if ('index' in $$props) $$invalidate(12, index = $$props.index);
    		if ('tickModulo' in $$props) $$invalidate(2, tickModulo = $$props.tickModulo);
    		if ('yScale' in $$props) $$invalidate(0, yScale = $$props.yScale);
    		if ('xScale' in $$props) $$invalidate(1, xScale = $$props.xScale);
    		if ('pathGenerator' in $$props) $$invalidate(3, pathGenerator = $$props.pathGenerator);
    		if ('pathRightData' in $$props) $$invalidate(4, pathRightData = $$props.pathRightData);
    		if ('pathLeftData' in $$props) $$invalidate(5, pathLeftData = $$props.pathLeftData);
    		if ('xMax' in $$props) $$invalidate(10, xMax = $$props.xMax);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$banditQValues*/ 2048) {
    			//   get max value for x-axis
    			$$invalidate(10, xMax = $banditQValues[0]["left"].length);
    		}

    		if ($$self.$$.dirty & /*xMax*/ 1024) {
    			// scales
    			$$invalidate(1, xScale = linear().domain([0, xMax + 1]).range([margin.left, width - margin.right]));
    		}

    		if ($$self.$$.dirty & /*$banditQValues*/ 2048) {
    			$$invalidate(5, pathLeftData = $banditQValues[index]["left"].map((val, i) => {
    				return { x: i, y: val };
    			}));
    		}

    		if ($$self.$$.dirty & /*$banditQValues*/ 2048) {
    			$$invalidate(4, pathRightData = $banditQValues[index]["right"].map((val, i) => {
    				return { x: i, y: val };
    			}));
    		}

    		if ($$self.$$.dirty & /*xScale, yScale*/ 3) {
    			// d3 line generator
    			$$invalidate(3, pathGenerator = line().x(d => xScale(d.x)).y(d => yScale(d.y)));
    		}

    		if ($$self.$$.dirty & /*$banditQValues*/ 2048) {
    			$$invalidate(2, tickModulo = $banditQValues[index]["left"].length > 100
    			? 50
    			: $banditQValues[index]["right"].length > 40 ? 20 : 5);
    		}
    	};

    	$$invalidate(0, yScale = linear().domain([-1, 7]).range([height - margin.bottom, margin.top]));

    	return [
    		yScale,
    		xScale,
    		tickModulo,
    		pathGenerator,
    		pathRightData,
    		pathLeftData,
    		width,
    		height,
    		margin,
    		formatter,
    		xMax,
    		$banditQValues
    	];
    }

    class QChartBandit extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "QChartBandit",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src/Components/ScatterBandit.svelte generated by Svelte v3.52.0 */

    function create_fragment$e(ctx) {
    	let qchartbandit;
    	let current;
    	qchartbandit = new QChartBandit({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(qchartbandit.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(qchartbandit, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(qchartbandit.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(qchartbandit.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(qchartbandit, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ScatterBandit', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ScatterBandit> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ QChartBandit });
    	return [];
    }

    class ScatterBandit extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ScatterBandit",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    var xhtml = "http://www.w3.org/1999/xhtml";

    var namespaces = {
      svg: "http://www.w3.org/2000/svg",
      xhtml: xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };

    function namespace(name) {
      var prefix = name += "", i = prefix.indexOf(":");
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
    }

    function creatorInherit(name) {
      return function() {
        var document = this.ownerDocument,
            uri = this.namespaceURI;
        return uri === xhtml && document.documentElement.namespaceURI === xhtml
            ? document.createElement(name)
            : document.createElementNS(uri, name);
      };
    }

    function creatorFixed(fullname) {
      return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
      };
    }

    function creator(name) {
      var fullname = namespace(name);
      return (fullname.local
          ? creatorFixed
          : creatorInherit)(fullname);
    }

    function none() {}

    function selector(selector) {
      return selector == null ? none : function() {
        return this.querySelector(selector);
      };
    }

    function selection_select(select) {
      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
          }
        }
      }

      return new Selection(subgroups, this._parents);
    }

    function array(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function empty() {
      return [];
    }

    function selectorAll(selector) {
      return selector == null ? empty : function() {
        return this.querySelectorAll(selector);
      };
    }

    function arrayAll(select) {
      return function() {
        var group = select.apply(this, arguments);
        return group == null ? [] : array(group);
      };
    }

    function selection_selectAll(select) {
      if (typeof select === "function") select = arrayAll(select);
      else select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
          }
        }
      }

      return new Selection(subgroups, parents);
    }

    function matcher(selector) {
      return function() {
        return this.matches(selector);
      };
    }

    function childMatcher(selector) {
      return function(node) {
        return node.matches(selector);
      };
    }

    var find = Array.prototype.find;

    function childFind(match) {
      return function() {
        return find.call(this.children, match);
      };
    }

    function childFirst() {
      return this.firstElementChild;
    }

    function selection_selectChild(match) {
      return this.select(match == null ? childFirst
          : childFind(typeof match === "function" ? match : childMatcher(match)));
    }

    var filter = Array.prototype.filter;

    function children() {
      return this.children;
    }

    function childrenFilter(match) {
      return function() {
        return filter.call(this.children, match);
      };
    }

    function selection_selectChildren(match) {
      return this.selectAll(match == null ? children
          : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
    }

    function selection_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Selection(subgroups, this._parents);
    }

    function sparse(update) {
      return new Array(update.length);
    }

    function selection_enter() {
      return new Selection(this._enter || this._groups.map(sparse), this._parents);
    }

    function EnterNode(parent, datum) {
      this.ownerDocument = parent.ownerDocument;
      this.namespaceURI = parent.namespaceURI;
      this._next = null;
      this._parent = parent;
      this.__data__ = datum;
    }

    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
      insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
      querySelector: function(selector) { return this._parent.querySelector(selector); },
      querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
    };

    function constant(x) {
      return function() {
        return x;
      };
    }

    function bindIndex(parent, group, enter, update, exit, data) {
      var i = 0,
          node,
          groupLength = group.length,
          dataLength = data.length;

      // Put any non-null nodes that fit into update.
      // Put any null nodes into enter.
      // Put any remaining data into enter.
      for (; i < dataLength; ++i) {
        if (node = group[i]) {
          node.__data__ = data[i];
          update[i] = node;
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Put any non-null nodes that don’t fit into exit.
      for (; i < groupLength; ++i) {
        if (node = group[i]) {
          exit[i] = node;
        }
      }
    }

    function bindKey(parent, group, enter, update, exit, data, key) {
      var i,
          node,
          nodeByKeyValue = new Map,
          groupLength = group.length,
          dataLength = data.length,
          keyValues = new Array(groupLength),
          keyValue;

      // Compute the key for each node.
      // If multiple nodes have the same key, the duplicates are added to exit.
      for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
          keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
          if (nodeByKeyValue.has(keyValue)) {
            exit[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
        }
      }

      // Compute the key for each datum.
      // If there a node associated with this key, join and add it to update.
      // If there is not (or the key is a duplicate), add it to enter.
      for (i = 0; i < dataLength; ++i) {
        keyValue = key.call(parent, data[i], i, data) + "";
        if (node = nodeByKeyValue.get(keyValue)) {
          update[i] = node;
          node.__data__ = data[i];
          nodeByKeyValue.delete(keyValue);
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Add any remaining nodes that were not bound to data to exit.
      for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
          exit[i] = node;
        }
      }
    }

    function datum(node) {
      return node.__data__;
    }

    function selection_data(value, key) {
      if (!arguments.length) return Array.from(this, datum);

      var bind = key ? bindKey : bindIndex,
          parents = this._parents,
          groups = this._groups;

      if (typeof value !== "function") value = constant(value);

      for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j],
            group = groups[j],
            groupLength = group.length,
            data = array(value.call(parent, parent && parent.__data__, j, parents)),
            dataLength = data.length,
            enterGroup = enter[j] = new Array(dataLength),
            updateGroup = update[j] = new Array(dataLength),
            exitGroup = exit[j] = new Array(groupLength);

        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
          if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while (!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
          }
        }
      }

      update = new Selection(update, parents);
      update._enter = enter;
      update._exit = exit;
      return update;
    }

    function selection_exit() {
      return new Selection(this._exit || this._groups.map(sparse), this._parents);
    }

    function selection_join(onenter, onupdate, onexit) {
      var enter = this.enter(), update = this, exit = this.exit();
      enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
      if (onupdate != null) update = onupdate(update);
      if (onexit == null) exit.remove(); else onexit(exit);
      return enter && update ? enter.merge(update).order() : update;
    }

    function selection_merge(selection) {
      if (!(selection instanceof Selection)) throw new Error("invalid merge");

      for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Selection(merges, this._parents);
    }

    function selection_order() {

      for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
          }
        }
      }

      return this;
    }

    function selection_sort(compare) {
      if (!compare) compare = ascending;

      function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
      }

      for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            sortgroup[i] = node;
          }
        }
        sortgroup.sort(compareNode);
      }

      return new Selection(sortgroups, this._parents).order();
    }

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function selection_call() {
      var callback = arguments[0];
      arguments[0] = this;
      callback.apply(null, arguments);
      return this;
    }

    function selection_nodes() {
      return Array.from(this);
    }

    function selection_node() {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
          var node = group[i];
          if (node) return node;
        }
      }

      return null;
    }

    function selection_size() {
      let size = 0;
      for (const node of this) ++size; // eslint-disable-line no-unused-vars
      return size;
    }

    function selection_empty() {
      return !this.node();
    }

    function selection_each(callback) {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) callback.call(node, node.__data__, i, group);
        }
      }

      return this;
    }

    function attrRemove(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant(name, value) {
      return function() {
        this.setAttribute(name, value);
      };
    }

    function attrConstantNS(fullname, value) {
      return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
      };
    }

    function attrFunction(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
      };
    }

    function attrFunctionNS(fullname, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
      };
    }

    function selection_attr(name, value) {
      var fullname = namespace(name);

      if (arguments.length < 2) {
        var node = this.node();
        return fullname.local
            ? node.getAttributeNS(fullname.space, fullname.local)
            : node.getAttribute(fullname);
      }

      return this.each((value == null
          ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
          ? (fullname.local ? attrFunctionNS : attrFunction)
          : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
    }

    function defaultView(node) {
      return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
          || (node.document && node) // node is a Window
          || node.defaultView; // node is a Document
    }

    function styleRemove(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant(name, value, priority) {
      return function() {
        this.style.setProperty(name, value, priority);
      };
    }

    function styleFunction(name, value, priority) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
      };
    }

    function selection_style(name, value, priority) {
      return arguments.length > 1
          ? this.each((value == null
                ? styleRemove : typeof value === "function"
                ? styleFunction
                : styleConstant)(name, value, priority == null ? "" : priority))
          : styleValue(this.node(), name);
    }

    function styleValue(node, name) {
      return node.style.getPropertyValue(name)
          || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
    }

    function propertyRemove(name) {
      return function() {
        delete this[name];
      };
    }

    function propertyConstant(name, value) {
      return function() {
        this[name] = value;
      };
    }

    function propertyFunction(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
      };
    }

    function selection_property(name, value) {
      return arguments.length > 1
          ? this.each((value == null
              ? propertyRemove : typeof value === "function"
              ? propertyFunction
              : propertyConstant)(name, value))
          : this.node()[name];
    }

    function classArray(string) {
      return string.trim().split(/^|\s+/);
    }

    function classList(node) {
      return node.classList || new ClassList(node);
    }

    function ClassList(node) {
      this._node = node;
      this._names = classArray(node.getAttribute("class") || "");
    }

    ClassList.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };

    function classedAdd(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.add(names[i]);
    }

    function classedRemove(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.remove(names[i]);
    }

    function classedTrue(names) {
      return function() {
        classedAdd(this, names);
      };
    }

    function classedFalse(names) {
      return function() {
        classedRemove(this, names);
      };
    }

    function classedFunction(names, value) {
      return function() {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
      };
    }

    function selection_classed(name, value) {
      var names = classArray(name + "");

      if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while (++i < n) if (!list.contains(names[i])) return false;
        return true;
      }

      return this.each((typeof value === "function"
          ? classedFunction : value
          ? classedTrue
          : classedFalse)(names, value));
    }

    function textRemove() {
      this.textContent = "";
    }

    function textConstant(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      };
    }

    function selection_text(value) {
      return arguments.length
          ? this.each(value == null
              ? textRemove : (typeof value === "function"
              ? textFunction
              : textConstant)(value))
          : this.node().textContent;
    }

    function htmlRemove() {
      this.innerHTML = "";
    }

    function htmlConstant(value) {
      return function() {
        this.innerHTML = value;
      };
    }

    function htmlFunction(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      };
    }

    function selection_html(value) {
      return arguments.length
          ? this.each(value == null
              ? htmlRemove : (typeof value === "function"
              ? htmlFunction
              : htmlConstant)(value))
          : this.node().innerHTML;
    }

    function raise() {
      if (this.nextSibling) this.parentNode.appendChild(this);
    }

    function selection_raise() {
      return this.each(raise);
    }

    function lower() {
      if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }

    function selection_lower() {
      return this.each(lower);
    }

    function selection_append(name) {
      var create = typeof name === "function" ? name : creator(name);
      return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
      });
    }

    function constantNull() {
      return null;
    }

    function selection_insert(name, before) {
      var create = typeof name === "function" ? name : creator(name),
          select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
      return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
      });
    }

    function remove() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    }

    function selection_remove() {
      return this.each(remove);
    }

    function selection_cloneShallow() {
      var clone = this.cloneNode(false), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_cloneDeep() {
      var clone = this.cloneNode(true), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_clone(deep) {
      return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
    }

    function selection_datum(value) {
      return arguments.length
          ? this.property("__data__", value)
          : this.node().__data__;
    }

    function contextListener(listener) {
      return function(event) {
        listener.call(this, event, this.__data__);
      };
    }

    function parseTypenames(typenames) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {type: t, name: name};
      });
    }

    function onRemove(typename) {
      return function() {
        var on = this.__on;
        if (!on) return;
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
          if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
          } else {
            on[++i] = o;
          }
        }
        if (++i) on.length = i;
        else delete this.__on;
      };
    }

    function onAdd(typename, value, options) {
      return function() {
        var on = this.__on, o, listener = contextListener(value);
        if (on) for (var j = 0, m = on.length; j < m; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
        this.addEventListener(typename.type, listener, options);
        o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
        if (!on) this.__on = [o];
        else on.push(o);
      };
    }

    function selection_on(typename, value, options) {
      var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

      if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
        return;
      }

      on = value ? onAdd : onRemove;
      for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
      return this;
    }

    function dispatchEvent(node, type, params) {
      var window = defaultView(node),
          event = window.CustomEvent;

      if (typeof event === "function") {
        event = new event(type, params);
      } else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
      }

      node.dispatchEvent(event);
    }

    function dispatchConstant(type, params) {
      return function() {
        return dispatchEvent(this, type, params);
      };
    }

    function dispatchFunction(type, params) {
      return function() {
        return dispatchEvent(this, type, params.apply(this, arguments));
      };
    }

    function selection_dispatch(type, params) {
      return this.each((typeof params === "function"
          ? dispatchFunction
          : dispatchConstant)(type, params));
    }

    function* selection_iterator() {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) yield node;
        }
      }
    }

    var root = [null];

    function Selection(groups, parents) {
      this._groups = groups;
      this._parents = parents;
    }

    function selection_selection() {
      return this;
    }

    Selection.prototype = {
      constructor: Selection,
      select: selection_select,
      selectAll: selection_selectAll,
      selectChild: selection_selectChild,
      selectChildren: selection_selectChildren,
      filter: selection_filter,
      data: selection_data,
      enter: selection_enter,
      exit: selection_exit,
      join: selection_join,
      merge: selection_merge,
      selection: selection_selection,
      order: selection_order,
      sort: selection_sort,
      call: selection_call,
      nodes: selection_nodes,
      node: selection_node,
      size: selection_size,
      empty: selection_empty,
      each: selection_each,
      attr: selection_attr,
      style: selection_style,
      property: selection_property,
      classed: selection_classed,
      text: selection_text,
      html: selection_html,
      raise: selection_raise,
      lower: selection_lower,
      append: selection_append,
      insert: selection_insert,
      remove: selection_remove,
      clone: selection_clone,
      datum: selection_datum,
      on: selection_on,
      dispatch: selection_dispatch,
      [Symbol.iterator]: selection_iterator
    };

    function select(selector) {
      return typeof selector === "string"
          ? new Selection([[document.querySelector(selector)]], [document.documentElement])
          : new Selection([[selector]], root);
    }

    function selectAll(selector) {
      return typeof selector === "string"
          ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
          : new Selection([selector == null ? [] : array(selector)], root);
    }

    const arrows = [
      "M0.200275 13.2782C0.200275 12.4153 0.89983 11.7157 1.76278 11.7157H23.6378C24.5007 11.7157 25.2003 12.4153 25.2003 13.2782C25.2003 14.1411 24.5007 14.8407 23.6378 14.8407H1.76278C0.89983 14.8407 0.200275 14.1411 0.200275 13.2782Z",
      "M11.5954 1.23584C12.2056 0.62565 13.1949 0.62565 13.8051 1.23584L24.7426 12.1733C25.3528 12.7835 25.3528 13.7729 24.7426 14.3831L13.8051 25.3206C13.1949 25.9307 12.2056 25.9307 11.5954 25.3206C10.9852 24.7104 10.9852 23.721 11.5954 23.1108L21.4281 13.2782L11.5954 3.44555C10.9852 2.83536 10.9852 1.84604 11.5954 1.23584Z",
      "M 11.5954 1.23584 C 12.2056 0.62565 13.1949 0.62565 13.8051 1.23584 L 24.7426 12.1733 C 25.3528 12.7835 25.3528 13.7729 24.7426 14.3831 L 13.8051 25.3206 C 13.1949 25.9307 12.2056 25.9307 11.5954 25.3206 C 10.9852 24.7104 10.9852 23.721 11.5954 23.1108 L 21.4281 13.2782 L 11.5954 3.44555 C 10.9852 2.83536 10.9852 1.84604 11.5954 1.23584 Z",
    ];

    const arrow = ["m350 560-245-245h140v-315h210v315h140z"];

    const mluRobot =
      "M0.000 10.526 C 0.000 18.246,3.509 21.053,13.158 21.053 C 25.598 21.053,26.316 22.632,26.316 50.000 C 26.316 75.439,27.592 78.947,36.842 78.947 C 46.093 78.947,47.368 75.439,47.368 50.000 C 47.368 24.561,48.644 21.053,57.895 21.053 C 67.968 21.053,68.421 24.561,68.421 102.632 L 68.421 184.211 100.000 184.211 L 131.579 184.211 131.579 236.842 L 131.579 289.474 147.368 289.474 C 162.998 289.474,163.158 289.766,163.158 318.421 C 163.158 343.860,164.434 347.368,173.684 347.368 C 182.935 347.368,184.211 343.860,184.211 318.421 C 184.211 289.766,184.370 289.474,200.000 289.474 C 215.630 289.474,215.789 289.766,215.789 318.421 C 215.789 343.860,217.065 347.368,226.316 347.368 C 235.566 347.368,236.842 343.860,236.842 318.421 C 236.842 289.766,237.002 289.474,252.632 289.474 L 268.421 289.474 268.421 236.842 L 268.421 184.211 300.000 184.211 L 331.579 184.211 331.579 102.632 L 331.579 21.053 365.789 21.053 C 396.491 21.053,400.000 19.973,400.000 10.526 C 400.000 0.185,396.491 0.000,200.000 0.000 C 3.509 0.000,0.000 0.185,0.000 10.526 M310.526 34.211 L 310.526 47.368 200.000 47.368 L 89.474 47.368 89.474 34.211 L 89.474 21.053 200.000 21.053 L 310.526 21.053 310.526 34.211 M310.526 115.789 L 310.526 163.158 200.000 163.158 L 89.474 163.158 89.474 115.789 L 89.474 68.421 200.000 68.421 L 310.526 68.421 310.526 115.789 M137.046 104.882 C 126.932 123.780,144.323 141.720,165.048 133.767 C 176.310 129.445,176.546 102.225,165.359 97.932 C 150.912 92.388,142.647 94.416,137.046 104.882 M226.501 104.917 C 219.455 118.083,219.539 118.787,229.323 128.571 C 242.236 141.484,268.421 132.923,268.421 115.789 C 268.421 97.233,235.222 88.622,226.501 104.917 M242.105 226.316 L 242.105 268.421 197.368 268.421 L 152.632 268.421 152.632 226.316 L 152.632 184.211 197.368 184.211 L 242.105 184.211 242.105 226.316 M100.000 226.316 C 100.000 254.386,101.170 257.895,110.526 257.895 C 119.883 257.895,121.053 254.386,121.053 226.316 C 121.053 198.246,119.883 194.737,110.526 194.737 C 101.170 194.737,100.000 198.246,100.000 226.316 M278.947 226.316 C 278.947 254.386,280.117 257.895,289.474 257.895 C 298.830 257.895,300.000 254.386,300.000 226.316 C 300.000 198.246,298.830 194.737,289.474 194.737 C 280.117 194.737,278.947 198.246,278.947 226.316 ";

    const bananaOne = [
      "m471.13 63.785c-0.11328 0.054688-0.28125 0.16797-0.39062 0.22266h-0.44922c0.27734-0.054687 0.55859-0.11328 0.83984-0.22266z",
      "m593.15 192.98c4.5352 13.273 5.9375 27.441 6.2734 41.551 0.33594 15.289-1.1211 30.465-4.7031 45.305-2.3516 9.8555-5.4883 19.543-8.7344 29.176-2.4648 7.2812-5.0977 14.617-8.625 21.336-4.9297 9.3516-10.414 18.48-16.352 27.273-5.8789 8.625-12.098 17.078-19.039 24.863-7.7266 8.6797-16.129 16.855-24.754 24.695-7.8398 7.1133-16.184 13.777-24.754 20.105-7.4492 5.4883-15.457 10.305-23.297 15.289-6.3828 4.0312-12.938 7.8945-19.488 11.648-3.4727 1.9609-7 3.7539-10.695 5.2656-12.32 5.207-24.641 10.414-36.961 15.566-9.1289 3.8086-18.258 7.5586-27.441 11.199-7.7266 3.0781-15.961 4.9844-24.137 6.6094-12.152 2.4062-24.414 4.3672-36.68 5.9375-4.8711 0.61719-10.137 0.44922-14.895-0.72656-6.2148-1.5664-11.199-5.4336-15.008-10.922-7-10.137-6.3828-20.551-1.9023-31.191 0.054687-0.16797 0.11328-0.28125 0.22266-0.44922 0.67188-1.5117 1.457-2.9102 2.2969-4.2578 1.0078-1.5664 2.1836-3.0234 3.4727-4.4258 2.3516-2.6328 5.0977-4.9297 7.8945-7.1133 8.9609-6.832 18.199-13.383 27.328-20.047 14.391-10.473 28.895-20.832 43.121-31.473 6.0469-4.4805 12.039-9.0156 18.031-13.551 6.5508-4.9844 13.105-10.137 19.434-15.344 10.863-8.9609 21.504-18.199 31.414-28.168 14.281-14.391 26.879-30.297 36.625-48.16 5.6562-10.359 11.367-20.832 15.512-31.809 6.1055-16.238 11.648-32.762 13.832-50.176 1.5117-12.32 2.4648-24.586 0.054688-36.902-1.0078-5.3203-2.3516-10.586-3.6953-15.848-0.16797-0.61719-0.28125-1.2305-0.44922-1.793-1.2305-4.8164-1.9609-9.9102-4.2578-14.223-4.0312-7.6172-7.5039-15.68-14.281-21.672-2.1836-1.9609-4.5352-3.6953-6.8867-5.3203-3.9766-2.6328-8.1758-4.7617-12.711-6.4961-4.4258-1.6797-6.5508-6.0469-5.0977-10.473 2.8555-8.793 7.6719-16.406 14.672-22.512 0.72656-0.67188 1.5664-1.2305 2.4062-1.7344 0.11328-0.054688 0.22266-0.16797 0.39062-0.22266 1.457-0.89453 3.0234-1.793 4.8164-2.9102 0.67188 5.0391 0.89453 9.4062 1.9023 13.609 0.054688 0.28125 0.16797 0.61719 0.22266 0.89453 0.89453 3.3047 2.1289 6.7188 4.0898 9.4062 0.78516 1.0625 1.625 2.1836 2.4062 3.2461 6.2148 8.3438 12.656 16.52 19.266 24.586 5.4336 6.6094 11.703 12.32 20.945 12.434 4.3125 0.054687 8.625-1.0078 12.992-1.2891 10.078-0.55859 18.258 4.0898 24.473 11.258 5.6562 6.6094 10.809 13.887 14.785 21.617 5.9414 11.809 11.707 23.848 15.965 36.336z",
    ];

    const bananaThree = [
      "m203.56 376.99c-5.3203 2.2383-11.816 5.4336-17.246 10.809-1.9023-0.22266-3.8086-0.44922-5.7695-0.72656-8.2305-1.0625-16.406-3.3594-24.359-5.9375-11.816-3.7539-23.465-8.0078-35-12.543-4.5352-1.793-9.0703-4.5352-12.656-7.8398-4.6484-4.3672-7.168-10.137-7.8398-16.855-1.2305-12.266 4.3672-21.055 13.441-28.223 5.7695-4.5938 12.824-6.4414 19.992-7.4492 11.145-1.625 22.398-2.9102 33.602-4.3125 17.695-2.2383 35.336-4.2578 52.977-6.6641 15.625-2.1289 31.305-4.3125 46.816-7.168 13.832-2.5742 27.609-5.4883 41.105-9.4648 19.434-5.7109 38.191-13.496 55.383-24.414 9.9688-6.3281 19.992-12.711 28.953-20.328 13.215-11.258 26.039-23.016 36.398-37.238 7.2812-10.023 14.055-20.328 17.922-32.258 1.8477-5.7695 3.3594-11.594 4.8711-17.473 1.2305-4.8164 3.0781-9.6328 3.1914-14.504 0.16797-8.625 1.0078-17.359-2.0156-25.871-0.054688-0.22266-0.16797-0.39062-0.22266-0.61719 2.2969 2.3516 4.3672 4.8711 6.1602 7.5586 3.4727 5.1523 4.9297 11.48 6.3828 18.199 0.28125 1.2305 0.55859 2.5195 0.83984 3.7539 0.61719 2.5195 0.50391 5.7109 0.39062 9.0703-0.054688 1.2891-0.054688 2.6328-0.054688 3.9766v0.16797c0 5.7695 0 11.762-0.33594 17.473-0.72656 11.594-4.6484 22.848-8.7344 33.32-6.2734 15.848-15.734 30.297-25.031 43.512-6.3281 9.0156-14.281 17.473-21.895 25.703l-0.39062 0.39062c-12.488 13.383-27.441 25.145-45.809 36.062-10.191 6.1055-21.504 11.984-36.734 19.039-8.0625 3.7539-16.801 7.5586-28.223 12.375-4.7617 1.9609-9.3516 3.8633-14.895 6.1602-11.145 4.5938-22.566 9.0703-33.656 13.383-5.207 2.0703-10.641 4.1445-15.902 6.2734-2.8008 1.1211-5.6562 2.2383-8.457 3.3594-7 2.7422-14.223 5.6016-21.336 8.5664z",
      "m488.43 144.48c0.28125 1.2891 0.55859 2.5742 0.89453 3.8633l0.054687 0.16797c1.457 5.6016 2.9102 11.367 4.0312 17.023 2.1836 11.367 1.2305 23.297-0.16797 34.441-2.0703 16.91-7.6719 33.266-13.383 48.383-3.9219 10.305-9.4648 20.496-14.785 30.352l-0.28125 0.44922c-8.7344 16.07-20.328 31.246-35.336 46.367-8.3438 8.457-17.863 16.969-30.801 27.609-12.152 10.023-24.863 19.543-37.184 28.672-0.28125 0.16797-0.50391 0.39062-0.78516 0.55859-9.4062 7-19.098 14-28.449 20.777-4.5352 3.3047-9.2383 6.6641-13.832 10.023-2.4648 1.793-4.9297 3.5859-7.3906 5.375-6.6094 4.7617-13.441 9.7422-20.047 14.785-4.5938 3.5273-10.078 8.1758-14 14.785-1.9023 0.22266-3.8633 0.50391-5.7695 0.72656-8.2305 1.0078-16.688 0.83984-25.031 0.33594-12.375-0.72656-24.754-1.8477-37.016-3.4141-4.8711-0.61719-9.9102-2.1289-14.223-4.4258-5.6016-3.0781-9.4648-8.0078-11.816-14.336-4.2578-11.594-1.0078-21.504 5.9375-30.633 2.2383-2.9688 5.0391-5.375 8.0625-7.3359 2.9688-1.9609 6.1602-3.5273 9.4648-4.8711l1.7344-0.72656c9.8555-4.0898 19.77-7.8945 29.68-11.816 16.52-6.5508 33.152-12.938 49.617-19.711 4.9844-2.0703 9.9688-4.0898 14.953-6.1602 9.5742-3.9766 19.152-8.0625 28.559-12.488 12.711-5.9375 25.367-12.266 37.465-19.434 17.414-10.359 33.602-22.625 47.488-37.465 8.0625-8.625 16.184-17.305 22.961-26.938 9.9688-14.168 19.488-28.84 25.93-45.137 4.5352-11.535 8.5117-23.238 9.2969-35.672 0.39062-6.0469 0.39062-12.098 0.39062-18.145 0-4.9297 0.55859-10.078-0.55859-14.785-1.9609-8.3984-3.3594-17.078-8.3984-24.527-0.11328-0.16797-0.22266-0.33594-0.39062-0.50391 2.8008 1.6797 5.4336 3.6406 7.8945 5.8242 0.054687 0.054688 0.11328 0.11328 0.16797 0.16797 4.5352 4.0898 7.4492 9.8008 10.527 15.848 0.61719 1.1758 1.1758 2.2969 1.793 3.4727 1.2852 2.1875 2.0117 5.2656 2.7422 8.5156z",
      "m471.13 63.785c-0.11328 0.054688-0.28125 0.16797-0.39062 0.22266h-0.44922c0.27734-0.054687 0.55859-0.11328 0.83984-0.22266z",
      "m593.15 192.98c4.5352 13.273 5.9375 27.441 6.2734 41.551 0.33594 15.289-1.1211 30.465-4.7031 45.305-2.3516 9.8555-5.4883 19.543-8.7344 29.176-2.4648 7.2812-5.0977 14.617-8.625 21.336-4.9297 9.3516-10.414 18.48-16.352 27.273-5.8789 8.625-12.098 17.078-19.039 24.863-7.7266 8.6797-16.129 16.855-24.754 24.695-7.8398 7.1133-16.184 13.777-24.754 20.105-7.4492 5.4883-15.457 10.305-23.297 15.289-6.3828 4.0312-12.938 7.8945-19.488 11.648-3.4727 1.9609-7 3.7539-10.695 5.2656-12.32 5.207-24.641 10.414-36.961 15.566-9.1289 3.8086-18.258 7.5586-27.441 11.199-7.7266 3.0781-15.961 4.9844-24.137 6.6094-12.152 2.4062-24.414 4.3672-36.68 5.9375-4.8711 0.61719-10.137 0.44922-14.895-0.72656-6.2148-1.5664-11.199-5.4336-15.008-10.922-7-10.137-6.3828-20.551-1.9023-31.191 0.054687-0.16797 0.11328-0.28125 0.22266-0.44922 0.67188-1.5117 1.457-2.9102 2.2969-4.2578 1.0078-1.5664 2.1836-3.0234 3.4727-4.4258 2.3516-2.6328 5.0977-4.9297 7.8945-7.1133 8.9609-6.832 18.199-13.383 27.328-20.047 14.391-10.473 28.895-20.832 43.121-31.473 6.0469-4.4805 12.039-9.0156 18.031-13.551 6.5508-4.9844 13.105-10.137 19.434-15.344 10.863-8.9609 21.504-18.199 31.414-28.168 14.281-14.391 26.879-30.297 36.625-48.16 5.6562-10.359 11.367-20.832 15.512-31.809 6.1055-16.238 11.648-32.762 13.832-50.176 1.5117-12.32 2.4648-24.586 0.054688-36.902-1.0078-5.3203-2.3516-10.586-3.6953-15.848-0.16797-0.61719-0.28125-1.2305-0.44922-1.793-1.2305-4.8164-1.9609-9.9102-4.2578-14.223-4.0312-7.6172-7.5039-15.68-14.281-21.672-2.1836-1.9609-4.5352-3.6953-6.8867-5.3203-3.9766-2.6328-8.1758-4.7617-12.711-6.4961-4.4258-1.6797-6.5508-6.0469-5.0977-10.473 2.8555-8.793 7.6719-16.406 14.672-22.512 0.72656-0.67188 1.5664-1.2305 2.4062-1.7344 0.11328-0.054688 0.22266-0.16797 0.39062-0.22266 1.457-0.89453 3.0234-1.793 4.8164-2.9102 0.67188 5.0391 0.89453 9.4062 1.9023 13.609 0.054688 0.28125 0.16797 0.61719 0.22266 0.89453 0.89453 3.3047 2.1289 6.7188 4.0898 9.4062 0.78516 1.0625 1.625 2.1836 2.4062 3.2461 6.2148 8.3438 12.656 16.52 19.266 24.586 5.4336 6.6094 11.703 12.32 20.945 12.434 4.3125 0.054687 8.625-1.0078 12.992-1.2891 10.078-0.55859 18.258 4.0898 24.473 11.258 5.6562 6.6094 10.809 13.887 14.785 21.617 5.9414 11.809 11.707 23.848 15.965 36.336z",
    ];

    const cactus = [
      "m393.48 551.3c-40 13.914-73.043 12.176-106.09-6.957l-10.434-175.65c-15.652 6.957-26.086 10.434-38.262 12.176l12.176 13.914-17.391-12.176c-10.434 1.7383-22.609 0-34.781-6.957-13.914-6.957-24.348-20.871-33.043-38.262l-19.129-3.4766 17.391-1.7383c-12.176-26.086-15.652-60.871-13.914-93.914l-24.348-5.2188h24.348c1.7383-15.652 3.4766-29.566 6.957-43.477l-17.391-8.6953 19.129 3.4766c6.957-20.871 15.652-38.262 27.824-48.695l-5.2188-24.348 10.434 19.129c10.434-6.957 24.348-10.434 41.738-5.2188 3.4766 1.7383 8.6953 5.2188 12.176 6.957l6.957-13.914-3.4766 17.391c17.391 15.652 19.129 43.477 15.652 73.043l5.2188-1.7383-5.2188 1.7383c-5.2188 52.176-27.824 104.35-3.4766 92.176 3.4766 0 8.6953-1.7383 12.176-3.4766-1.7383-60.871-5.2188-196.52 17.391-240 13.914-24.348 31.305-40 50.434-48.695v-8.6953l1.7383 8.6953c27.824-10.434 57.391-3.4766 80 20.871l13.914-17.391-10.434 22.609c15.652 19.129 24.348 45.219 27.824 81.738h17.391l-17.391 5.2188v15.652c0 15.652 0 31.305-1.7383 48.695l22.609 5.2188h-22.609c-5.2188 66.086-19.129 139.13-29.566 194.78l-5.2188 20.871c48.695 26.086 29.566 6.957 34.781-64.348v-5.2188l-3.4766-1.7383 3.4766 1.7383c3.4766-31.305 15.652-52.176 31.305-60.871v-17.391l3.4766 13.914c15.652-8.6953 34.781-5.2188 48.695 10.434l12.176-15.652-8.6953 19.129c8.6953 12.176 13.914 29.566 15.652 52.176l17.391-1.7383-17.391 5.2188c0 12.176 0 26.086-3.4766 40l22.609 6.957-22.609-1.7383c-1.7383 10.434-5.2188 19.129-8.6953 29.566-5.2188 20.871-13.914 38.262-26.086 52.176l19.129 5.2188h-22.609c-12.176 12.176-27.824 20.871-48.695 22.609-8.6953 0-17.391-1.7383-26.086-6.957l-13.914 6.957 10.434-8.6953c-8.6953-3.4766-17.391-10.434-26.086-15.652l-1.7383-1.7383-10.434 80h-3.4766z",
    ];

    /* src/Components/SimulationBandit.svelte generated by Svelte v3.52.0 */

    const file$c = "src/Components/SimulationBandit.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[26] = list[i];
    	return child_ctx;
    }

    // (52:2) {#each [...Array(numX).keys()] as tick}
    function create_each_block_4$2(ctx) {
    	let g;
    	let g_transform_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			attr_dev(g, "transform", g_transform_value = "translate(" + /*xScale*/ ctx[3](/*tick*/ ctx[26]) + ", " + /*yScale*/ ctx[2](0) + ")");
    			add_location(g, file$c, 52, 4, 1507);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*xScale, yScale*/ 12 && g_transform_value !== (g_transform_value = "translate(" + /*xScale*/ ctx[3](/*tick*/ ctx[26]) + ", " + /*yScale*/ ctx[2](0) + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$2.name,
    		type: "each",
    		source: "(52:2) {#each [...Array(numX).keys()] as tick}",
    		ctx
    	});

    	return block;
    }

    // (65:4) {#each bananaOne as b}
    function create_each_block_3$2(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "bananaPath svelte-1zvjfd");
    			attr_dev(path, "d", /*b*/ ctx[21]);
    			set_style(path, "transform", "scale(" + /*$bananaScale*/ ctx[9] + ")");
    			add_location(path, file$c, 65, 6, 1882);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$bananaScale*/ 512) {
    				set_style(path, "transform", "scale(" + /*$bananaScale*/ ctx[9] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$2.name,
    		type: "each",
    		source: "(65:4) {#each bananaOne as b}",
    		ctx
    	});

    	return block;
    }

    // (77:4) {#each bananaThree as b}
    function create_each_block_2$2(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "bananaPath svelte-1zvjfd");
    			attr_dev(path, "d", /*b*/ ctx[21]);
    			set_style(path, "transform", "scale(" + /*$bananaScale*/ ctx[9] + ")");
    			add_location(path, file$c, 77, 6, 2282);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$bananaScale*/ 512) {
    				set_style(path, "transform", "scale(" + /*$bananaScale*/ ctx[9] + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(77:4) {#each bananaThree as b}",
    		ctx
    	});

    	return block;
    }

    // (88:4) {#each arrow as ar}
    function create_each_block_1$4(ctx) {
    	let path;
    	let path_transform_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", /*ar*/ ctx[16]);
    			attr_dev(path, "class", "" + (null_to_empty(`arrow-${"left"} arrow`) + " svelte-1zvjfd"));
    			attr_dev(path, "stroke-width", 0);
    			attr_dev(path, "transform", path_transform_value = `rotate(${/*directionMap*/ ctx[13]["left"]}) scale(${/*$arrowScale*/ ctx[10]})`);
    			add_location(path, file$c, 88, 6, 2575);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$arrowScale*/ 1024 && path_transform_value !== (path_transform_value = `rotate(${/*directionMap*/ ctx[13]["left"]}) scale(${/*$arrowScale*/ ctx[10]})`)) {
    				attr_dev(path, "transform", path_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(88:4) {#each arrow as ar}",
    		ctx
    	});

    	return block;
    }

    // (102:4) {#each arrow as ar}
    function create_each_block$6(ctx) {
    	let path;
    	let path_transform_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", /*ar*/ ctx[16]);
    			attr_dev(path, "class", "" + (null_to_empty(`arrow-${"right"} arrow`) + " svelte-1zvjfd"));
    			attr_dev(path, "stroke-width", 0);
    			attr_dev(path, "transform", path_transform_value = `rotate(${/*directionMap*/ ctx[13]["right"]}) scale(${/*$arrowScale*/ ctx[10]})`);
    			add_location(path, file$c, 102, 6, 2953);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$arrowScale*/ 1024 && path_transform_value !== (path_transform_value = `rotate(${/*directionMap*/ ctx[13]["right"]}) scale(${/*$arrowScale*/ ctx[10]})`)) {
    				attr_dev(path, "transform", path_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(102:4) {#each arrow as ar}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let svg;
    	let g0;
    	let g0_transform_value;
    	let g1;
    	let g1_transform_value;
    	let g2;
    	let g2_transform_value;
    	let g3;
    	let g3_transform_value;
    	let g4;
    	let path;
    	let g4_transform_value;
    	let each_value_4 = [...Array(/*numX*/ ctx[11]).keys()];
    	validate_each_argument(each_value_4);
    	let each_blocks_4 = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks_4[i] = create_each_block_4$2(get_each_context_4$2(ctx, each_value_4, i));
    	}

    	let each_value_3 = bananaOne;
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3$2(get_each_context_3$2(ctx, each_value_3, i));
    	}

    	let each_value_2 = bananaThree;
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	let each_value_1 = arrow;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	let each_value = arrow;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].c();
    			}

    			g0 = svg_element("g");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			g1 = svg_element("g");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			g2 = svg_element("g");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			g3 = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			g4 = svg_element("g");
    			path = svg_element("path");
    			attr_dev(g0, "id", "reward-1-bandit");
    			attr_dev(g0, "transform", g0_transform_value = "translate(" + (/*xScale*/ ctx[3](0) - /*rewardBox*/ ctx[6].width) + ", " + (/*yScale*/ ctx[2](0) - /*rewardBox*/ ctx[6].height / 2 - 7.5) + ")");
    			add_location(g0, file$c, 58, 2, 1706);
    			attr_dev(g1, "id", "reward-3-bandit");
    			attr_dev(g1, "transform", g1_transform_value = "translate(" + (/*xScale*/ ctx[3](/*numX*/ ctx[11] - 1) - /*rewardBox3*/ ctx[5].width / 2 - 10) + ", " + (/*yScale*/ ctx[2](0) - /*rewardBox3*/ ctx[5].height / 2 - 7.5) + ")");
    			add_location(g1, file$c, 69, 2, 2001);
    			attr_dev(g2, "transform", g2_transform_value = "translate(" + (/*xScale*/ ctx[3](/*directionXPos*/ ctx[12]['left']) + /*arrowBox*/ ctx[4].height / 2 + 5.5) + ", " + (/*yScale*/ ctx[2](0) - /*arrowBox*/ ctx[4].width / 2 - 5) + ")");
    			add_location(g2, file$c, 82, 2, 2401);
    			attr_dev(g3, "transform", g3_transform_value = "translate(" + (/*xScale*/ ctx[3](/*directionXPos*/ ctx[12]['right']) - /*arrowBox*/ ctx[4].height / 2) + ", " + (/*yScale*/ ctx[2](0) + /*arrowBox*/ ctx[4].width / 2 + 5) + ")");
    			add_location(g3, file$c, 97, 2, 2790);
    			attr_dev(path, "d", mluRobot);
    			set_style(path, "transform", "scale(0.22)");
    			attr_dev(path, "stroke", "white");
    			attr_dev(path, "stroke-width", "1");
    			attr_dev(path, "fill", "black");
    			add_location(path, file$c, 116, 4, 3300);
    			attr_dev(g4, "id", "agent-g-bandit");
    			attr_dev(g4, "transform", g4_transform_value = "translate(" + (/*xScale*/ ctx[3](4) - /*robotWidth*/ ctx[8] / 2 + 5) + ", " + (/*yScale*/ ctx[2](0) - /*robotHeight*/ ctx[7] / 2) + ")");
    			add_location(g4, file$c, 111, 2, 3168);
    			attr_dev(svg, "width", /*$banditWidth*/ ctx[1]);
    			attr_dev(svg, "height", /*$banditHeight*/ ctx[0]);
    			attr_dev(svg, "class", "svelte-1zvjfd");
    			add_location(svg, file$c, 50, 0, 1411);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].m(svg, null);
    			}

    			append_dev(svg, g0);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(g0, null);
    			}

    			append_dev(svg, g1);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(g1, null);
    			}

    			append_dev(svg, g2);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(g2, null);
    			}

    			append_dev(svg, g3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g3, null);
    			}

    			append_dev(svg, g4);
    			append_dev(g4, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*xScale, Array, numX, yScale*/ 2060) {
    				each_value_4 = [...Array(/*numX*/ ctx[11]).keys()];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$2(ctx, each_value_4, i);

    					if (each_blocks_4[i]) {
    						each_blocks_4[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_4[i] = create_each_block_4$2(child_ctx);
    						each_blocks_4[i].c();
    						each_blocks_4[i].m(svg, g0);
    					}
    				}

    				for (; i < each_blocks_4.length; i += 1) {
    					each_blocks_4[i].d(1);
    				}

    				each_blocks_4.length = each_value_4.length;
    			}

    			if (dirty & /*bananaOne, $bananaScale*/ 512) {
    				each_value_3 = bananaOne;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$2(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_3$2(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(g0, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_3.length;
    			}

    			if (dirty & /*xScale, rewardBox, yScale*/ 76 && g0_transform_value !== (g0_transform_value = "translate(" + (/*xScale*/ ctx[3](0) - /*rewardBox*/ ctx[6].width) + ", " + (/*yScale*/ ctx[2](0) - /*rewardBox*/ ctx[6].height / 2 - 7.5) + ")")) {
    				attr_dev(g0, "transform", g0_transform_value);
    			}

    			if (dirty & /*bananaThree, $bananaScale*/ 512) {
    				each_value_2 = bananaThree;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2$2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(g1, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty & /*xScale, rewardBox3, yScale*/ 44 && g1_transform_value !== (g1_transform_value = "translate(" + (/*xScale*/ ctx[3](/*numX*/ ctx[11] - 1) - /*rewardBox3*/ ctx[5].width / 2 - 10) + ", " + (/*yScale*/ ctx[2](0) - /*rewardBox3*/ ctx[5].height / 2 - 7.5) + ")")) {
    				attr_dev(g1, "transform", g1_transform_value);
    			}

    			if (dirty & /*arrow, directionMap, $arrowScale*/ 9216) {
    				each_value_1 = arrow;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$4(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(g2, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*xScale, arrowBox, yScale*/ 28 && g2_transform_value !== (g2_transform_value = "translate(" + (/*xScale*/ ctx[3](/*directionXPos*/ ctx[12]['left']) + /*arrowBox*/ ctx[4].height / 2 + 5.5) + ", " + (/*yScale*/ ctx[2](0) - /*arrowBox*/ ctx[4].width / 2 - 5) + ")")) {
    				attr_dev(g2, "transform", g2_transform_value);
    			}

    			if (dirty & /*arrow, directionMap, $arrowScale*/ 9216) {
    				each_value = arrow;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g3, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*xScale, arrowBox, yScale*/ 28 && g3_transform_value !== (g3_transform_value = "translate(" + (/*xScale*/ ctx[3](/*directionXPos*/ ctx[12]['right']) - /*arrowBox*/ ctx[4].height / 2) + ", " + (/*yScale*/ ctx[2](0) + /*arrowBox*/ ctx[4].width / 2 + 5) + ")")) {
    				attr_dev(g3, "transform", g3_transform_value);
    			}

    			if (dirty & /*xScale, robotWidth, yScale, robotHeight*/ 396 && g4_transform_value !== (g4_transform_value = "translate(" + (/*xScale*/ ctx[3](4) - /*robotWidth*/ ctx[8] / 2 + 5) + ", " + (/*yScale*/ ctx[2](0) - /*robotHeight*/ ctx[7] / 2) + ")")) {
    				attr_dev(g4, "transform", g4_transform_value);
    			}

    			if (dirty & /*$banditWidth*/ 2) {
    				attr_dev(svg, "width", /*$banditWidth*/ ctx[1]);
    			}

    			if (dirty & /*$banditHeight*/ 1) {
    				attr_dev(svg, "height", /*$banditHeight*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks_4, detaching);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let arrowBox;
    	let arrowBox2;
    	let rewardBox;
    	let rewardBox3;
    	let robotWidth;
    	let robotHeight;
    	let xScale;
    	let yScale;
    	let $banditHeight;
    	let $banditWidth;
    	let $bananaScale;
    	let $arrowScale;
    	validate_store(banditHeight, 'banditHeight');
    	component_subscribe($$self, banditHeight, $$value => $$invalidate(0, $banditHeight = $$value));
    	validate_store(banditWidth, 'banditWidth');
    	component_subscribe($$self, banditWidth, $$value => $$invalidate(1, $banditWidth = $$value));
    	validate_store(bananaScale, 'bananaScale');
    	component_subscribe($$self, bananaScale, $$value => $$invalidate(9, $bananaScale = $$value));
    	validate_store(arrowScale, 'arrowScale');
    	component_subscribe($$self, arrowScale, $$value => $$invalidate(10, $arrowScale = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimulationBandit', slots, []);
    	let numX = 9;
    	let numY = 2;
    	const directionXPos = { left: 2, right: 6 };
    	const directionMap = { left: 90, right: 270 };

    	onMount(() => {
    		const robotBGSize = select("#agent-g-bandit").node().getBoundingClientRect();
    		$$invalidate(8, robotWidth = robotBGSize.width);
    		$$invalidate(7, robotHeight = robotBGSize.height);
    		$$invalidate(6, rewardBox = select("#reward-1-bandit").node().getBoundingClientRect());
    		$$invalidate(5, rewardBox3 = select("#reward-3-bandit").node().getBoundingClientRect());
    		$$invalidate(4, arrowBox = select("path.arrow-left").node().getBoundingClientRect());
    		arrowBox2 = select("path.arrow-right").node().getBoundingClientRect();
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SimulationBandit> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		scaleLinear: linear,
    		select,
    		mluRobot,
    		arrow,
    		bananaOne,
    		bananaThree,
    		banditWidth,
    		banditHeight,
    		bananaScale,
    		arrowScale,
    		robotScale,
    		numX,
    		numY,
    		directionXPos,
    		directionMap,
    		yScale,
    		xScale,
    		arrowBox2,
    		arrowBox,
    		rewardBox3,
    		rewardBox,
    		robotHeight,
    		robotWidth,
    		$banditHeight,
    		$banditWidth,
    		$bananaScale,
    		$arrowScale
    	});

    	$$self.$inject_state = $$props => {
    		if ('numX' in $$props) $$invalidate(11, numX = $$props.numX);
    		if ('numY' in $$props) $$invalidate(15, numY = $$props.numY);
    		if ('yScale' in $$props) $$invalidate(2, yScale = $$props.yScale);
    		if ('xScale' in $$props) $$invalidate(3, xScale = $$props.xScale);
    		if ('arrowBox2' in $$props) arrowBox2 = $$props.arrowBox2;
    		if ('arrowBox' in $$props) $$invalidate(4, arrowBox = $$props.arrowBox);
    		if ('rewardBox3' in $$props) $$invalidate(5, rewardBox3 = $$props.rewardBox3);
    		if ('rewardBox' in $$props) $$invalidate(6, rewardBox = $$props.rewardBox);
    		if ('robotHeight' in $$props) $$invalidate(7, robotHeight = $$props.robotHeight);
    		if ('robotWidth' in $$props) $$invalidate(8, robotWidth = $$props.robotWidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$banditWidth*/ 2) {
    			// scales
    			$$invalidate(3, xScale = linear().domain([-1, numX]).range([0, $banditWidth]));
    		}

    		if ($$self.$$.dirty & /*$banditHeight*/ 1) {
    			$$invalidate(2, yScale = linear().domain([-1, numY]).range([0, $banditHeight]));
    		}
    	};

    	$$invalidate(4, arrowBox = { height: 0, width: 0, x: 105, y: 0 });
    	arrowBox2 = { height: 0, width: 0, x: 105, y: 0 };
    	$$invalidate(6, rewardBox = { height: 0, width: 0, x: 0, y: 0 });
    	$$invalidate(5, rewardBox3 = { height: 30, width: 0, x: 0, y: 0 });
    	$$invalidate(8, robotWidth = 20);
    	$$invalidate(7, robotHeight = 20);

    	return [
    		$banditHeight,
    		$banditWidth,
    		yScale,
    		xScale,
    		arrowBox,
    		rewardBox3,
    		rewardBox,
    		robotHeight,
    		robotWidth,
    		$bananaScale,
    		$arrowScale,
    		numX,
    		directionXPos,
    		directionMap
    	];
    }

    class SimulationBandit extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimulationBandit",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }

    var DEFAULT_CONFIG = {
      // minimum relative difference between two compared values,
      // used by all comparison functions
      epsilon: 1e-12,
      // type of default matrix output. Choose 'matrix' (default) or 'array'
      matrix: 'Matrix',
      // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
      number: 'number',
      // number of significant digits in BigNumbers
      precision: 64,
      // predictable output type of functions. When true, output type depends only
      // on the input types. When false (default), output type can vary depending
      // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
      // predictable is false, and returns `NaN` when true.
      predictable: false,
      // random seed for seeded pseudo random number generation
      // null = randomly seed
      randomSeed: null
    };

    // type checks for all known types
    //
    // note that:
    //
    // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
    //   instanceof cannot be used because that would not allow to pass data from
    //   one instance of math.js to another since each has it's own instance of Unit.
    // - check the `isUnit` property via the constructor, so there will be no
    //   matches for "fake" instances like plain objects with a property `isUnit`.
    //   That is important for security reasons.
    // - It must not be possible to override the type checks used internally,
    //   for security reasons, so these functions are not exposed in the expression
    //   parser.

    function isNumber(x) {
      return typeof x === 'number';
    }
    function isBigNumber(x) {
      if (!x || typeof x !== 'object' || typeof x.constructor !== 'function') {
        return false;
      }
      if (x.isBigNumber === true && typeof x.constructor.prototype === 'object' && x.constructor.prototype.isBigNumber === true) {
        return true;
      }
      if (typeof x.constructor.isDecimal === 'function' && x.constructor.isDecimal(x) === true) {
        return true;
      }
      return false;
    }
    function isComplex(x) {
      return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
    }
    function isFraction(x) {
      return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
    }
    function isUnit(x) {
      return x && x.constructor.prototype.isUnit === true || false;
    }
    function isString(x) {
      return typeof x === 'string';
    }
    var isArray = Array.isArray;
    function isMatrix(x) {
      return x && x.constructor.prototype.isMatrix === true || false;
    }

    /**
     * Test whether a value is a collection: an Array or Matrix
     * @param {*} x
     * @returns {boolean} isCollection
     */
    function isCollection(x) {
      return Array.isArray(x) || isMatrix(x);
    }
    function isDenseMatrix(x) {
      return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
    }
    function isSparseMatrix(x) {
      return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
    }
    function isRange(x) {
      return x && x.constructor.prototype.isRange === true || false;
    }
    function isIndex(x) {
      return x && x.constructor.prototype.isIndex === true || false;
    }
    function isBoolean(x) {
      return typeof x === 'boolean';
    }
    function isResultSet(x) {
      return x && x.constructor.prototype.isResultSet === true || false;
    }
    function isHelp(x) {
      return x && x.constructor.prototype.isHelp === true || false;
    }
    function isFunction(x) {
      return typeof x === 'function';
    }
    function isDate(x) {
      return x instanceof Date;
    }
    function isRegExp(x) {
      return x instanceof RegExp;
    }
    function isObject(x) {
      return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
    }
    function isNull(x) {
      return x === null;
    }
    function isUndefined(x) {
      return x === undefined;
    }
    function isAccessorNode(x) {
      return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isArrayNode(x) {
      return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isAssignmentNode(x) {
      return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isBlockNode(x) {
      return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isConditionalNode(x) {
      return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isConstantNode(x) {
      return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isFunctionAssignmentNode(x) {
      return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isFunctionNode(x) {
      return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isIndexNode(x) {
      return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isNode(x) {
      return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isObjectNode(x) {
      return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isOperatorNode(x) {
      return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isParenthesisNode(x) {
      return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isRangeNode(x) {
      return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isRelationalNode(x) {
      return x && x.isRelationalNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isSymbolNode(x) {
      return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isChain(x) {
      return x && x.constructor.prototype.isChain === true || false;
    }
    function typeOf(x) {
      var t = typeof x;
      if (t === 'object') {
        if (x === null) return 'null';
        if (isBigNumber(x)) return 'BigNumber'; // Special: weird mashup with Decimal
        if (x.constructor && x.constructor.name) return x.constructor.name;
        return 'Object'; // just in case
      }

      return t; // can be 'string', 'number', 'boolean', 'function', 'bigint', ...
    }

    /**
     * Clone an object
     *
     *     clone(x)
     *
     * Can clone any primitive type, array, and object.
     * If x has a function clone, this function will be invoked to clone the object.
     *
     * @param {*} x
     * @return {*} clone
     */
    function clone$1(x) {
      var type = typeof x;

      // immutable primitive types
      if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
        return x;
      }

      // use clone function of the object when available
      if (typeof x.clone === 'function') {
        return x.clone();
      }

      // array
      if (Array.isArray(x)) {
        return x.map(function (value) {
          return clone$1(value);
        });
      }
      if (x instanceof Date) return new Date(x.valueOf());
      if (isBigNumber(x)) return x; // bignumbers are immutable
      if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp

      // object
      return mapObject(x, clone$1);
    }

    /**
     * Apply map to all properties of an object
     * @param {Object} object
     * @param {function} callback
     * @return {Object} Returns a copy of the object with mapped properties
     */
    function mapObject(object, callback) {
      var clone = {};
      for (var key in object) {
        if (hasOwnProperty(object, key)) {
          clone[key] = callback(object[key]);
        }
      }
      return clone;
    }

    /**
     * Extend object a with the properties of object b
     * @param {Object} a
     * @param {Object} b
     * @return {Object} a
     */
    function extend(a, b) {
      for (var prop in b) {
        if (hasOwnProperty(b, prop)) {
          a[prop] = b[prop];
        }
      }
      return a;
    }

    /**
     * Deep test equality of all fields in two pairs of arrays or objects.
     * Compares values and functions strictly (ie. 2 is not the same as '2').
     * @param {Array | Object} a
     * @param {Array | Object} b
     * @returns {boolean}
     */
    function deepStrictEqual(a, b) {
      var prop, i, len;
      if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
          return false;
        }
        if (a.length !== b.length) {
          return false;
        }
        for (i = 0, len = a.length; i < len; i++) {
          if (!deepStrictEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      } else if (typeof a === 'function') {
        return a === b;
      } else if (a instanceof Object) {
        if (Array.isArray(b) || !(b instanceof Object)) {
          return false;
        }
        for (prop in a) {
          // noinspection JSUnfilteredForInLoop
          if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
            return false;
          }
        }
        for (prop in b) {
          // noinspection JSUnfilteredForInLoop
          if (!(prop in a)) {
            return false;
          }
        }
        return true;
      } else {
        return a === b;
      }
    }

    /**
     * A safe hasOwnProperty
     * @param {Object} object
     * @param {string} property
     */
    function hasOwnProperty(object, property) {
      return object && Object.hasOwnProperty.call(object, property);
    }

    /**
     * Shallow version of pick, creating an object composed of the picked object properties
     * but not for nested properties
     * @param {Object} object
     * @param {string[]} properties
     * @return {Object}
     */
    function pickShallow(object, properties) {
      var copy = {};
      for (var i = 0; i < properties.length; i++) {
        var key = properties[i];
        var value = object[key];
        if (value !== undefined) {
          copy[key] = value;
        }
      }
      return copy;
    }

    var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix
    var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

    // create a read-only version of config
    var config$1 = function config(options) {
      if (options) {
        throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
      }
      return Object.freeze(DEFAULT_CONFIG);
    };
    _extends(config$1, DEFAULT_CONFIG, {
      MATRIX_OPTIONS,
      NUMBER_OPTIONS
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var typedFunction = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

      function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

      function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

      function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

      function ok() {
        return true;
      }

      function notOk() {
        return false;
      }

      function undef() {
        return undefined;
      }

      var NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';
      /**
       * @typedef {{
       *   params: Param[],
       *   fn: function,
       *   test: function,
       *   implementation: function
       * }} Signature
       *
       * @typedef {{
       *   types: Type[],
       *   hasAny: boolean,
       *   hasConversion: boolean,
       *   restParam: boolean
       * }} Param
       *
       * @typedef {{
       *   name: string,
       *   typeIndex: number,
       *   test: function,
       *   isAny: boolean,
       *   conversion?: ConversionDef,
       *   conversionIndex: number,
       * }} Type
       *
       * @typedef {{
       *   from: string,
       *   to: string,
       *   convert: function (*) : *
       * }} ConversionDef
       *
       * @typedef {{
       *   name: string,
       *   test: function(*) : boolean,
       *   isAny?: boolean
       * }} TypeDef
       */

      /**
       * @returns {() => function}
       */

      function create() {
        // data type tests

        /**
         * Returns true if the argument is a non-null "plain" object
         */
        function isPlainObject(x) {
          return _typeof(x) === 'object' && x !== null && x.constructor === Object;
        }

        var _types = [{
          name: 'number',
          test: function test(x) {
            return typeof x === 'number';
          }
        }, {
          name: 'string',
          test: function test(x) {
            return typeof x === 'string';
          }
        }, {
          name: 'boolean',
          test: function test(x) {
            return typeof x === 'boolean';
          }
        }, {
          name: 'Function',
          test: function test(x) {
            return typeof x === 'function';
          }
        }, {
          name: 'Array',
          test: Array.isArray
        }, {
          name: 'Date',
          test: function test(x) {
            return x instanceof Date;
          }
        }, {
          name: 'RegExp',
          test: function test(x) {
            return x instanceof RegExp;
          }
        }, {
          name: 'Object',
          test: isPlainObject
        }, {
          name: 'null',
          test: function test(x) {
            return x === null;
          }
        }, {
          name: 'undefined',
          test: function test(x) {
            return x === undefined;
          }
        }];
        var anyType = {
          name: 'any',
          test: ok,
          isAny: true
        }; // Data structures to track the types. As these are local variables in
        // create(), each typed universe will get its own copy, but the variables
        // will only be accessible through the (closures of the) functions supplied
        // as properties of the typed object, not directly.
        // These will be initialized in clear() below

        var typeMap; // primary store of all types

        var typeList; // Array of just type names, for the sake of ordering
        // And similar data structures for the type conversions:

        var nConversions = 0; // the actual conversions are stored on a property of the destination types
        // This is a temporary object, will be replaced with a function at the end

        var typed = {
          createCount: 0
        };
        /**
         * Takes a type name and returns the corresponding official type object
         * for that type.
         *
         * @param {string} typeName
         * @returns {TypeDef} type
         */

        function findType(typeName) {
          var type = typeMap.get(typeName);

          if (type) {
            return type;
          } // Remainder is error handling


          var message = 'Unknown type "' + typeName + '"';
          var name = typeName.toLowerCase();
          var otherName;

          var _iterator = _createForOfIteratorHelper(typeList),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              otherName = _step.value;

              if (otherName.toLowerCase() === name) {
                message += '. Did you mean "' + otherName + '" ?';
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          throw new TypeError(message);
        }
        /**
         * Adds an array `types` of type definitions to this typed instance.
         * Each type definition should be an object with properties:
         * 'name' - a string giving the name of the type; 'test' - function
         * returning a boolean that tests membership in the type; and optionally
         * 'isAny' - true only for the 'any' type.
         *
         * The second optional argument, `before`, gives the name of a type that
         * these types should be added before. The new types are added in the
         * order specified.
         * @param {TypeDef[]} types
         * @param {string | boolean} [beforeSpec='any'] before
         */


        function addTypes(types) {
          var beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';
          var beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;
          var newTypes = [];

          for (var i = 0; i < types.length; ++i) {
            if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {
              throw new TypeError('Object with properties {name: string, test: function} expected');
            }

            var typeName = types[i].name;

            if (typeMap.has(typeName)) {
              throw new TypeError('Duplicate type name "' + typeName + '"');
            }

            newTypes.push(typeName);
            typeMap.set(typeName, {
              name: typeName,
              test: types[i].test,
              isAny: types[i].isAny,
              index: beforeIndex + i,
              conversionsTo: [] // Newly added type can't have any conversions to it

            });
          } // update the typeList


          var affectedTypes = typeList.slice(beforeIndex);
          typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices

          for (var _i = beforeIndex + newTypes.length; _i < typeList.length; ++_i) {
            typeMap.get(typeList[_i]).index = _i;
          }
        }
        /**
         * Removes all types and conversions from this typed instance.
         * May cause previously constructed typed-functions to throw
         * strange errors when they are called with types that do not
         * match any of their signatures.
         */


        function clear() {
          typeMap = new Map();
          typeList = [];
          nConversions = 0;
          addTypes([anyType], false);
        } // initialize the types to the default list


        clear();
        addTypes(_types);
        /**
         * Removes all conversions, leaving the types alone.
         */

        function clearConversions() {
          var typeName;

          var _iterator2 = _createForOfIteratorHelper(typeList),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              typeName = _step2.value;
              typeMap.get(typeName).conversionsTo = [];
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          nConversions = 0;
        }
        /**
         * Find the type names that match a value.
         * @param {*} value
         * @return {string[]} Array of names of types for which
         *                  the type test matches the value.
         */


        function findTypeNames(value) {
          var matches = typeList.filter(function (name) {
            var type = typeMap.get(name);
            return !type.isAny && type.test(value);
          });

          if (matches.length) {
            return matches;
          }

          return ['any'];
        }
        /**
         * Check if an entity is a typed function created by any instance
         * @param {any} entity
         * @returns {boolean}
         */


        function isTypedFunction(entity) {
          return entity && typeof entity === 'function' && '_typedFunctionData' in entity;
        }
        /**
         * Find a specific signature from a (composed) typed function, for example:
         *
         *   typed.findSignature(fn, ['number', 'string'])
         *   typed.findSignature(fn, 'number, string')
         *   typed.findSignature(fn, 'number,string', {exact: true})
         *
         * This function findSignature will by default return the best match to
         * the given signature, possibly employing type conversions.
         *
         * The (optional) third argument is a plain object giving options
         * controlling the signature search. Currently the only implemented
         * option is `exact`: if specified as true (default is false), only
         * exact matches will be returned (i.e. signatures for which `fn` was
         * directly defined). Note that a (possibly different) type matching
         * `any`, or one or more instances of TYPE matching `...TYPE` are
         * considered exact matches in this regard, as no conversions are used.
         *
         * This function returns a "signature" object, as does `typed.resolve()`,
         * which is a plain object with four keys: `params` (the array of parameters
         * for this signature), `fn` (the originally supplied function for this
         * signature), `test` (a generated function that determines if an argument
         * list matches this signature, and `implementation` (the function to call
         * on a matching argument list, that performs conversions if necessary and
         * then calls the originally supplied function).
         *
         * @param {Function} fn                   A typed-function
         * @param {string | string[]} signature
         *     Signature to be found, can be an array or a comma separated string.
         * @param {object} options  Controls the signature search as documented
         * @return {{ params: Param[], fn: function, test: function, implementation: function }}
         *     Returns the matching signature, or throws an error when no signature
         *     is found.
         */


        function findSignature(fn, signature, options) {
          if (!isTypedFunction(fn)) {
            throw new TypeError(NOT_TYPED_FUNCTION);
          } // Canonicalize input


          var exact = options && options.exact;
          var stringSignature = Array.isArray(signature) ? signature.join(',') : signature;
          var params = parseSignature(stringSignature);
          var canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature

          if (!exact || canonicalSignature in fn.signatures) {
            // OK, we can check the internal signatures
            var match = fn._typedFunctionData.signatureMap.get(canonicalSignature);

            if (match) {
              return match;
            }
          } // Oh well, we did not; so we have to go back and check the parameters
          // one by one, in order to catch things like `any` and rest params.
          // Note here we can assume there is at least one parameter, because
          // the empty signature would have matched successfully above.


          var nParams = params.length;
          var remainingSignatures;

          if (exact) {
            remainingSignatures = [];
            var name;

            for (name in fn.signatures) {
              remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));
            }
          } else {
            remainingSignatures = fn._typedFunctionData.signatures;
          }

          for (var i = 0; i < nParams; ++i) {
            var want = params[i];
            var filteredSignatures = [];
            var possibility = void 0;

            var _iterator3 = _createForOfIteratorHelper(remainingSignatures),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                possibility = _step3.value;
                var have = getParamAtIndex(possibility.params, i);

                if (!have || want.restParam && !have.restParam) {
                  continue;
                }

                if (!have.hasAny) {
                  var _ret = function () {
                    // have to check all of the wanted types are available
                    var haveTypes = paramTypeSet(have);

                    if (want.types.some(function (wtype) {
                      return !haveTypes.has(wtype.name);
                    })) {
                      return "continue";
                    }
                  }();

                  if (_ret === "continue") continue;
                } // OK, this looks good


                filteredSignatures.push(possibility);
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            remainingSignatures = filteredSignatures;
            if (remainingSignatures.length === 0) break;
          } // Return the first remaining signature that was totally matched:


          var candidate;

          var _iterator4 = _createForOfIteratorHelper(remainingSignatures),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              candidate = _step4.value;

              if (candidate.params.length <= nParams) {
                return candidate;
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');
        }
        /**
         * Find the proper function to call for a specific signature from
         * a (composed) typed function, for example:
         *
         *   typed.find(fn, ['number', 'string'])
         *   typed.find(fn, 'number, string')
         *   typed.find(fn, 'number,string', {exact: true})
         *
         * This function find will by default return the best match to
         * the given signature, possibly employing type conversions (and returning
         * a function that will perform those conversions as needed). The
         * (optional) third argument is a plain object giving options contolling
         * the signature search. Currently only the option `exact` is implemented,
         * which defaults to "false". If `exact` is specified as true, then only
         * exact matches will be returned (i.e. signatures for which `fn` was
         * directly defined). Uses of `any` and `...TYPE` are considered exact if
         * no conversions are necessary to apply the corresponding function.
         *
         * @param {Function} fn                   A typed-function
         * @param {string | string[]} signature
         *     Signature to be found, can be an array or a comma separated string.
         * @param {object} options  Controls the signature match as documented
         * @return {function}
         *     Returns the function to call for the given signature, or throws an
         *     error if no match is found.
         */


        function find(fn, signature, options) {
          return findSignature(fn, signature, options).implementation;
        }
        /**
         * Convert a given value to another data type, specified by type name.
         *
         * @param {*} value
         * @param {string} typeName
         */


        function convert(value, typeName) {
          // check conversion is needed
          var type = findType(typeName);

          if (type.test(value)) {
            return value;
          }

          var conversions = type.conversionsTo;

          if (conversions.length === 0) {
            throw new Error('There are no conversions to ' + typeName + ' defined.');
          }

          for (var i = 0; i < conversions.length; i++) {
            var fromType = findType(conversions[i].from);

            if (fromType.test(value)) {
              return conversions[i].convert(value);
            }
          }

          throw new Error('Cannot convert ' + value + ' to ' + typeName);
        }
        /**
         * Stringify parameters in a normalized way
         * @param {Param[]} params
         * @param {string} [','] separator
         * @return {string}
         */


        function stringifyParams(params) {
          var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
          return params.map(function (p) {
            return p.name;
          }).join(separator);
        }
        /**
         * Parse a parameter, like "...number | boolean"
         * @param {string} param
         * @return {Param} param
         */


        function parseParam(param) {
          var restParam = param.indexOf('...') === 0;
          var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';
          var typeDefs = types.split('|').map(function (s) {
            return findType(s.trim());
          });
          var hasAny = false;
          var paramName = restParam ? '...' : '';
          var exactTypes = typeDefs.map(function (type) {
            hasAny = type.isAny || hasAny;
            paramName += type.name + '|';
            return {
              name: type.name,
              typeIndex: type.index,
              test: type.test,
              isAny: type.isAny,
              conversion: null,
              conversionIndex: -1
            };
          });
          return {
            types: exactTypes,
            name: paramName.slice(0, -1),
            // remove trailing '|' from above
            hasAny: hasAny,
            hasConversion: false,
            restParam: restParam
          };
        }
        /**
         * Expands a parsed parameter with the types available from currently
         * defined conversions.
         * @param {Param} param
         * @return {Param} param
         */


        function expandParam(param) {
          var typeNames = param.types.map(function (t) {
            return t.name;
          });
          var matchingConversions = availableConversions(typeNames);
          var hasAny = param.hasAny;
          var newName = param.name;
          var convertibleTypes = matchingConversions.map(function (conversion) {
            var type = findType(conversion.from);
            hasAny = type.isAny || hasAny;
            newName += '|' + conversion.from;
            return {
              name: conversion.from,
              typeIndex: type.index,
              test: type.test,
              isAny: type.isAny,
              conversion: conversion,
              conversionIndex: conversion.index
            };
          });
          return {
            types: param.types.concat(convertibleTypes),
            name: newName,
            hasAny: hasAny,
            hasConversion: convertibleTypes.length > 0,
            restParam: param.restParam
          };
        }
        /**
         * Return the set of type names in a parameter.
         * Caches the result for efficiency
         *
         * @param {Param} param
         * @return {Set<string>} typenames
         */


        function paramTypeSet(param) {
          if (!param.typeSet) {
            param.typeSet = new Set();
            param.types.forEach(function (type) {
              return param.typeSet.add(type.name);
            });
          }

          return param.typeSet;
        }
        /**
         * Parse a signature with comma separated parameters,
         * like "number | boolean, ...string"
         *
         * @param {string} signature
         * @return {Param[]} params
         */


        function parseSignature(rawSignature) {
          var params = [];

          if (typeof rawSignature !== 'string') {
            throw new TypeError('Signatures must be strings');
          }

          var signature = rawSignature.trim();

          if (signature === '') {
            return params;
          }

          var rawParams = signature.split(',');

          for (var i = 0; i < rawParams.length; ++i) {
            var parsedParam = parseParam(rawParams[i].trim());

            if (parsedParam.restParam && i !== rawParams.length - 1) {
              throw new SyntaxError('Unexpected rest parameter "' + rawParams[i] + '": ' + 'only allowed for the last parameter');
            } // if invalid, short-circuit (all the types may have been filtered)


            if (parsedParam.types.length === 0) {
              return null;
            }

            params.push(parsedParam);
          }

          return params;
        }
        /**
         * Test whether a set of params contains a restParam
         * @param {Param[]} params
         * @return {boolean} Returns true when the last parameter is a restParam
         */


        function hasRestParam(params) {
          var param = last(params);
          return param ? param.restParam : false;
        }
        /**
         * Create a type test for a single parameter, which can have one or multiple
         * types.
         * @param {Param} param
         * @return {function(x: *) : boolean} Returns a test function
         */


        function compileTest(param) {
          if (!param || param.types.length === 0) {
            // nothing to do
            return ok;
          } else if (param.types.length === 1) {
            return findType(param.types[0].name).test;
          } else if (param.types.length === 2) {
            var test0 = findType(param.types[0].name).test;
            var test1 = findType(param.types[1].name).test;
            return function or(x) {
              return test0(x) || test1(x);
            };
          } else {
            // param.types.length > 2
            var tests = param.types.map(function (type) {
              return findType(type.name).test;
            });
            return function or(x) {
              for (var i = 0; i < tests.length; i++) {
                if (tests[i](x)) {
                  return true;
                }
              }

              return false;
            };
          }
        }
        /**
         * Create a test for all parameters of a signature
         * @param {Param[]} params
         * @return {function(args: Array<*>) : boolean}
         */


        function compileTests(params) {
          var tests, test0, test1;

          if (hasRestParam(params)) {
            // variable arguments like '...number'
            tests = initial(params).map(compileTest);
            var varIndex = tests.length;
            var lastTest = compileTest(last(params));

            var testRestParam = function testRestParam(args) {
              for (var i = varIndex; i < args.length; i++) {
                if (!lastTest(args[i])) {
                  return false;
                }
              }

              return true;
            };

            return function testArgs(args) {
              for (var i = 0; i < tests.length; i++) {
                if (!tests[i](args[i])) {
                  return false;
                }
              }

              return testRestParam(args) && args.length >= varIndex + 1;
            };
          } else {
            // no variable arguments
            if (params.length === 0) {
              return function testArgs(args) {
                return args.length === 0;
              };
            } else if (params.length === 1) {
              test0 = compileTest(params[0]);
              return function testArgs(args) {
                return test0(args[0]) && args.length === 1;
              };
            } else if (params.length === 2) {
              test0 = compileTest(params[0]);
              test1 = compileTest(params[1]);
              return function testArgs(args) {
                return test0(args[0]) && test1(args[1]) && args.length === 2;
              };
            } else {
              // arguments.length > 2
              tests = params.map(compileTest);
              return function testArgs(args) {
                for (var i = 0; i < tests.length; i++) {
                  if (!tests[i](args[i])) {
                    return false;
                  }
                }

                return args.length === tests.length;
              };
            }
          }
        }
        /**
         * Find the parameter at a specific index of a Params list.
         * Handles rest parameters.
         * @param {Param[]} params
         * @param {number} index
         * @return {Param | null} Returns the matching parameter when found,
         *                        null otherwise.
         */


        function getParamAtIndex(params, index) {
          return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;
        }
        /**
         * Get all type names of a parameter
         * @param {Params[]} params
         * @param {number} index
         * @return {string[]} Returns an array with type names
         */


        function getTypeSetAtIndex(params, index) {
          var param = getParamAtIndex(params, index);

          if (!param) {
            return new Set();
          }

          return paramTypeSet(param);
        }
        /**
         * Test whether a type is an exact type or conversion
         * @param {Type} type
         * @return {boolean} Returns true when
         */


        function isExactType(type) {
          return type.conversion === null || type.conversion === undefined;
        }
        /**
         * Helper function for creating error messages: create an array with
         * all available types on a specific argument index.
         * @param {Signature[]} signatures
         * @param {number} index
         * @return {string[]} Returns an array with available types
         */


        function mergeExpectedParams(signatures, index) {
          var typeSet = new Set();
          signatures.forEach(function (signature) {
            var paramSet = getTypeSetAtIndex(signature.params, index);
            var name;

            var _iterator5 = _createForOfIteratorHelper(paramSet),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                name = _step5.value;
                typeSet.add(name);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          });
          return typeSet.has('any') ? ['any'] : Array.from(typeSet);
        }
        /**
         * Create
         * @param {string} name             The name of the function
         * @param {array.<*>} args          The actual arguments passed to the function
         * @param {Signature[]} signatures  A list with available signatures
         * @return {TypeError} Returns a type error with additional data
         *                     attached to it in the property `data`
         */


        function createError(name, args, signatures) {
          var err, expected;

          var _name = name || 'unnamed'; // test for wrong type at some index


          var matchingSignatures = signatures;
          var index;

          var _loop = function _loop() {
            var nextMatchingDefs = [];
            matchingSignatures.forEach(function (signature) {
              var param = getParamAtIndex(signature.params, index);
              var test = compileTest(param);

              if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {
                nextMatchingDefs.push(signature);
              }
            });

            if (nextMatchingDefs.length === 0) {
              // no matching signatures anymore, throw error "wrong type"
              expected = mergeExpectedParams(matchingSignatures, index);

              if (expected.length > 0) {
                var actualTypes = findTypeNames(args[index]);
                err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');
                err.data = {
                  category: 'wrongType',
                  fn: _name,
                  index: index,
                  actual: actualTypes,
                  expected: expected
                };
                return {
                  v: err
                };
              }
            } else {
              matchingSignatures = nextMatchingDefs;
            }
          };

          for (index = 0; index < args.length; index++) {
            var _ret2 = _loop();

            if (_typeof(_ret2) === "object") return _ret2.v;
          } // test for too few arguments


          var lengths = matchingSignatures.map(function (signature) {
            return hasRestParam(signature.params) ? Infinity : signature.params.length;
          });

          if (args.length < Math.min.apply(null, lengths)) {
            expected = mergeExpectedParams(matchingSignatures, index);
            err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');
            err.data = {
              category: 'tooFewArgs',
              fn: _name,
              index: args.length,
              expected: expected
            };
            return err;
          } // test for too many arguments


          var maxLength = Math.max.apply(null, lengths);

          if (args.length > maxLength) {
            err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
            err.data = {
              category: 'tooManyArgs',
              fn: _name,
              index: args.length,
              expectedLength: maxLength
            };
            return err;
          } // Generic error


          var argTypes = [];

          for (var i = 0; i < args.length; ++i) {
            argTypes.push(findTypeNames(args[i]).join('|'));
          }

          err = new TypeError('Arguments of type "' + argTypes.join(', ') + '" do not match any of the defined signatures of function ' + _name + '.');
          err.data = {
            category: 'mismatch',
            actual: argTypes
          };
          return err;
        }
        /**
         * Find the lowest index of all exact types of a parameter (no conversions)
         * @param {Param} param
         * @return {number} Returns the index of the lowest type in typed.types
         */


        function getLowestTypeIndex(param) {
          var min = typeList.length + 1;

          for (var i = 0; i < param.types.length; i++) {
            if (isExactType(param.types[i])) {
              min = Math.min(min, param.types[i].typeIndex);
            }
          }

          return min;
        }
        /**
         * Find the lowest index of the conversion of all types of the parameter
         * having a conversion
         * @param {Param} param
         * @return {number} Returns the lowest index of the conversions of this type
         */


        function getLowestConversionIndex(param) {
          var min = nConversions + 1;

          for (var i = 0; i < param.types.length; i++) {
            if (!isExactType(param.types[i])) {
              min = Math.min(min, param.types[i].conversionIndex);
            }
          }

          return min;
        }
        /**
         * Compare two params
         * @param {Param} param1
         * @param {Param} param2
         * @return {number} returns -1 when param1 must get a lower
         *                  index than param2, 1 when the opposite,
         *                  or zero when both are equal
         */


        function compareParams(param1, param2) {
          // We compare a number of metrics on a param in turn:
          // 1) 'any' parameters are the least preferred
          if (param1.hasAny) {
            if (!param2.hasAny) {
              return 1;
            }
          } else if (param2.hasAny) {
            return -1;
          } // 2) Prefer non-rest to rest parameters


          if (param1.restParam) {
            if (!param2.restParam) {
              return 1;
            }
          } else if (param2.restParam) {
            return -1;
          } // 3) Prefer exact type match to conversions


          if (param1.hasConversion) {
            if (!param2.hasConversion) {
              return 1;
            }
          } else if (param2.hasConversion) {
            return -1;
          } // 4) Prefer lower type index:


          var typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);

          if (typeDiff < 0) {
            return -1;
          }

          if (typeDiff > 0) {
            return 1;
          } // 5) Prefer lower conversion index


          var convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);

          if (convDiff < 0) {
            return -1;
          }

          if (convDiff > 0) {
            return 1;
          } // Don't have a basis for preference


          return 0;
        }
        /**
         * Compare two signatures
         * @param {Signature} signature1
         * @param {Signature} signature2
         * @return {number} returns a negative number when param1 must get a lower
         *                  index than param2, a positive number when the opposite,
         *                  or zero when both are equal
         */


        function compareSignatures(signature1, signature2) {
          var pars1 = signature1.params;
          var pars2 = signature2.params;
          var last1 = last(pars1);
          var last2 = last(pars2);
          var hasRest1 = hasRestParam(pars1);
          var hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:
          // 1) An "any rest param" is least preferred

          if (hasRest1 && last1.hasAny) {
            if (!hasRest2 || !last2.hasAny) {
              return 1;
            }
          } else if (hasRest2 && last2.hasAny) {
            return -1;
          } // 2) Minimize the number of 'any' parameters


          var any1 = 0;
          var conv1 = 0;
          var par;

          var _iterator6 = _createForOfIteratorHelper(pars1),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              par = _step6.value;
              if (par.hasAny) ++any1;
              if (par.hasConversion) ++conv1;
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }

          var any2 = 0;
          var conv2 = 0;

          var _iterator7 = _createForOfIteratorHelper(pars2),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              par = _step7.value;
              if (par.hasAny) ++any2;
              if (par.hasConversion) ++conv2;
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }

          if (any1 !== any2) {
            return any1 - any2;
          } // 3) A conversion rest param is less preferred


          if (hasRest1 && last1.hasConversion) {
            if (!hasRest2 || !last2.hasConversion) {
              return 1;
            }
          } else if (hasRest2 && last2.hasConversion) {
            return -1;
          } // 4) Minimize the number of conversions


          if (conv1 !== conv2) {
            return conv1 - conv2;
          } // 5) Prefer no rest param


          if (hasRest1) {
            if (!hasRest2) {
              return 1;
            }
          } else if (hasRest2) {
            return -1;
          } // 6) Prefer shorter with rest param, longer without


          var lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);

          if (lengthCriterion !== 0) {
            return lengthCriterion;
          } // Signatures are identical in each of the above metrics.
          // In particular, they are the same length.
          // We can therefore compare the parameters one by one.
          // First we count which signature has more preferred parameters.


          var comparisons = [];
          var tc = 0;

          for (var i = 0; i < pars1.length; ++i) {
            var thisComparison = compareParams(pars1[i], pars2[i]);
            comparisons.push(thisComparison);
            tc += thisComparison;
          }

          if (tc !== 0) {
            return tc;
          } // They have the same number of preferred parameters, so go by the
          // earliest parameter in which we have a preference.
          // In other words, dispatch is driven somewhat more by earlier
          // parameters than later ones.


          var c;

          for (var _i2 = 0, _comparisons = comparisons; _i2 < _comparisons.length; _i2++) {
            c = _comparisons[_i2];

            if (c !== 0) {
              return c;
            }
          } // It's a tossup:


          return 0;
        }
        /**
         * Produce a list of all conversions from distinct types to one of
         * the given types.
         *
         * @param {string[]} typeNames
         * @return {ConversionDef[]} Returns the conversions that are available
         *                        resulting in any given type (if any)
         */


        function availableConversions(typeNames) {
          if (typeNames.length === 0) {
            return [];
          }

          var types = typeNames.map(findType);

          if (typeNames.length > 1) {
            types.sort(function (t1, t2) {
              return t1.index - t2.index;
            });
          }

          var matches = types[0].conversionsTo;

          if (typeNames.length === 1) {
            return matches;
          }

          matches = matches.concat([]); // shallow copy the matches
          // Since the types are now in index order, we just want the first
          // occurrence of any from type:

          var knownTypes = new Set(typeNames);

          for (var i = 1; i < types.length; ++i) {
            var newMatch = void 0;

            var _iterator8 = _createForOfIteratorHelper(types[i].conversionsTo),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                newMatch = _step8.value;

                if (!knownTypes.has(newMatch.from)) {
                  matches.push(newMatch);
                  knownTypes.add(newMatch.from);
                }
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          }

          return matches;
        }
        /**
         * Preprocess arguments before calling the original function:
         * - if needed convert the parameters
         * - in case of rest parameters, move the rest parameters into an Array
         * @param {Param[]} params
         * @param {function} fn
         * @return {function} Returns a wrapped function
         */


        function compileArgsPreprocessing(params, fn) {
          var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?

          if (params.some(function (p) {
            return p.hasConversion;
          })) {
            var restParam = hasRestParam(params);
            var compiledConversions = params.map(compileArgConversion);

            fnConvert = function convertArgs() {
              var args = [];
              var last = restParam ? arguments.length - 1 : arguments.length;

              for (var i = 0; i < last; i++) {
                args[i] = compiledConversions[i](arguments[i]);
              }

              if (restParam) {
                args[last] = arguments[last].map(compiledConversions[last]);
              }

              return fn.apply(this, args);
            };
          }

          var fnPreprocess = fnConvert;

          if (hasRestParam(params)) {
            var offset = params.length - 1;

            fnPreprocess = function preprocessRestParams() {
              return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));
            };
          }

          return fnPreprocess;
        }
        /**
         * Compile conversion for a parameter to the right type
         * @param {Param} param
         * @return {function} Returns the wrapped function that will convert arguments
         *
         */


        function compileArgConversion(param) {
          var test0, test1, conversion0, conversion1;
          var tests = [];
          var conversions = [];
          param.types.forEach(function (type) {
            if (type.conversion) {
              tests.push(findType(type.conversion.from).test);
              conversions.push(type.conversion.convert);
            }
          }); // create optimized conversion functions depending on the number of conversions

          switch (conversions.length) {
            case 0:
              return function convertArg(arg) {
                return arg;
              };

            case 1:
              test0 = tests[0];
              conversion0 = conversions[0];
              return function convertArg(arg) {
                if (test0(arg)) {
                  return conversion0(arg);
                }

                return arg;
              };

            case 2:
              test0 = tests[0];
              test1 = tests[1];
              conversion0 = conversions[0];
              conversion1 = conversions[1];
              return function convertArg(arg) {
                if (test0(arg)) {
                  return conversion0(arg);
                }

                if (test1(arg)) {
                  return conversion1(arg);
                }

                return arg;
              };

            default:
              return function convertArg(arg) {
                for (var i = 0; i < conversions.length; i++) {
                  if (tests[i](arg)) {
                    return conversions[i](arg);
                  }
                }

                return arg;
              };
          }
        }
        /**
         * Split params with union types in to separate params.
         *
         * For example:
         *
         *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
         *     // returns:
         *     // [
         *     //   ['Array', 'string'],
         *     //   ['Array', 'RegExp'],
         *     //   ['Object', 'string'],
         *     //   ['Object', 'RegExp']
         *     // ]
         *
         * @param {Param[]} params
         * @return {Param[]}
         */


        function splitParams(params) {
          function _splitParams(params, index, paramsSoFar) {
            if (index < params.length) {
              var param = params[index];
              var resultingParams = [];

              if (param.restParam) {
                // split the types of a rest parameter in two:
                // one with only exact types, and one with exact types and conversions
                var exactTypes = param.types.filter(isExactType);

                if (exactTypes.length < param.types.length) {
                  resultingParams.push({
                    types: exactTypes,
                    name: '...' + exactTypes.map(function (t) {
                      return t.name;
                    }).join('|'),
                    hasAny: exactTypes.some(function (t) {
                      return t.isAny;
                    }),
                    hasConversion: false,
                    restParam: true
                  });
                }

                resultingParams.push(param);
              } else {
                // split all the types of a regular parameter into one type per param
                resultingParams = param.types.map(function (type) {
                  return {
                    types: [type],
                    name: type.name,
                    hasAny: type.isAny,
                    hasConversion: type.conversion,
                    restParam: false
                  };
                });
              } // recurse over the groups with types


              return flatMap(resultingParams, function (nextParam) {
                return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));
              });
            } else {
              // we've reached the end of the parameters.
              return [paramsSoFar];
            }
          }

          return _splitParams(params, 0, []);
        }
        /**
         * Test whether two param lists represent conflicting signatures
         * @param {Param[]} params1
         * @param {Param[]} params2
         * @return {boolean} Returns true when the signatures conflict, false otherwise.
         */


        function conflicting(params1, params2) {
          var ii = Math.max(params1.length, params2.length);

          for (var i = 0; i < ii; i++) {
            var typeSet1 = getTypeSetAtIndex(params1, i);
            var typeSet2 = getTypeSetAtIndex(params2, i);
            var overlap = false;
            var name = void 0;

            var _iterator9 = _createForOfIteratorHelper(typeSet2),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                name = _step9.value;

                if (typeSet1.has(name)) {
                  overlap = true;
                  break;
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            if (!overlap) {
              return false;
            }
          }

          var len1 = params1.length;
          var len2 = params2.length;
          var restParam1 = hasRestParam(params1);
          var restParam2 = hasRestParam(params2);
          return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;
        }
        /**
         * Helper function for `resolveReferences` that returns a copy of
         * functionList wihe any prior resolutions cleared out, in case we are
         * recycling signatures from a prior typed function construction.
         *
         * @param {Array.<function|typed-reference>} functionList
         * @return {Array.<function|typed-reference>}
         */


        function clearResolutions(functionList) {
          return functionList.map(function (fn) {
            if (isReferToSelf(fn)) {
              return referToSelf(fn.referToSelf.callback);
            }

            if (isReferTo(fn)) {
              return makeReferTo(fn.referTo.references, fn.referTo.callback);
            }

            return fn;
          });
        }
        /**
         * Take a list of references, a list of functions functionList, and a
         * signatureMap indexing signatures into functionList, and return
         * the list of resolutions, or a false-y value if they don't all
         * resolve in a valid way (yet).
         *
         * @param {string[]} references
         * @param {Array<function|typed-reference} functionList
         * @param {Object.<string, integer>} signatureMap
         * @return {function[] | false} resolutions
         */


        function collectResolutions(references, functionList, signatureMap) {
          var resolvedReferences = [];
          var reference;

          var _iterator10 = _createForOfIteratorHelper(references),
              _step10;

          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              reference = _step10.value;
              var resolution = signatureMap[reference];

              if (typeof resolution !== 'number') {
                throw new TypeError('No definition for referenced signature "' + reference + '"');
              }

              resolution = functionList[resolution];

              if (typeof resolution !== 'function') {
                return false;
              }

              resolvedReferences.push(resolution);
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }

          return resolvedReferences;
        }
        /**
         * Resolve any references in the functionList for the typed function
         * itself. The signatureMap tells which index in the functionList a
         * given signature should be mapped to (for use in resolving typed.referTo)
         * and self provides the destions of a typed.referToSelf.
         *
         * @param {Array<function | typed-reference-object>} functionList
         * @param {Object.<string, function>} signatureMap
         * @param {function} self  The typed-function itself
         * @return {Array<function>} The list of resolved functions
         */


        function resolveReferences(functionList, signatureMap, self) {
          var resolvedFunctions = clearResolutions(functionList);
          var isResolved = new Array(resolvedFunctions.length).fill(false);
          var leftUnresolved = true;

          while (leftUnresolved) {
            leftUnresolved = false;
            var nothingResolved = true;

            for (var i = 0; i < resolvedFunctions.length; ++i) {
              if (isResolved[i]) continue;
              var fn = resolvedFunctions[i];

              if (isReferToSelf(fn)) {
                resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:

                resolvedFunctions[i].referToSelf = fn.referToSelf;
                isResolved[i] = true;
                nothingResolved = false;
              } else if (isReferTo(fn)) {
                var resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);

                if (resolvedReferences) {
                  resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:

                  resolvedFunctions[i].referTo = fn.referTo;
                  isResolved[i] = true;
                  nothingResolved = false;
                } else {
                  leftUnresolved = true;
                }
              }
            }

            if (nothingResolved && leftUnresolved) {
              throw new SyntaxError('Circular reference detected in resolving typed.referTo');
            }
          }

          return resolvedFunctions;
        }
        /**
         * Validate whether any of the function bodies contains a self-reference
         * usage like `this(...)` or `this.signatures`. This self-referencing is
         * deprecated since typed-function v3. It has been replaced with
         * the functions typed.referTo and typed.referToSelf.
         * @param {Object.<string, function>} signaturesMap
         */


        function validateDeprecatedThis(signaturesMap) {
          // TODO: remove this deprecation warning logic some day (it's introduced in v3)
          // match occurrences like 'this(' and 'this.signatures'
          var deprecatedThisRegex = /\bthis(\(|\.signatures\b)/;
          Object.keys(signaturesMap).forEach(function (signature) {
            var fn = signaturesMap[signature];

            if (deprecatedThisRegex.test(fn.toString())) {
              throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');
            }
          });
        }
        /**
         * Create a typed function
         * @param {String} name               The name for the typed function
         * @param {Object.<string, function>} rawSignaturesMap
         *                                    An object with one or
         *                                    multiple signatures as key, and the
         *                                    function corresponding to the
         *                                    signature as value.
         * @return {function}  Returns the created typed function.
         */


        function createTypedFunction(name, rawSignaturesMap) {
          typed.createCount++;

          if (Object.keys(rawSignaturesMap).length === 0) {
            throw new SyntaxError('No signatures provided');
          }

          if (typed.warnAgainstDeprecatedThis) {
            validateDeprecatedThis(rawSignaturesMap);
          } // Main processing loop for signatures


          var parsedParams = [];
          var originalFunctions = [];
          var signaturesMap = {};
          var preliminarySignatures = []; // may have duplicates from conversions

          var signature;

          var _loop2 = function _loop2() {
            // A) Protect against polluted Object prototype:
            if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {
              return "continue";
            } // B) Parse the signature


            var params = parseSignature(signature);
            if (!params) return "continue"; // C) Check for conflicts

            parsedParams.forEach(function (pp) {
              if (conflicting(pp, params)) {
                throw new TypeError('Conflicting signatures "' + stringifyParams(pp) + '" and "' + stringifyParams(params) + '".');
              }
            });
            parsedParams.push(params); // D) Store the provided function and add conversions

            var functionIndex = originalFunctions.length;
            originalFunctions.push(rawSignaturesMap[signature]);
            var conversionParams = params.map(expandParam); // E) Split the signatures and collect them up

            var sp = void 0;

            var _iterator11 = _createForOfIteratorHelper(splitParams(conversionParams)),
                _step11;

            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                sp = _step11.value;
                var spName = stringifyParams(sp);
                preliminarySignatures.push({
                  params: sp,
                  name: spName,
                  fn: functionIndex
                });

                if (sp.every(function (p) {
                  return !p.hasConversion;
                })) {
                  signaturesMap[spName] = functionIndex;
                }
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }
          };

          for (signature in rawSignaturesMap) {
            var _ret3 = _loop2();

            if (_ret3 === "continue") continue;
          }

          preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn

          var resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature

          var s;

          for (s in signaturesMap) {
            if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {
              signaturesMap[s] = resolvedFunctions[signaturesMap[s]];
            }
          }

          var signatures = [];
          var internalSignatureMap = new Map(); // benchmarks faster than object

          for (var _i3 = 0, _preliminarySignature = preliminarySignatures; _i3 < _preliminarySignature.length; _i3++) {
            s = _preliminarySignature[_i3];

            // Note it's only safe to eliminate duplicates like this
            // _after_ the signature sorting step above; otherwise we might
            // remove the wrong one.
            if (!internalSignatureMap.has(s.name)) {
              s.fn = resolvedFunctions[s.fn];
              signatures.push(s);
              internalSignatureMap.set(s.name, s);
            }
          } // we create a highly optimized checks for the first couple of signatures with max 2 arguments


          var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
          var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
          var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
          var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
          var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
          var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
          var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests

          for (var i = 0; i < signatures.length; ++i) {
            signatures[i].test = compileTests(signatures[i].params);
          }

          var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
          var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
          var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
          var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
          var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
          var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;
          var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
          var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
          var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
          var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
          var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
          var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions

          for (var _i4 = 0; _i4 < signatures.length; ++_i4) {
            signatures[_i4].implementation = compileArgsPreprocessing(signatures[_i4].params, signatures[_i4].fn);
          }

          var fn0 = ok0 ? signatures[0].implementation : undef;
          var fn1 = ok1 ? signatures[1].implementation : undef;
          var fn2 = ok2 ? signatures[2].implementation : undef;
          var fn3 = ok3 ? signatures[3].implementation : undef;
          var fn4 = ok4 ? signatures[4].implementation : undef;
          var fn5 = ok5 ? signatures[5].implementation : undef;
          var len0 = ok0 ? signatures[0].params.length : -1;
          var len1 = ok1 ? signatures[1].params.length : -1;
          var len2 = ok2 ? signatures[2].params.length : -1;
          var len3 = ok3 ? signatures[3].params.length : -1;
          var len4 = ok4 ? signatures[4].params.length : -1;
          var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow

          var iStart = allOk ? 6 : 0;
          var iEnd = signatures.length; // de-reference ahead for execution speed:

          var tests = signatures.map(function (s) {
            return s.test;
          });
          var fns = signatures.map(function (s) {
            return s.implementation;
          });

          var generic = function generic() {

            for (var _i5 = iStart; _i5 < iEnd; _i5++) {
              if (tests[_i5](arguments)) {
                return fns[_i5].apply(this, arguments);
              }
            }

            return typed.onMismatch(name, arguments, signatures);
          }; // create the typed function
          // fast, specialized version. Falls back to the slower, generic one if needed


          function theTypedFn(arg0, arg1) {

            if (arguments.length === len0 && test00(arg0) && test01(arg1)) {
              return fn0.apply(this, arguments);
            }

            if (arguments.length === len1 && test10(arg0) && test11(arg1)) {
              return fn1.apply(this, arguments);
            }

            if (arguments.length === len2 && test20(arg0) && test21(arg1)) {
              return fn2.apply(this, arguments);
            }

            if (arguments.length === len3 && test30(arg0) && test31(arg1)) {
              return fn3.apply(this, arguments);
            }

            if (arguments.length === len4 && test40(arg0) && test41(arg1)) {
              return fn4.apply(this, arguments);
            }

            if (arguments.length === len5 && test50(arg0) && test51(arg1)) {
              return fn5.apply(this, arguments);
            }

            return generic.apply(this, arguments);
          } // attach name the typed function


          try {
            Object.defineProperty(theTypedFn, 'name', {
              value: name
            });
          } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property
            // the function name is not essential for the functioning, it's mostly useful for debugging,
            // so it's fine to have unnamed functions.
          } // attach signatures to the function.
          // This property is close to the original collection of signatures
          // used to create the typed-function, just with unions split:


          theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.
          // Also serves as the flag that this is a typed-function

          theTypedFn._typedFunctionData = {
            signatures: signatures,
            signatureMap: internalSignatureMap
          };
          return theTypedFn;
        }
        /**
         * Action to take on mismatch
         * @param {string} name      Name of function that was attempted to be called
         * @param {Array} args       Actual arguments to the call
         * @param {Array} signatures Known signatures of the named typed-function
         */


        function _onMismatch(name, args, signatures) {
          throw createError(name, args, signatures);
        }
        /**
         * Return all but the last items of an array or function Arguments
         * @param {Array | Arguments} arr
         * @return {Array}
         */


        function initial(arr) {
          return slice(arr, 0, arr.length - 1);
        }
        /**
         * return the last item of an array or function Arguments
         * @param {Array | Arguments} arr
         * @return {*}
         */


        function last(arr) {
          return arr[arr.length - 1];
        }
        /**
         * Slice an array or function Arguments
         * @param {Array | Arguments | IArguments} arr
         * @param {number} start
         * @param {number} [end]
         * @return {Array}
         */


        function slice(arr, start, end) {
          return Array.prototype.slice.call(arr, start, end);
        }
        /**
         * Return the first item from an array for which test(arr[i]) returns true
         * @param {Array} arr
         * @param {function} test
         * @return {* | undefined} Returns the first matching item
         *                         or undefined when there is no match
         */


        function findInArray(arr, test) {
          for (var i = 0; i < arr.length; i++) {
            if (test(arr[i])) {
              return arr[i];
            }
          }

          return undefined;
        }
        /**
         * Flat map the result invoking a callback for every item in an array.
         * https://gist.github.com/samgiles/762ee337dff48623e729
         * @param {Array} arr
         * @param {function} callback
         * @return {Array}
         */


        function flatMap(arr, callback) {
          return Array.prototype.concat.apply([], arr.map(callback));
        }
        /**
         * Create a reference callback to one or multiple signatures
         *
         * Syntax:
         *
         *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {
         *       // ...
         *     })
         *
         * @returns {{referTo: {references: string[], callback}}}
         */


        function referTo() {
          var references = initial(arguments).map(function (s) {
            return stringifyParams(parseSignature(s));
          });
          var callback = last(arguments);

          if (typeof callback !== 'function') {
            throw new TypeError('Callback function expected as last argument');
          }

          return makeReferTo(references, callback);
        }

        function makeReferTo(references, callback) {
          return {
            referTo: {
              references: references,
              callback: callback
            }
          };
        }
        /**
         * Create a reference callback to the typed-function itself
         *
         * @param {(self: function) => function} callback
         * @returns {{referToSelf: { callback: function }}}
         */


        function referToSelf(callback) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback function expected as first argument');
          }

          return {
            referToSelf: {
              callback: callback
            }
          };
        }
        /**
         * Test whether something is a referTo object, holding a list with reference
         * signatures and a callback.
         *
         * @param {Object | function} objectOrFn
         * @returns {boolean}
         */


        function isReferTo(objectOrFn) {
          return objectOrFn && _typeof(objectOrFn.referTo) === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';
        }
        /**
         * Test whether something is a referToSelf object, holding a callback where
         * to pass `self`.
         *
         * @param {Object | function} objectOrFn
         * @returns {boolean}
         */


        function isReferToSelf(objectOrFn) {
          return objectOrFn && _typeof(objectOrFn.referToSelf) === 'object' && typeof objectOrFn.referToSelf.callback === 'function';
        }
        /**
         * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw
         * an error in case (C).
         *
         * @param { string | undefined } nameSoFar
         * @param { string | undefined } newName
         * @returns { string } updated name
         */


        function checkName(nameSoFar, newName) {
          if (!nameSoFar) {
            return newName;
          }

          if (newName && newName !== nameSoFar) {
            var err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');
            err.data = {
              actual: newName,
              expected: nameSoFar
            };
            throw err;
          }

          return nameSoFar;
        }
        /**
         * Retrieve the implied name from an object with signature keys
         * and function values, checking whether all value names match
         *
         * @param { {string: function} } obj
         */


        function getObjectName(obj) {
          var name;

          for (var key in obj) {
            // Only pay attention to own properties, and only if their values
            // are typed functions or functions with a signature property
            if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {
              name = checkName(name, obj[key].name);
            }
          }

          return name;
        }
        /**
         * Copy all of the signatures from the second argument into the first,
         * which is modified by side effect, checking for conflicts
         *
         * @param {Object.<string, function|typed-reference>} dest
         * @param {Object.<string, function|typed-reference>} source
         */


        function mergeSignatures(dest, source) {
          var key;

          for (key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              if (key in dest) {
                if (source[key] !== dest[key]) {
                  var err = new Error('Signature "' + key + '" is defined twice');
                  err.data = {
                    signature: key,
                    sourceFunction: source[key],
                    destFunction: dest[key]
                  };
                  throw err;
                } // else: both signatures point to the same function, that's fine

              }

              dest[key] = source[key];
            }
          }
        }

        var saveTyped = typed;
        /**
         * Originally the main function was a typed function itself, but then
         * it might not be able to generate error messages if the client
         * replaced the type system with different names.
         *
         * Main entry: typed([name], functions/objects with signatures...)
         *
         * Assembles and returns a new typed-function from the given items
         * that provide signatures and implementations, each of which may be
         * * a plain object mapping (string) signatures to implementing functions,
         * * a previously constructed typed function, or
         * * any other single function with a string-valued property `signature`.
          * The name of the resulting typed-function will be given by the
         * string-valued name argument if present, or if not, by the name
         * of any of the arguments that have one, as long as any that do are
         * consistent with each other. If no name is specified, the name will be
         * an empty string.
         *
         * @param {string} maybeName [optional]
         * @param {(function|object)[]} signature providers
         * @returns {typed-function}
         */

        typed = function typed(maybeName) {
          var named = typeof maybeName === 'string';
          var start = named ? 1 : 0;
          var name = named ? maybeName : '';
          var allSignatures = {};

          for (var i = start; i < arguments.length; ++i) {
            var item = arguments[i];
            var theseSignatures = {};
            var thisName = void 0;

            if (typeof item === 'function') {
              thisName = item.name;

              if (typeof item.signature === 'string') {
                // Case 1: Ordinary function with a string 'signature' property
                theseSignatures[item.signature] = item;
              } else if (isTypedFunction(item)) {
                // Case 2: Existing typed function
                theseSignatures = item.signatures;
              }
            } else if (isPlainObject(item)) {
              // Case 3: Plain object, assume keys = signatures, values = functions
              theseSignatures = item;

              if (!named) {
                thisName = getObjectName(item);
              }
            }

            if (Object.keys(theseSignatures).length === 0) {
              var err = new TypeError('Argument to \'typed\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');
              err.data = {
                index: i,
                argument: item
              };
              throw err;
            }

            if (!named) {
              name = checkName(name, thisName);
            }

            mergeSignatures(allSignatures, theseSignatures);
          }

          return createTypedFunction(name || '', allSignatures);
        };

        typed.create = create;
        typed.createCount = saveTyped.createCount;
        typed.onMismatch = _onMismatch;
        typed.throwMismatchError = _onMismatch;
        typed.createError = createError;
        typed.clear = clear;
        typed.clearConversions = clearConversions;
        typed.addTypes = addTypes;
        typed._findType = findType; // For unit testing only

        typed.referTo = referTo;
        typed.referToSelf = referToSelf;
        typed.convert = convert;
        typed.findSignature = findSignature;
        typed.find = find;
        typed.isTypedFunction = isTypedFunction;
        typed.warnAgainstDeprecatedThis = true;
        /**
         * add a type (convenience wrapper for typed.addTypes)
         * @param {{name: string, test: function}} type
         * @param {boolean} [beforeObjectTest=true]
         *                          If true, the new test will be inserted before
         *                          the test with name 'Object' (if any), since
         *                          tests for Object match Array and classes too.
         */

        typed.addType = function (type, beforeObjectTest) {
          var before = 'any';

          if (beforeObjectTest !== false && typeMap.has('Object')) {
            before = 'Object';
          }

          typed.addTypes([type], before);
        };
        /**
         * Verify that the ConversionDef conversion has a valid format.
         *
         * @param {conversionDef} conversion
         * @return {void}
         * @throws {TypeError|SyntaxError}
         */


        function _validateConversion(conversion) {
          if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {
            throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
          }

          if (conversion.to === conversion.from) {
            throw new SyntaxError('Illegal to define conversion from "' + conversion.from + '" to itself.');
          }
        }
        /**
         * Add a conversion
         *
         * @param {ConversionDef} conversion
         * @returns {void}
         * @throws {TypeError}
         */


        typed.addConversion = function (conversion) {
          _validateConversion(conversion);

          var to = findType(conversion.to);

          if (to.conversionsTo.every(function (other) {
            return other.from !== conversion.from;
          })) {
            to.conversionsTo.push({
              from: conversion.from,
              convert: conversion.convert,
              index: nConversions++
            });
          } else {
            throw new Error('There is already a conversion from "' + conversion.from + '" to "' + to.name + '"');
          }
        };
        /**
         * Convenience wrapper to call addConversion on each conversion in a list.
         *
         @param {ConversionDef[]} conversions
         @returns {void}
         @throws {TypeError}
         */


        typed.addConversions = function (conversions) {
          conversions.forEach(typed.addConversion);
        };
        /**
         * Remove the specified conversion. The format is the same as for
         * addConversion, and the convert function must match or an error
         * is thrown.
         *
         * @param {{from: string, to: string, convert: function}} conversion
         * @returns {void}
         * @throws {TypeError|SyntaxError|Error}
         */


        typed.removeConversion = function (conversion) {
          _validateConversion(conversion);

          var to = findType(conversion.to);
          var existingConversion = findInArray(to.conversionsTo, function (c) {
            return c.from === conversion.from;
          });

          if (!existingConversion) {
            throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);
          }

          if (existingConversion.convert !== conversion.convert) {
            throw new Error('Conversion to remove does not match existing conversion');
          }

          var index = to.conversionsTo.indexOf(existingConversion);
          to.conversionsTo.splice(index, 1);
        };
        /**
         * Produce the specific signature that a typed function
         * will execute on the given arguments. Here, a "signature" is an
         * object with properties 'params', 'test', 'fn', and 'implementation'.
         * This last property is a function that converts params as necessary
         * and then calls 'fn'. Returns null if there is no matching signature.
         * @param {typed-function} tf
         * @param {any[]} argList
         * @returns {{params: string, test: function, fn: function, implementation: function}}
         */


        typed.resolve = function (tf, argList) {
          if (!isTypedFunction(tf)) {
            throw new TypeError(NOT_TYPED_FUNCTION);
          }

          var sigs = tf._typedFunctionData.signatures;

          for (var i = 0; i < sigs.length; ++i) {
            if (sigs[i].test(argList)) {
              return sigs[i];
            }
          }

          return null;
        };

        return typed;
      }

      var typedFunction = create();

      return typedFunction;

    }));

    });

    /**
     * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
     */

    /**
     * Check if a number is integer
     * @param {number | boolean} value
     * @return {boolean} isInteger
     */
    function isInteger$1(value) {
      if (typeof value === 'boolean') {
        return true;
      }
      return isFinite(value) ? value === Math.round(value) : false;
    }

    /**
     * Formats a number in a given base
     * @param {number} n
     * @param {number} base
     * @param {number} size
     * @returns {string}
     */
    function formatNumberToBase(n, base, size) {
      var prefixes = {
        2: '0b',
        8: '0o',
        16: '0x'
      };
      var prefix = prefixes[base];
      var suffix = '';
      if (size) {
        if (size < 1) {
          throw new Error('size must be in greater than 0');
        }
        if (!isInteger$1(size)) {
          throw new Error('size must be an integer');
        }
        if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {
          throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
        }
        if (!isInteger$1(n)) {
          throw new Error('Value must be an integer');
        }
        if (n < 0) {
          n = n + 2 ** size;
        }
        suffix = "i".concat(size);
      }
      var sign = '';
      if (n < 0) {
        n = -n;
        sign = '-';
      }
      return "".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);
    }

    /**
     * Convert a number to a formatted string representation.
     *
     * Syntax:
     *
     *    format(value)
     *    format(value, options)
     *    format(value, precision)
     *    format(value, fn)
     *
     * Where:
     *
     *    {number} value   The value to be formatted
     *    {Object} options An object with formatting options. Available options:
     *                     {string} notation
     *                         Number notation. Choose from:
     *                         'fixed'          Always use regular number notation.
     *                                          For example '123.40' and '14000000'
     *                         'exponential'    Always use exponential notation.
     *                                          For example '1.234e+2' and '1.4e+7'
     *                         'engineering'    Always use engineering notation.
     *                                          For example '123.4e+0' and '14.0e+6'
     *                         'auto' (default) Regular number notation for numbers
     *                                          having an absolute value between
     *                                          `lowerExp` and `upperExp` bounds, and
     *                                          uses exponential notation elsewhere.
     *                                          Lower bound is included, upper bound
     *                                          is excluded.
     *                                          For example '123.4' and '1.4e7'.
     *                         'bin', 'oct, or
     *                         'hex'            Format the number using binary, octal,
     *                                          or hexadecimal notation.
     *                                          For example '0b1101' and '0x10fe'.
     *                     {number} wordSize    The word size in bits to use for formatting
     *                                          in binary, octal, or hexadecimal notation.
     *                                          To be used only with 'bin', 'oct', or 'hex'
     *                                          values for 'notation' option. When this option
     *                                          is defined the value is formatted as a signed
     *                                          twos complement integer of the given word size
     *                                          and the size suffix is appended to the output.
     *                                          For example
     *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
     *                                          Default value is undefined.
     *                     {number} precision   A number between 0 and 16 to round
     *                                          the digits of the number.
     *                                          In case of notations 'exponential',
     *                                          'engineering', and 'auto',
     *                                          `precision` defines the total
     *                                          number of significant digits returned.
     *                                          In case of notation 'fixed',
     *                                          `precision` defines the number of
     *                                          significant digits after the decimal
     *                                          point.
     *                                          `precision` is undefined by default,
     *                                          not rounding any digits.
     *                     {number} lowerExp    Exponent determining the lower boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `-3`.
     *                     {number} upperExp    Exponent determining the upper boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `5`.
     *    {Function} fn    A custom formatting function. Can be used to override the
     *                     built-in notations. Function `fn` is called with `value` as
     *                     parameter and must return a string. Is useful for example to
     *                     format all values inside a matrix in a particular way.
     *
     * Examples:
     *
     *    format(6.4)                                        // '6.4'
     *    format(1240000)                                    // '1.24e6'
     *    format(1/3)                                        // '0.3333333333333333'
     *    format(1/3, 3)                                     // '0.333'
     *    format(21385, 2)                                   // '21000'
     *    format(12.071, {notation: 'fixed'})                // '12'
     *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
     *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
     *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
     *
     * @param {number} value
     * @param {Object | Function | number} [options]
     * @return {string} str The formatted value
     */
    function format$2(value, options) {
      if (typeof options === 'function') {
        // handle format(value, fn)
        return options(value);
      }

      // handle special cases
      if (value === Infinity) {
        return 'Infinity';
      } else if (value === -Infinity) {
        return '-Infinity';
      } else if (isNaN(value)) {
        return 'NaN';
      }

      // default values for options
      var notation = 'auto';
      var precision;
      var wordSize;
      if (options) {
        // determine notation from options
        if (options.notation) {
          notation = options.notation;
        }

        // determine precision from options
        if (isNumber(options)) {
          precision = options;
        } else if (isNumber(options.precision)) {
          precision = options.precision;
        }
        if (options.wordSize) {
          wordSize = options.wordSize;
          if (typeof wordSize !== 'number') {
            throw new Error('Option "wordSize" must be a number');
          }
        }
      }

      // handle the various notations
      switch (notation) {
        case 'fixed':
          return toFixed$1(value, precision);
        case 'exponential':
          return toExponential$1(value, precision);
        case 'engineering':
          return toEngineering$1(value, precision);
        case 'bin':
          return formatNumberToBase(value, 2, wordSize);
        case 'oct':
          return formatNumberToBase(value, 8, wordSize);
        case 'hex':
          return formatNumberToBase(value, 16, wordSize);
        case 'auto':
          // remove trailing zeros after the decimal point
          return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
            var digits = arguments[2];
            var e = arguments[4];
            return digits !== '.' ? digits + e : e;
          });
        default:
          throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
      }
    }

    /**
     * Split a number into sign, coefficients, and exponent
     * @param {number | string} value
     * @return {SplitValue}
     *              Returns an object containing sign, coefficients, and exponent
     */
    function splitNumber(value) {
      // parse the input value
      var match = String(value).toLowerCase().match(/^(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
      if (!match) {
        throw new SyntaxError('Invalid number ' + value);
      }
      var sign = match[1];
      var digits = match[2];
      var exponent = parseFloat(match[4] || '0');
      var dot = digits.indexOf('.');
      exponent += dot !== -1 ? dot - 1 : digits.length - 1;
      var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
      .replace(/^0*/, function (zeros) {
        // remove leading zeros, add their count to the exponent
        exponent -= zeros.length;
        return '';
      }).replace(/0*$/, '') // remove trailing zeros
      .split('').map(function (d) {
        return parseInt(d);
      });
      if (coefficients.length === 0) {
        coefficients.push(0);
        exponent++;
      }
      return {
        sign,
        coefficients,
        exponent
      };
    }

    /**
     * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
     * @param {number | string} value
     * @param {number} [precision]        Optional number of significant figures to return.
     */
    function toEngineering$1(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }
      var split = splitNumber(value);
      var rounded = roundDigits(split, precision);
      var e = rounded.exponent;
      var c = rounded.coefficients;

      // find nearest lower multiple of 3 for exponent
      var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;
      if (isNumber(precision)) {
        // add zeroes to give correct sig figs
        while (precision > c.length || e - newExp + 1 > c.length) {
          c.push(0);
        }
      } else {
        // concatenate coefficients with necessary zeros
        // add zeros if necessary (for example: 1e+8 -> 100e+6)
        var missingZeros = Math.abs(e - newExp) - (c.length - 1);
        for (var i = 0; i < missingZeros; i++) {
          c.push(0);
        }
      }

      // find difference in exponents
      var expDiff = Math.abs(e - newExp);
      var decimalIdx = 1;

      // push decimal index over by expDiff times
      while (expDiff > 0) {
        decimalIdx++;
        expDiff--;
      }

      // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
      // otherwise concat with the rest of the coefficients
      var decimals = c.slice(decimalIdx).join('');
      var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
      var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
      return rounded.sign + str;
    }

    /**
     * Format a number with fixed notation.
     * @param {number | string} value
     * @param {number} [precision=undefined]  Optional number of decimals after the
     *                                        decimal point. null by default.
     */
    function toFixed$1(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }
      var splitValue = splitNumber(value);
      var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
      var c = rounded.coefficients;
      var p = rounded.exponent + 1; // exponent may have changed

      // append zeros if needed
      var pp = p + (precision || 0);
      if (c.length < pp) {
        c = c.concat(zeros(pp - c.length));
      }

      // prepend zeros if needed
      if (p < 0) {
        c = zeros(-p + 1).concat(c);
        p = 1;
      }

      // insert a dot if needed
      if (p < c.length) {
        c.splice(p, 0, p === 0 ? '0.' : '.');
      }
      return rounded.sign + c.join('');
    }

    /**
     * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
     * @param {number | string} value
     * @param {number} [precision]  Number of digits in formatted output.
     *                              If not provided, the maximum available digits
     *                              is used.
     */
    function toExponential$1(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }

      // round if needed, else create a clone
      var split = splitNumber(value);
      var rounded = precision ? roundDigits(split, precision) : split;
      var c = rounded.coefficients;
      var e = rounded.exponent;

      // append zeros if needed
      if (c.length < precision) {
        c = c.concat(zeros(precision - c.length));
      }

      // format as `C.CCCe+EEE` or `C.CCCe-EEE`
      var first = c.shift();
      return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
    }

    /**
     * Format a number with a certain precision
     * @param {number | string} value
     * @param {number} [precision=undefined] Optional number of digits.
     * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
     *                                       By default:
     *                                         lowerExp = -3 (incl)
     *                                         upper = +5 (excl)
     * @return {string}
     */
    function toPrecision(value, precision, options) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }

      // determine lower and upper bound for exponential notation.
      var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
      var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
      var split = splitNumber(value);
      var rounded = precision ? roundDigits(split, precision) : split;
      if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
        // exponential notation
        return toExponential$1(value, precision);
      } else {
        var c = rounded.coefficients;
        var e = rounded.exponent;

        // append trailing zeros
        if (c.length < precision) {
          c = c.concat(zeros(precision - c.length));
        }

        // append trailing zeros
        // TODO: simplify the next statement
        c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));

        // prepend zeros
        c = zeros(-e).concat(c);
        var dot = e > 0 ? e : 0;
        if (dot < c.length - 1) {
          c.splice(dot + 1, 0, '.');
        }
        return rounded.sign + c.join('');
      }
    }

    /**
     * Round the number of digits of a number *
     * @param {SplitValue} split       A value split with .splitNumber(value)
     * @param {number} precision  A positive integer
     * @return {SplitValue}
     *              Returns an object containing sign, coefficients, and exponent
     *              with rounded digits
     */
    function roundDigits(split, precision) {
      // create a clone
      var rounded = {
        sign: split.sign,
        coefficients: split.coefficients,
        exponent: split.exponent
      };
      var c = rounded.coefficients;

      // prepend zeros if needed
      while (precision <= 0) {
        c.unshift(0);
        rounded.exponent++;
        precision++;
      }
      if (c.length > precision) {
        var removed = c.splice(precision, c.length - precision);
        if (removed[0] >= 5) {
          var i = precision - 1;
          c[i]++;
          while (c[i] === 10) {
            c.pop();
            if (i === 0) {
              c.unshift(0);
              rounded.exponent++;
              i++;
            }
            i--;
            c[i]++;
          }
        }
      }
      return rounded;
    }

    /**
     * Create an array filled with zeros.
     * @param {number} length
     * @return {Array}
     */
    function zeros(length) {
      var arr = [];
      for (var i = 0; i < length; i++) {
        arr.push(0);
      }
      return arr;
    }

    /**
     * Count the number of significant digits of a number.
     *
     * For example:
     *   2.34 returns 3
     *   0.0034 returns 2
     *   120.5e+30 returns 4
     *
     * @param {number} value
     * @return {number} digits   Number of significant digits
     */
    function digits(value) {
      return value.toExponential().replace(/e.*$/, '') // remove exponential notation
      .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
      .length;
    }

    /**
     * Minimum number added to one that makes the result different than one
     */
    var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;

    /**
     * Compares two floating point numbers.
     * @param {number} x          First value to compare
     * @param {number} y          Second value to compare
     * @param {number} [epsilon]  The maximum relative difference between x and y
     *                            If epsilon is undefined or null, the function will
     *                            test whether x and y are exactly equal.
     * @return {boolean} whether the two numbers are nearly equal
    */
    function nearlyEqual$1(x, y, epsilon) {
      // if epsilon is null or undefined, test whether x and y are exactly equal
      if (epsilon === null || epsilon === undefined) {
        return x === y;
      }
      if (x === y) {
        return true;
      }

      // NaN
      if (isNaN(x) || isNaN(y)) {
        return false;
      }

      // at this point x and y should be finite
      if (isFinite(x) && isFinite(y)) {
        // check numbers are very close, needed when comparing numbers near zero
        var diff = Math.abs(x - y);
        if (diff < DBL_EPSILON) {
          return true;
        } else {
          // use relative error
          return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
        }
      }

      // Infinite and Number or negative Infinite and positive Infinite cases
      return false;
    }

    /**
     * Formats a BigNumber in a given base
     * @param {BigNumber} n
     * @param {number} base
     * @param {number} size
     * @returns {string}
     */
    function formatBigNumberToBase(n, base, size) {
      var BigNumberCtor = n.constructor;
      var big2 = new BigNumberCtor(2);
      var suffix = '';
      if (size) {
        if (size < 1) {
          throw new Error('size must be in greater than 0');
        }
        if (!isInteger$1(size)) {
          throw new Error('size must be an integer');
        }
        if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {
          throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
        }
        if (!n.isInteger()) {
          throw new Error('Value must be an integer');
        }
        if (n.lessThan(0)) {
          n = n.add(big2.pow(size));
        }
        suffix = "i".concat(size);
      }
      switch (base) {
        case 2:
          return "".concat(n.toBinary()).concat(suffix);
        case 8:
          return "".concat(n.toOctal()).concat(suffix);
        case 16:
          return "".concat(n.toHexadecimal()).concat(suffix);
        default:
          throw new Error("Base ".concat(base, " not supported "));
      }
    }

    /**
     * Convert a BigNumber to a formatted string representation.
     *
     * Syntax:
     *
     *    format(value)
     *    format(value, options)
     *    format(value, precision)
     *    format(value, fn)
     *
     * Where:
     *
     *    {number} value   The value to be formatted
     *    {Object} options An object with formatting options. Available options:
     *                     {string} notation
     *                         Number notation. Choose from:
     *                         'fixed'          Always use regular number notation.
     *                                          For example '123.40' and '14000000'
     *                         'exponential'    Always use exponential notation.
     *                                          For example '1.234e+2' and '1.4e+7'
     *                         'auto' (default) Regular number notation for numbers
     *                                          having an absolute value between
     *                                          `lower` and `upper` bounds, and uses
     *                                          exponential notation elsewhere.
     *                                          Lower bound is included, upper bound
     *                                          is excluded.
     *                                          For example '123.4' and '1.4e7'.
     *                         'bin', 'oct, or
     *                         'hex'            Format the number using binary, octal,
     *                                          or hexadecimal notation.
     *                                          For example '0b1101' and '0x10fe'.
     *                     {number} wordSize    The word size in bits to use for formatting
     *                                          in binary, octal, or hexadecimal notation.
     *                                          To be used only with 'bin', 'oct', or 'hex'
     *                                          values for 'notation' option. When this option
     *                                          is defined the value is formatted as a signed
     *                                          twos complement integer of the given word size
     *                                          and the size suffix is appended to the output.
     *                                          For example
     *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
     *                                          Default value is undefined.
     *                     {number} precision   A number between 0 and 16 to round
     *                                          the digits of the number.
     *                                          In case of notations 'exponential',
     *                                          'engineering', and 'auto',
     *                                          `precision` defines the total
     *                                          number of significant digits returned.
     *                                          In case of notation 'fixed',
     *                                          `precision` defines the number of
     *                                          significant digits after the decimal
     *                                          point.
     *                                          `precision` is undefined by default.
     *                     {number} lowerExp    Exponent determining the lower boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `-3`.
     *                     {number} upperExp    Exponent determining the upper boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `5`.
     *    {Function} fn    A custom formatting function. Can be used to override the
     *                     built-in notations. Function `fn` is called with `value` as
     *                     parameter and must return a string. Is useful for example to
     *                     format all values inside a matrix in a particular way.
     *
     * Examples:
     *
     *    format(6.4)                                        // '6.4'
     *    format(1240000)                                    // '1.24e6'
     *    format(1/3)                                        // '0.3333333333333333'
     *    format(1/3, 3)                                     // '0.333'
     *    format(21385, 2)                                   // '21000'
     *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
     *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
     *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
     *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
     *
     * @param {BigNumber} value
     * @param {Object | Function | number} [options]
     * @return {string} str The formatted value
     */
    function format$1(value, options) {
      if (typeof options === 'function') {
        // handle format(value, fn)
        return options(value);
      }

      // handle special cases
      if (!value.isFinite()) {
        return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
      }

      // default values for options
      var notation = 'auto';
      var precision;
      var wordSize;
      if (options !== undefined) {
        // determine notation from options
        if (options.notation) {
          notation = options.notation;
        }

        // determine precision from options
        if (typeof options === 'number') {
          precision = options;
        } else if (options.precision) {
          precision = options.precision;
        }
        if (options.wordSize) {
          wordSize = options.wordSize;
          if (typeof wordSize !== 'number') {
            throw new Error('Option "wordSize" must be a number');
          }
        }
      }

      // handle the various notations
      switch (notation) {
        case 'fixed':
          return toFixed(value, precision);
        case 'exponential':
          return toExponential(value, precision);
        case 'engineering':
          return toEngineering(value, precision);
        case 'bin':
          return formatBigNumberToBase(value, 2, wordSize);
        case 'oct':
          return formatBigNumberToBase(value, 8, wordSize);
        case 'hex':
          return formatBigNumberToBase(value, 16, wordSize);
        case 'auto':
          {
            // determine lower and upper bound for exponential notation.
            // TODO: implement support for upper and lower to be BigNumbers themselves
            var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
            var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;

            // handle special case zero
            if (value.isZero()) return '0';

            // determine whether or not to output exponential notation
            var str;
            var rounded = value.toSignificantDigits(precision);
            var exp = rounded.e;
            if (exp >= lowerExp && exp < upperExp) {
              // normal number notation
              str = rounded.toFixed();
            } else {
              // exponential notation
              str = toExponential(value, precision);
            }

            // remove trailing zeros after the decimal point
            return str.replace(/((\.\d*?)(0+))($|e)/, function () {
              var digits = arguments[2];
              var e = arguments[4];
              return digits !== '.' ? digits + e : e;
            });
          }
        default:
          throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
      }
    }

    /**
     * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
     * @param {BigNumber | string} value
     * @param {number} [precision]        Optional number of significant figures to return.
     */
    function toEngineering(value, precision) {
      // find nearest lower multiple of 3 for exponent
      var e = value.e;
      var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

      // find difference in exponents, and calculate the value without exponent
      var valueWithoutExp = value.mul(Math.pow(10, -newExp));
      var valueStr = valueWithoutExp.toPrecision(precision);
      if (valueStr.indexOf('e') !== -1) {
        valueStr = valueWithoutExp.toString();
      }
      return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
    }

    /**
     * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
     * @param {BigNumber} value
     * @param {number} [precision]  Number of digits in formatted output.
     *                              If not provided, the maximum available digits
     *                              is used.
     * @returns {string} str
     */
    function toExponential(value, precision) {
      if (precision !== undefined) {
        return value.toExponential(precision - 1); // Note the offset of one
      } else {
        return value.toExponential();
      }
    }

    /**
     * Format a number with fixed notation.
     * @param {BigNumber} value
     * @param {number} [precision=undefined] Optional number of decimals after the
     *                                       decimal point. Undefined by default.
     */
    function toFixed(value, precision) {
      return value.toFixed(precision);
    }

    /**
     * Format a value of any type into a string.
     *
     * Usage:
     *     math.format(value)
     *     math.format(value, precision)
     *     math.format(value, options)
     *
     * When value is a function:
     *
     * - When the function has a property `syntax`, it returns this
     *   syntax description.
     * - In other cases, a string `'function'` is returned.
     *
     * When `value` is an Object:
     *
     * - When the object contains a property `format` being a function, this
     *   function is invoked as `value.format(options)` and the result is returned.
     * - When the object has its own `toString` method, this method is invoked
     *   and the result is returned.
     * - In other cases the function will loop over all object properties and
     *   return JSON object notation like '{"a": 2, "b": 3}'.
     *
     * Example usage:
     *     math.format(2/7)                // '0.2857142857142857'
     *     math.format(math.pi, 3)         // '3.14'
     *     math.format(new Complex(2, 3))  // '2 + 3i'
     *     math.format('hello')            // '"hello"'
     *
     * @param {*} value             Value to be stringified
     * @param {Object | number | Function} [options]
     *     Formatting options. See src/utils/number.js:format for a
     *     description of the available options controlling number output.
     *     This generic "format" also supports the option property `truncate: NN`
     *     giving the maximum number NN of characters to return (if there would
     *     have been more, they are deleted and replaced by an ellipsis).
     * @return {string} str
     */
    function format(value, options) {
      var result = _format(value, options);
      if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {
        return result.substring(0, options.truncate - 3) + '...';
      }
      return result;
    }
    function _format(value, options) {
      if (typeof value === 'number') {
        return format$2(value, options);
      }
      if (isBigNumber(value)) {
        return format$1(value, options);
      }

      // note: we use unsafe duck-typing here to check for Fractions, this is
      // ok here since we're only invoking toString or concatenating its values
      if (looksLikeFraction(value)) {
        if (!options || options.fraction !== 'decimal') {
          // output as ratio, like '1/3'
          return value.s * value.n + '/' + value.d;
        } else {
          // output as decimal, like '0.(3)'
          return value.toString();
        }
      }
      if (Array.isArray(value)) {
        return formatArray(value, options);
      }
      if (isString(value)) {
        return '"' + value + '"';
      }
      if (typeof value === 'function') {
        return value.syntax ? String(value.syntax) : 'function';
      }
      if (value && typeof value === 'object') {
        if (typeof value.format === 'function') {
          return value.format(options);
        } else if (value && value.toString(options) !== {}.toString()) {
          // this object has a non-native toString method, use that one
          return value.toString(options);
        } else {
          var entries = Object.keys(value).map(key => {
            return '"' + key + '": ' + format(value[key], options);
          });
          return '{' + entries.join(', ') + '}';
        }
      }
      return String(value);
    }

    /**
     * Recursively format an n-dimensional matrix
     * Example output: "[[1, 2], [3, 4]]"
     * @param {Array} array
     * @param {Object | number | Function} [options]  Formatting options. See
     *                                                lib/utils/number:format for a
     *                                                description of the available
     *                                                options.
     * @returns {string} str
     */
    function formatArray(array, options) {
      if (Array.isArray(array)) {
        var str = '[';
        var len = array.length;
        for (var i = 0; i < len; i++) {
          if (i !== 0) {
            str += ', ';
          }
          str += formatArray(array[i], options);
        }
        str += ']';
        return str;
      } else {
        return format(array, options);
      }
    }

    /**
     * Check whether a value looks like a Fraction (unsafe duck-type check)
     * @param {*} value
     * @return {boolean}
     */
    function looksLikeFraction(value) {
      return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
    }

    /**
     * Create a range error with the message:
     *     'Dimension mismatch (<actual size> != <expected size>)'
     * @param {number | number[]} actual        The actual size
     * @param {number | number[]} expected      The expected size
     * @param {string} [relation='!=']          Optional relation between actual
     *                                          and expected size: '!=', '<', etc.
     * @extends RangeError
     */
    function DimensionError(actual, expected, relation) {
      if (!(this instanceof DimensionError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this.actual = actual;
      this.expected = expected;
      this.relation = relation;
      this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
      this.stack = new Error().stack;
    }
    DimensionError.prototype = new RangeError();
    DimensionError.prototype.constructor = RangeError;
    DimensionError.prototype.name = 'DimensionError';
    DimensionError.prototype.isDimensionError = true;

    /**
     * Create a range error with the message:
     *     'Index out of range (index < min)'
     *     'Index out of range (index < max)'
     *
     * @param {number} index     The actual index
     * @param {number} [min=0]   Minimum index (included)
     * @param {number} [max]     Maximum index (excluded)
     * @extends RangeError
     */
    function IndexError(index, min, max) {
      if (!(this instanceof IndexError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }
      this.index = index;
      if (arguments.length < 3) {
        this.min = 0;
        this.max = min;
      } else {
        this.min = min;
        this.max = max;
      }
      if (this.min !== undefined && this.index < this.min) {
        this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
      } else if (this.max !== undefined && this.index >= this.max) {
        this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
      } else {
        this.message = 'Index out of range (' + this.index + ')';
      }
      this.stack = new Error().stack;
    }
    IndexError.prototype = new RangeError();
    IndexError.prototype.constructor = RangeError;
    IndexError.prototype.name = 'IndexError';
    IndexError.prototype.isIndexError = true;

    /**
     * Calculate the size of a multi dimensional array.
     * This function checks the size of the first entry, it does not validate
     * whether all dimensions match. (use function `validate` for that)
     * @param {Array} x
     * @Return {Number[]} size
     */
    function arraySize(x) {
      var s = [];
      while (Array.isArray(x)) {
        s.push(x.length);
        x = x[0];
      }
      return s;
    }

    /**
     * Recursively validate whether each element in a multi dimensional array
     * has a size corresponding to the provided size array.
     * @param {Array} array    Array to be validated
     * @param {number[]} size  Array with the size of each dimension
     * @param {number} dim   Current dimension
     * @throws DimensionError
     * @private
     */
    function _validate(array, size, dim) {
      var i;
      var len = array.length;
      if (len !== size[dim]) {
        throw new DimensionError(len, size[dim]);
      }
      if (dim < size.length - 1) {
        // recursively validate each child array
        var dimNext = dim + 1;
        for (i = 0; i < len; i++) {
          var child = array[i];
          if (!Array.isArray(child)) {
            throw new DimensionError(size.length - 1, size.length, '<');
          }
          _validate(array[i], size, dimNext);
        }
      } else {
        // last dimension. none of the childs may be an array
        for (i = 0; i < len; i++) {
          if (Array.isArray(array[i])) {
            throw new DimensionError(size.length + 1, size.length, '>');
          }
        }
      }
    }

    /**
     * Validate whether each element in a multi dimensional array has
     * a size corresponding to the provided size array.
     * @param {Array} array    Array to be validated
     * @param {number[]} size  Array with the size of each dimension
     * @throws DimensionError
     */
    function validate(array, size) {
      var isScalar = size.length === 0;
      if (isScalar) {
        // scalar
        if (Array.isArray(array)) {
          throw new DimensionError(array.length, 0);
        }
      } else {
        // array
        _validate(array, size, 0);
      }
    }

    /**
     * Test whether index is an integer number with index >= 0 and index < length
     * when length is provided
     * @param {number} index    Zero-based index
     * @param {number} [length] Length of the array
     */
    function validateIndex(index, length) {
      if (!isNumber(index) || !isInteger$1(index)) {
        throw new TypeError('Index must be an integer (value: ' + index + ')');
      }
      if (index < 0 || typeof length === 'number' && index >= length) {
        throw new IndexError(index, length);
      }
    }

    /**
     * Resize a multi dimensional array. The resized array is returned.
     * @param {Array} array         Array to be resized
     * @param {Array.<number>} size Array with the size of each dimension
     * @param {*} [defaultValue=0]  Value to be filled in in new entries,
     *                              zero by default. Specify for example `null`,
     *                              to clearly see entries that are not explicitly
     *                              set.
     * @return {Array} array         The resized array
     */
    function resize(array, size, defaultValue) {
      // TODO: add support for scalars, having size=[] ?

      // check the type of the arguments
      if (!Array.isArray(array) || !Array.isArray(size)) {
        throw new TypeError('Array expected');
      }
      if (size.length === 0) {
        throw new Error('Resizing to scalar is not supported');
      }

      // check whether size contains positive integers
      size.forEach(function (value) {
        if (!isNumber(value) || !isInteger$1(value) || value < 0) {
          throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');
        }
      });

      // recursively resize the array
      var _defaultValue = defaultValue !== undefined ? defaultValue : 0;
      _resize(array, size, 0, _defaultValue);
      return array;
    }

    /**
     * Recursively resize a multi dimensional array
     * @param {Array} array         Array to be resized
     * @param {number[]} size       Array with the size of each dimension
     * @param {number} dim          Current dimension
     * @param {*} [defaultValue]    Value to be filled in in new entries,
     *                              undefined by default.
     * @private
     */
    function _resize(array, size, dim, defaultValue) {
      var i;
      var elem;
      var oldLen = array.length;
      var newLen = size[dim];
      var minLen = Math.min(oldLen, newLen);

      // apply new length
      array.length = newLen;
      if (dim < size.length - 1) {
        // non-last dimension
        var dimNext = dim + 1;

        // resize existing child arrays
        for (i = 0; i < minLen; i++) {
          // resize child array
          elem = array[i];
          if (!Array.isArray(elem)) {
            elem = [elem]; // add a dimension
            array[i] = elem;
          }
          _resize(elem, size, dimNext, defaultValue);
        }

        // create new child arrays
        for (i = minLen; i < newLen; i++) {
          // get child array
          elem = [];
          array[i] = elem;

          // resize new child array
          _resize(elem, size, dimNext, defaultValue);
        }
      } else {
        // last dimension

        // remove dimensions of existing values
        for (i = 0; i < minLen; i++) {
          while (Array.isArray(array[i])) {
            array[i] = array[i][0];
          }
        }

        // fill new elements with the default value
        for (i = minLen; i < newLen; i++) {
          array[i] = defaultValue;
        }
      }
    }

    /**
     * Re-shape a multi dimensional array to fit the specified dimensions
     * @param {Array} array           Array to be reshaped
     * @param {Array.<number>} sizes  List of sizes for each dimension
     * @returns {Array}               Array whose data has been formatted to fit the
     *                                specified dimensions
     *
     * @throws {DimensionError}       If the product of the new dimension sizes does
     *                                not equal that of the old ones
     */
    function reshape$1(array, sizes) {
      var flatArray = flatten(array);
      var currentLength = flatArray.length;
      if (!Array.isArray(array) || !Array.isArray(sizes)) {
        throw new TypeError('Array expected');
      }
      if (sizes.length === 0) {
        throw new DimensionError(0, currentLength, '!=');
      }
      sizes = processSizesWildcard(sizes, currentLength);
      var newLength = product(sizes);
      if (currentLength !== newLength) {
        throw new DimensionError(newLength, currentLength, '!=');
      }
      try {
        return _reshape(flatArray, sizes);
      } catch (e) {
        if (e instanceof DimensionError) {
          throw new DimensionError(newLength, currentLength, '!=');
        }
        throw e;
      }
    }

    /**
     * Replaces the wildcard -1 in the sizes array.
     * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.
     * @param {number} currentLength  Number of elements in the array.
     * @throws {Error}                If more than one wildcard or unable to replace it.
     * @returns {Array.<number>}      The sizes array with wildcard replaced.
     */
    function processSizesWildcard(sizes, currentLength) {
      var newLength = product(sizes);
      var processedSizes = sizes.slice();
      var WILDCARD = -1;
      var wildCardIndex = sizes.indexOf(WILDCARD);
      var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;
      if (isMoreThanOneWildcard) {
        throw new Error('More than one wildcard in sizes');
      }
      var hasWildcard = wildCardIndex >= 0;
      var canReplaceWildcard = currentLength % newLength === 0;
      if (hasWildcard) {
        if (canReplaceWildcard) {
          processedSizes[wildCardIndex] = -currentLength / newLength;
        } else {
          throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);
        }
      }
      return processedSizes;
    }

    /**
     * Computes the product of all array elements.
     * @param {Array<number>} array Array of factors
     * @returns {number}            Product of all elements
     */
    function product(array) {
      return array.reduce((prev, curr) => prev * curr, 1);
    }

    /**
     * Iteratively re-shape a multi dimensional array to fit the specified dimensions
     * @param {Array} array           Array to be reshaped
     * @param {Array.<number>} sizes  List of sizes for each dimension
     * @returns {Array}               Array whose data has been formatted to fit the
     *                                specified dimensions
     */

    function _reshape(array, sizes) {
      // testing if there are enough elements for the requested shape
      var tmpArray = array;
      var tmpArray2;
      // for each dimensions starting by the last one and ignoring the first one
      for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
        var size = sizes[sizeIndex];
        tmpArray2 = [];

        // aggregate the elements of the current tmpArray in elements of the requested size
        var length = tmpArray.length / size;
        for (var i = 0; i < length; i++) {
          tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
        }
        // set it as the new tmpArray for the next loop turn or for return
        tmpArray = tmpArray2;
      }
      return tmpArray;
    }

    /**
     * Unsqueeze a multi dimensional array: add dimensions when missing
     *
     * Paramter `size` will be mutated to match the new, unqueezed matrix size.
     *
     * @param {Array} array
     * @param {number} dims       Desired number of dimensions of the array
     * @param {number} [outer]    Number of outer dimensions to be added
     * @param {Array} [size] Current size of array.
     * @returns {Array} returns the array itself
     * @private
     */
    function unsqueeze(array, dims, outer, size) {
      var s = size || arraySize(array);

      // unsqueeze outer dimensions
      if (outer) {
        for (var i = 0; i < outer; i++) {
          array = [array];
          s.unshift(1);
        }
      }

      // unsqueeze inner dimensions
      array = _unsqueeze(array, dims, 0);
      while (s.length < dims) {
        s.push(1);
      }
      return array;
    }

    /**
     * Recursively unsqueeze a multi dimensional array
     * @param {Array} array
     * @param {number} dims Required number of dimensions
     * @param {number} dim  Current dimension
     * @returns {Array | *} Returns the squeezed array
     * @private
     */
    function _unsqueeze(array, dims, dim) {
      var i, ii;
      if (Array.isArray(array)) {
        var next = dim + 1;
        for (i = 0, ii = array.length; i < ii; i++) {
          array[i] = _unsqueeze(array[i], dims, next);
        }
      } else {
        for (var d = dim; d < dims; d++) {
          array = [array];
        }
      }
      return array;
    }
    /**
     * Flatten a multi dimensional array, put all elements in a one dimensional
     * array
     * @param {Array} array   A multi dimensional array
     * @return {Array}        The flattened array (1 dimensional)
     */
    function flatten(array) {
      if (!Array.isArray(array)) {
        // if not an array, return as is
        return array;
      }
      var flat = [];
      array.forEach(function callback(value) {
        if (Array.isArray(value)) {
          value.forEach(callback); // traverse through sub-arrays recursively
        } else {
          flat.push(value);
        }
      });
      return flat;
    }

    /**
     * Check the datatype of a given object
     * This is a low level implementation that should only be used by
     * parent Matrix classes such as SparseMatrix or DenseMatrix
     * This method does not validate Array Matrix shape
     * @param {Array} array
     * @param {function} typeOf   Callback function to use to determine the type of a value
     * @return {string}
     */
    function getArrayDataType(array, typeOf) {
      var type; // to hold type info
      var length = 0; // to hold length value to ensure it has consistent sizes

      for (var i = 0; i < array.length; i++) {
        var item = array[i];
        var isArray = Array.isArray(item);

        // Saving the target matrix row size
        if (i === 0 && isArray) {
          length = item.length;
        }

        // If the current item is an array but the length does not equal the targetVectorSize
        if (isArray && item.length !== length) {
          return undefined;
        }
        var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
        : typeOf(item);
        if (type === undefined) {
          type = itemType; // first item
        } else if (type !== itemType) {
          return 'mixed';
        } else ;
      }
      return type;
    }

    /**
     * Create a factory function, which can be used to inject dependencies.
     *
     * The created functions are memoized, a consecutive call of the factory
     * with the exact same inputs will return the same function instance.
     * The memoized cache is exposed on `factory.cache` and can be cleared
     * if needed.
     *
     * Example:
     *
     *     const name = 'log'
     *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
     *
     *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
     *       // ... create the function log here and return it
     *     }
     *
     * @param {string} name           Name of the function to be created
     * @param {string[]} dependencies The names of all required dependencies
     * @param {function} create       Callback function called with an object with all dependencies
     * @param {Object} [meta]         Optional object with meta information that will be attached
     *                                to the created factory function as property `meta`.
     * @returns {function}
     */
    function factory(name, dependencies, create, meta) {
      function assertAndCreate(scope) {
        // we only pass the requested dependencies to the factory function
        // to prevent functions to rely on dependencies that are not explicitly
        // requested.
        var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));
        assertDependencies(name, dependencies, scope);
        return create(deps);
      }
      assertAndCreate.isFactory = true;
      assertAndCreate.fn = name;
      assertAndCreate.dependencies = dependencies.slice().sort();
      if (meta) {
        assertAndCreate.meta = meta;
      }
      return assertAndCreate;
    }

    /**
     * Assert that all dependencies of a list with dependencies are available in the provided scope.
     *
     * Will throw an exception when there are dependencies missing.
     *
     * @param {string} name   Name for the function to be created. Used to generate a useful error message
     * @param {string[]} dependencies
     * @param {Object} scope
     */
    function assertDependencies(name, dependencies, scope) {
      var allDefined = dependencies.filter(dependency => !isOptionalDependency(dependency)) // filter optionals
      .every(dependency => scope[dependency] !== undefined);
      if (!allDefined) {
        var missingDependencies = dependencies.filter(dependency => scope[dependency] === undefined);

        // TODO: create a custom error class for this, a MathjsError or something like that
        throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(d => "\"".concat(d, "\"")).join(', '), "."));
      }
    }
    function isOptionalDependency(dependency) {
      return dependency && dependency[0] === '?';
    }
    function stripOptionalNotation(dependency) {
      return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
    }

    /**
     * Get a property of a plain object
     * Throws an error in case the object is not a plain object or the
     * property is not defined on the object itself
     * @param {Object} object
     * @param {string} prop
     * @return {*} Returns the property value when safe
     */
    function getSafeProperty(object, prop) {
      // only allow getting safe properties of a plain object
      if (isPlainObject(object) && isSafeProperty(object, prop)) {
        return object[prop];
      }
      if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
        throw new Error('Cannot access method "' + prop + '" as a property');
      }
      throw new Error('No access to property "' + prop + '"');
    }

    /**
     * Set a property on a plain object.
     * Throws an error in case the object is not a plain object or the
     * property would override an inherited property like .constructor or .toString
     * @param {Object} object
     * @param {string} prop
     * @param {*} value
     * @return {*} Returns the value
     */
    // TODO: merge this function into access.js?
    function setSafeProperty(object, prop, value) {
      // only allow setting safe properties of a plain object
      if (isPlainObject(object) && isSafeProperty(object, prop)) {
        object[prop] = value;
        return value;
      }
      throw new Error('No access to property "' + prop + '"');
    }
    function hasSafeProperty(object, prop) {
      return prop in object;
    }

    /**
     * Test whether a property is safe to use for an object.
     * For example .toString and .constructor are not safe
     * @param {string} prop
     * @return {boolean} Returns true when safe
     */
    function isSafeProperty(object, prop) {
      if (!object || typeof object !== 'object') {
        return false;
      }
      // SAFE: whitelisted
      // e.g length
      if (hasOwnProperty(safeNativeProperties, prop)) {
        return true;
      }
      // UNSAFE: inherited from Object prototype
      // e.g constructor
      if (prop in Object.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Object.prototype is a root object
        return false;
      }
      // UNSAFE: inherited from Function prototype
      // e.g call, apply
      if (prop in Function.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Function.prototype is a root object
        return false;
      }
      return true;
    }

    /**
     * Check whether a method is safe.
     * Throws an error when that's not the case (for example for `constructor`).
     * @param {Object} object
     * @param {string} method
     * @return {boolean} Returns true when safe, false otherwise
     */
    function isSafeMethod(object, method) {
      if (object === null || object === undefined || typeof object[method] !== 'function') {
        return false;
      }
      // UNSAFE: ghosted
      // e.g overridden toString
      // Note that IE10 doesn't support __proto__ and we can't do this check there.
      if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
        return false;
      }
      // SAFE: whitelisted
      // e.g toString
      if (hasOwnProperty(safeNativeMethods, method)) {
        return true;
      }
      // UNSAFE: inherited from Object prototype
      // e.g constructor
      if (method in Object.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Object.prototype is a root object
        return false;
      }
      // UNSAFE: inherited from Function prototype
      // e.g call, apply
      if (method in Function.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Function.prototype is a root object
        return false;
      }
      return true;
    }
    function isPlainObject(object) {
      return typeof object === 'object' && object && object.constructor === Object;
    }
    var safeNativeProperties = {
      length: true,
      name: true
    };
    var safeNativeMethods = {
      toString: true,
      valueOf: true,
      toLocaleString: true
    };

    /**
     * A map facade on a bare object.
     *
     * The small number of methods needed to implement a scope,
     * forwarding on to the SafeProperty functions. Over time, the codebase
     * will stop using this method, as all objects will be Maps, rather than
     * more security prone objects.
     */
    class ObjectWrappingMap {
      constructor(object) {
        this.wrappedObject = object;
      }
      keys() {
        return Object.keys(this.wrappedObject);
      }
      get(key) {
        return getSafeProperty(this.wrappedObject, key);
      }
      set(key, value) {
        setSafeProperty(this.wrappedObject, key, value);
        return this;
      }
      has(key) {
        return hasSafeProperty(this.wrappedObject, key);
      }
    }

    /**
     * Returns `true` if the passed object appears to be a Map (i.e. duck typing).
     *
     * Methods looked for are `get`, `set`, `keys` and `has`.
     *
     * @param {Map | object} object
     * @returns
     */
    function isMap(object) {
      // We can use the fast instanceof, or a slower duck typing check.
      // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.
      if (!object) {
        return false;
      }
      return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';
    }

    /**
     * Create a typed-function which checks the types of the arguments and
     * can match them against multiple provided signatures. The typed-function
     * automatically converts inputs in order to find a matching signature.
     * Typed functions throw informative errors in case of wrong input arguments.
     *
     * See the library [typed-function](https://github.com/josdejong/typed-function)
     * for detailed documentation.
     *
     * Syntax:
     *
     *     math.typed(name, signatures) : function
     *     math.typed(signatures) : function
     *
     * Examples:
     *
     *     // create a typed function with multiple types per argument (type union)
     *     const fn2 = typed({
     *       'number | boolean': function (b) {
     *         return 'b is a number or boolean'
     *       },
     *       'string, number | boolean': function (a, b) {
     *         return 'a is a string, b is a number or boolean'
     *       }
     *     })
     *
     *     // create a typed function with an any type argument
     *     const log = typed({
     *       'string, any': function (event, data) {
     *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
     *       }
     *     })
     *
     * @param {string} [name]                          Optional name for the typed-function
     * @param {Object<string, function>} signatures   Object with one or multiple function signatures
     * @returns {function} The created typed-function.
     */

    // returns a new instance of typed-function
    var _createTyped2 = function _createTyped() {
      // initially, return the original instance of typed-function
      // consecutively, return a new instance from typed.create.
      _createTyped2 = typedFunction.create;
      return typedFunction;
    };
    var dependencies$o = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];

    /**
     * Factory function for creating a new typed instance
     * @param {Object} dependencies   Object with data types like Complex and BigNumber
     * @returns {Function}
     */
    var createTyped = /* #__PURE__ */factory('typed', dependencies$o, function createTyped(_ref) {
      var {
        BigNumber,
        Complex,
        DenseMatrix,
        Fraction
      } = _ref;
      // TODO: typed-function must be able to silently ignore signatures with unknown data types

      // get a new instance of typed-function
      var typed = _createTyped2();

      // define all types. The order of the types determines in which order function
      // arguments are type-checked (so for performance it's important to put the
      // most used types first).
      typed.clear();
      typed.addTypes([{
        name: 'number',
        test: isNumber
      }, {
        name: 'Complex',
        test: isComplex
      }, {
        name: 'BigNumber',
        test: isBigNumber
      }, {
        name: 'Fraction',
        test: isFraction
      }, {
        name: 'Unit',
        test: isUnit
      },
      // The following type matches a valid variable name, i.e., an alphanumeric
      // string starting with an alphabetic character. It is used (at least)
      // in the definition of the derivative() function, as the argument telling
      // what to differentiate over must (currently) be a variable.
      {
        name: 'identifier',
        test: s => isString && /^(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])*$/.test(s)
      }, {
        name: 'string',
        test: isString
      }, {
        name: 'Chain',
        test: isChain
      }, {
        name: 'Array',
        test: isArray
      }, {
        name: 'Matrix',
        test: isMatrix
      }, {
        name: 'DenseMatrix',
        test: isDenseMatrix
      }, {
        name: 'SparseMatrix',
        test: isSparseMatrix
      }, {
        name: 'Range',
        test: isRange
      }, {
        name: 'Index',
        test: isIndex
      }, {
        name: 'boolean',
        test: isBoolean
      }, {
        name: 'ResultSet',
        test: isResultSet
      }, {
        name: 'Help',
        test: isHelp
      }, {
        name: 'function',
        test: isFunction
      }, {
        name: 'Date',
        test: isDate
      }, {
        name: 'RegExp',
        test: isRegExp
      }, {
        name: 'null',
        test: isNull
      }, {
        name: 'undefined',
        test: isUndefined
      }, {
        name: 'AccessorNode',
        test: isAccessorNode
      }, {
        name: 'ArrayNode',
        test: isArrayNode
      }, {
        name: 'AssignmentNode',
        test: isAssignmentNode
      }, {
        name: 'BlockNode',
        test: isBlockNode
      }, {
        name: 'ConditionalNode',
        test: isConditionalNode
      }, {
        name: 'ConstantNode',
        test: isConstantNode
      }, {
        name: 'FunctionNode',
        test: isFunctionNode
      }, {
        name: 'FunctionAssignmentNode',
        test: isFunctionAssignmentNode
      }, {
        name: 'IndexNode',
        test: isIndexNode
      }, {
        name: 'Node',
        test: isNode
      }, {
        name: 'ObjectNode',
        test: isObjectNode
      }, {
        name: 'OperatorNode',
        test: isOperatorNode
      }, {
        name: 'ParenthesisNode',
        test: isParenthesisNode
      }, {
        name: 'RangeNode',
        test: isRangeNode
      }, {
        name: 'RelationalNode',
        test: isRelationalNode
      }, {
        name: 'SymbolNode',
        test: isSymbolNode
      }, {
        name: 'Map',
        test: isMap
      }, {
        name: 'Object',
        test: isObject
      } // order 'Object' last, it matches on other classes too
      ]);

      typed.addConversions([{
        from: 'number',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          }

          // note: conversion from number to BigNumber can fail if x has >15 digits
          if (digits(x) > 15) {
            throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
          }
          return new BigNumber(x);
        }
      }, {
        from: 'number',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }
          return new Complex(x, 0);
        }
      }, {
        from: 'BigNumber',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }
          return new Complex(x.toNumber(), 0);
        }
      }, {
        from: 'Fraction',
        to: 'BigNumber',
        convert: function convert(x) {
          throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
        }
      }, {
        from: 'Fraction',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }
          return new Complex(x.valueOf(), 0);
        }
      }, {
        from: 'number',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }
          var f = new Fraction(x);
          if (f.valueOf() !== x) {
            throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
          }
          return f;
        }
      }, {
        // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
        //  from: 'Fraction',
        //  to: 'number',
        //  convert: function (x) {
        //    return x.valueOf()
        //  }
        // }, {
        from: 'string',
        to: 'number',
        convert: function convert(x) {
          var n = Number(x);
          if (isNaN(n)) {
            throw new Error('Cannot convert "' + x + '" to a number');
          }
          return n;
        }
      }, {
        from: 'string',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          }
          try {
            return new BigNumber(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to BigNumber');
          }
        }
      }, {
        from: 'string',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }
          try {
            return new Fraction(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to Fraction');
          }
        }
      }, {
        from: 'string',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }
          try {
            return new Complex(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to Complex');
          }
        }
      }, {
        from: 'boolean',
        to: 'number',
        convert: function convert(x) {
          return +x;
        }
      }, {
        from: 'boolean',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          }
          return new BigNumber(+x);
        }
      }, {
        from: 'boolean',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }
          return new Fraction(+x);
        }
      }, {
        from: 'boolean',
        to: 'string',
        convert: function convert(x) {
          return String(x);
        }
      }, {
        from: 'Array',
        to: 'Matrix',
        convert: function convert(array) {
          if (!DenseMatrix) {
            throwNoMatrix();
          }
          return new DenseMatrix(array);
        }
      }, {
        from: 'Matrix',
        to: 'Array',
        convert: function convert(matrix) {
          return matrix.valueOf();
        }
      }]);

      // Provide a suggestion on how to call a function elementwise
      // This was added primarily as guidance for the v10 -> v11 transition,
      // and could potentially be removed in the future if it no longer seems
      // to be helpful.
      typed.onMismatch = (name, args, signatures) => {
        var usualError = typed.createError(name, args, signatures);
        if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) &&
        // check if the function can be unary:
        signatures.some(sig => !sig.params.includes(','))) {
          var err = new TypeError("Function '".concat(name, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(name, ")'."));
          err.data = usualError.data;
          throw err;
        }
        throw usualError;
      };

      // Provide a suggestion on how to call a function elementwise
      // This was added primarily as guidance for the v10 -> v11 transition,
      // and could potentially be removed in the future if it no longer seems
      // to be helpful.
      typed.onMismatch = (name, args, signatures) => {
        var usualError = typed.createError(name, args, signatures);
        if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) &&
        // check if the function can be unary:
        signatures.some(sig => !sig.params.includes(','))) {
          var err = new TypeError("Function '".concat(name, "' doesn't apply to matrices. To call it ") + "elementwise on a matrix 'M', try 'map(M, ".concat(name, ")'."));
          err.data = usualError.data;
          throw err;
        }
        throw usualError;
      };
      return typed;
    });
    function throwNoBignumber(x) {
      throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
    }
    function throwNoComplex(x) {
      throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
    }
    function throwNoMatrix() {
      throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
    }
    function throwNoFraction(x) {
      throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
    }

    /*!
     *  decimal.js v10.4.2
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js
     *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Licence
     */


    // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


      // The maximum exponent magnitude.
      // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
    var EXP_LIMIT = 9e15,                      // 0 to 9e15

      // The limit on the value of `precision`, and on the value of the first argument to
      // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
      MAX_DIGITS = 1e9,                        // 0 to 1e9

      // Base conversion alphabet.
      NUMERALS = '0123456789abcdef',

      // The natural logarithm of 10 (1025 digits).
      LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

      // Pi (1025 digits).
      PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


      // The initial configuration properties of the Decimal constructor.
      DEFAULTS = {

        // These values must be integers within the stated ranges (inclusive).
        // Most of these values can be changed at run-time using the `Decimal.config` method.

        // The maximum number of significant digits of the result of a calculation or base conversion.
        // E.g. `Decimal.config({ precision: 20 });`
        precision: 20,                         // 1 to MAX_DIGITS

        // The rounding mode used when rounding to `precision`.
        //
        // ROUND_UP         0 Away from zero.
        // ROUND_DOWN       1 Towards zero.
        // ROUND_CEIL       2 Towards +Infinity.
        // ROUND_FLOOR      3 Towards -Infinity.
        // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        //
        // E.g.
        // `Decimal.rounding = 4;`
        // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
        rounding: 4,                           // 0 to 8

        // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP         0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
        // FLOOR      3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN  6 The IEEE 754 remainder function.
        // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
        //
        // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
        // division (9) are commonly used for the modulus operation. The other rounding modes can also
        // be used, but they may not give useful results.
        modulo: 1,                             // 0 to 9

        // The exponent value at and beneath which `toString` returns exponential notation.
        // JavaScript numbers: -7
        toExpNeg: -7,                          // 0 to -EXP_LIMIT

        // The exponent value at and above which `toString` returns exponential notation.
        // JavaScript numbers: 21
        toExpPos:  21,                         // 0 to EXP_LIMIT

        // The minimum exponent value, beneath which underflow to zero occurs.
        // JavaScript numbers: -324  (5e-324)
        minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

        // The maximum exponent value, above which overflow to Infinity occurs.
        // JavaScript numbers: 308  (1.7976931348623157e+308)
        maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

        // Whether to use cryptographically-secure random number generation, if available.
        crypto: false                          // true/false
      },


    // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


      inexact, quadrant,
      external = true,

      decimalError = '[DecimalError] ',
      invalidArgument = decimalError + 'Invalid argument: ',
      precisionLimitExceeded = decimalError + 'Precision limit exceeded',
      cryptoUnavailable = decimalError + 'crypto unavailable',
      tag = '[object Decimal]',

      mathfloor = Math.floor,
      mathpow = Math.pow,

      isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
      isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
      isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
      isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

      BASE = 1e7,
      LOG_BASE = 7,
      MAX_SAFE_INTEGER = 9007199254740991,

      LN10_PRECISION = LN10.length - 1,
      PI_PRECISION = PI.length - 1,

      // Decimal.prototype object
      P = { toStringTag: tag };


    // Decimal prototype methods


    /*
     *  absoluteValue             abs
     *  ceil
     *  clampedTo                 clamp
     *  comparedTo                cmp
     *  cosine                    cos
     *  cubeRoot                  cbrt
     *  decimalPlaces             dp
     *  dividedBy                 div
     *  dividedToIntegerBy        divToInt
     *  equals                    eq
     *  floor
     *  greaterThan               gt
     *  greaterThanOrEqualTo      gte
     *  hyperbolicCosine          cosh
     *  hyperbolicSine            sinh
     *  hyperbolicTangent         tanh
     *  inverseCosine             acos
     *  inverseHyperbolicCosine   acosh
     *  inverseHyperbolicSine     asinh
     *  inverseHyperbolicTangent  atanh
     *  inverseSine               asin
     *  inverseTangent            atan
     *  isFinite
     *  isInteger                 isInt
     *  isNaN
     *  isNegative                isNeg
     *  isPositive                isPos
     *  isZero
     *  lessThan                  lt
     *  lessThanOrEqualTo         lte
     *  logarithm                 log
     *  [maximum]                 [max]
     *  [minimum]                 [min]
     *  minus                     sub
     *  modulo                    mod
     *  naturalExponential        exp
     *  naturalLogarithm          ln
     *  negated                   neg
     *  plus                      add
     *  precision                 sd
     *  round
     *  sine                      sin
     *  squareRoot                sqrt
     *  tangent                   tan
     *  times                     mul
     *  toBinary
     *  toDecimalPlaces           toDP
     *  toExponential
     *  toFixed
     *  toFraction
     *  toHexadecimal             toHex
     *  toNearest
     *  toNumber
     *  toOctal
     *  toPower                   pow
     *  toPrecision
     *  toSignificantDigits       toSD
     *  toString
     *  truncated                 trunc
     *  valueOf                   toJSON
     */


    /*
     * Return a new Decimal whose value is the absolute value of this Decimal.
     *
     */
    P.absoluteValue = P.abs = function () {
      var x = new this.constructor(this);
      if (x.s < 0) x.s = 1;
      return finalise(x);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
     * direction of positive Infinity.
     *
     */
    P.ceil = function () {
      return finalise(new this.constructor(this), this.e + 1, 2);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal clamped to the range
     * delineated by `min` and `max`.
     *
     * min {number|string|Decimal}
     * max {number|string|Decimal}
     *
     */
    P.clampedTo = P.clamp = function (min, max) {
      var k,
        x = this,
        Ctor = x.constructor;
      min = new Ctor(min);
      max = new Ctor(max);
      if (!min.s || !max.s) return new Ctor(NaN);
      if (min.gt(max)) throw Error(invalidArgument + max);
      k = x.cmp(min);
      return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);
    };


    /*
     * Return
     *   1    if the value of this Decimal is greater than the value of `y`,
     *  -1    if the value of this Decimal is less than the value of `y`,
     *   0    if they have the same value,
     *   NaN  if the value of either Decimal is NaN.
     *
     */
    P.comparedTo = P.cmp = function (y) {
      var i, j, xdL, ydL,
        x = this,
        xd = x.d,
        yd = (y = new x.constructor(y)).d,
        xs = x.s,
        ys = y.s;

      // Either NaN or ±Infinity?
      if (!xd || !yd) {
        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
      }

      // Either zero?
      if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

      // Signs differ?
      if (xs !== ys) return xs;

      // Compare exponents.
      if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

      xdL = xd.length;
      ydL = yd.length;

      // Compare digit by digit.
      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
        if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
      }

      // Compare lengths.
      return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
    };


    /*
     * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-1, 1]
     *
     * cos(0)         = 1
     * cos(-0)        = 1
     * cos(Infinity)  = NaN
     * cos(-Infinity) = NaN
     * cos(NaN)       = NaN
     *
     */
    P.cosine = P.cos = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.d) return new Ctor(NaN);

      // cos(0) = cos(-0) = 1
      if (!x.d[0]) return new Ctor(1);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;

      x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
    };


    /*
     *
     * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     *  cbrt(0)  =  0
     *  cbrt(-0) = -0
     *  cbrt(1)  =  1
     *  cbrt(-1) = -1
     *  cbrt(N)  =  N
     *  cbrt(-I) = -I
     *  cbrt(I)  =  I
     *
     * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
     *
     */
    P.cubeRoot = P.cbrt = function () {
      var e, m, n, r, rep, s, sd, t, t3, t3plusx,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite() || x.isZero()) return new Ctor(x);
      external = false;

      // Initial estimate.
      s = x.s * mathpow(x.s * x, 1 / 3);

       // Math.cbrt underflow/overflow?
       // Pass x to Math.pow as integer, then adjust the exponent of the result.
      if (!s || Math.abs(s) == 1 / 0) {
        n = digitsToString(x.d);
        e = x.e;

        // Adjust n exponent so it is a multiple of 3 away from x exponent.
        if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
        s = mathpow(n, 1 / 3);

        // Rarely, e may be one less than the result exponent value.
        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new Ctor(n);
        r.s = x.s;
      } else {
        r = new Ctor(s.toString());
      }

      sd = (e = Ctor.precision) + 3;

      // Halley's method.
      // TODO? Compare Newton's method.
      for (;;) {
        t = r;
        t3 = t.times(t).times(t);
        t3plusx = t3.plus(x);
        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

        // TODO? Replace with for-loop and checkRoundingDigits.
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);

          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
          // , i.e. approaching a rounding boundary, continue the iteration.
          if (n == '9999' || !rep && n == '4999') {

            // On the first iteration only, check to see if rounding up gives the exact result as the
            // nines may infinitely repeat.
            if (!rep) {
              finalise(t, e + 1, 0);

              if (t.times(t).times(t).eq(x)) {
                r = t;
                break;
              }
            }

            sd += 4;
            rep = 1;
          } else {

            // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
            // If not, then there are further digits and m will be truthy.
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

              // Truncate to the first rounding digit.
              finalise(r, e + 1, 1);
              m = !r.times(r).times(r).eq(x);
            }

            break;
          }
        }
      }

      external = true;

      return finalise(r, e, Ctor.rounding, m);
    };


    /*
     * Return the number of decimal places of the value of this Decimal.
     *
     */
    P.decimalPlaces = P.dp = function () {
      var w,
        d = this.d,
        n = NaN;

      if (d) {
        w = d.length - 1;
        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

        // Subtract the number of trailing zeros of the last word.
        w = d[w];
        if (w) for (; w % 10 == 0; w /= 10) n--;
        if (n < 0) n = 0;
      }

      return n;
    };


    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     */
    P.dividedBy = P.div = function (y) {
      return divide(this, new this.constructor(y));
    };


    /*
     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
     * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
     *
     */
    P.dividedToIntegerBy = P.divToInt = function (y) {
      var x = this,
        Ctor = x.constructor;
      return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
    };


    /*
     * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
     *
     */
    P.equals = P.eq = function (y) {
      return this.cmp(y) === 0;
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
     * direction of negative Infinity.
     *
     */
    P.floor = function () {
      return finalise(new this.constructor(this), this.e + 1, 3);
    };


    /*
     * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
     * false.
     *
     */
    P.greaterThan = P.gt = function (y) {
      return this.cmp(y) > 0;
    };


    /*
     * Return true if the value of this Decimal is greater than or equal to the value of `y`,
     * otherwise return false.
     *
     */
    P.greaterThanOrEqualTo = P.gte = function (y) {
      var k = this.cmp(y);
      return k == 1 || k === 0;
    };


    /*
     * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
     * Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [1, Infinity]
     *
     * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
     *
     * cosh(0)         = 1
     * cosh(-0)        = 1
     * cosh(Infinity)  = Infinity
     * cosh(-Infinity) = Infinity
     * cosh(NaN)       = NaN
     *
     *  x        time taken (ms)   result
     * 1000      9                 9.8503555700852349694e+433
     * 10000     25                4.4034091128314607936e+4342
     * 100000    171               1.4033316802130615897e+43429
     * 1000000   3817              1.5166076984010437725e+434294
     * 10000000  abandoned after 2 minute wait
     *
     * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
     *
     */
    P.hyperbolicCosine = P.cosh = function () {
      var k, n, pr, rm, len,
        x = this,
        Ctor = x.constructor,
        one = new Ctor(1);

      if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
      if (x.isZero()) return one;

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;

      // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
      // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

      // Estimate the optimum number of times to use the argument reduction.
      // TODO? Estimation reused from cosine() and may not be optimal here.
      if (len < 32) {
        k = Math.ceil(len / 3);
        n = (1 / tinyPow(4, k)).toString();
      } else {
        k = 16;
        n = '2.3283064365386962890625e-10';
      }

      x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

      // Reverse argument reduction
      var cosh2_x,
        i = k,
        d8 = new Ctor(8);
      for (; i--;) {
        cosh2_x = x.times(x);
        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
      }

      return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
    };


    /*
     * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
     * Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-Infinity, Infinity]
     *
     * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
     *
     * sinh(0)         = 0
     * sinh(-0)        = -0
     * sinh(Infinity)  = Infinity
     * sinh(-Infinity) = -Infinity
     * sinh(NaN)       = NaN
     *
     * x        time taken (ms)
     * 10       2 ms
     * 100      5 ms
     * 1000     14 ms
     * 10000    82 ms
     * 100000   886 ms            1.4033316802130615897e+43429
     * 200000   2613 ms
     * 300000   5407 ms
     * 400000   8824 ms
     * 500000   13026 ms          8.7080643612718084129e+217146
     * 1000000  48543 ms
     *
     * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
     *
     */
    P.hyperbolicSine = P.sinh = function () {
      var k, pr, rm, len,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite() || x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;

      if (len < 3) {
        x = taylorSeries(Ctor, 2, x, x, true);
      } else {

        // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
        // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
        // 3 multiplications and 1 addition

        // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
        // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
        // 4 multiplications and 2 additions

        // Estimate the optimum number of times to use the argument reduction.
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;

        x = x.times(1 / tinyPow(5, k));
        x = taylorSeries(Ctor, 2, x, x, true);

        // Reverse argument reduction
        var sinh2_x,
          d5 = new Ctor(5),
          d16 = new Ctor(16),
          d20 = new Ctor(20);
        for (; k--;) {
          sinh2_x = x.times(x);
          x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
        }
      }

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return finalise(x, pr, rm, true);
    };


    /*
     * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
     * Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-1, 1]
     *
     * tanh(x) = sinh(x) / cosh(x)
     *
     * tanh(0)         = 0
     * tanh(-0)        = -0
     * tanh(Infinity)  = 1
     * tanh(-Infinity) = -1
     * tanh(NaN)       = NaN
     *
     */
    P.hyperbolicTangent = P.tanh = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite()) return new Ctor(x.s);
      if (x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 7;
      Ctor.rounding = 1;

      return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
    };


    /*
     * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
     * this Decimal.
     *
     * Domain: [-1, 1]
     * Range: [0, pi]
     *
     * acos(x) = pi/2 - asin(x)
     *
     * acos(0)       = pi/2
     * acos(-0)      = pi/2
     * acos(1)       = 0
     * acos(-1)      = pi
     * acos(1/2)     = pi/3
     * acos(-1/2)    = 2*pi/3
     * acos(|x| > 1) = NaN
     * acos(NaN)     = NaN
     *
     */
    P.inverseCosine = P.acos = function () {
      var halfPi,
        x = this,
        Ctor = x.constructor,
        k = x.abs().cmp(1),
        pr = Ctor.precision,
        rm = Ctor.rounding;

      if (k !== -1) {
        return k === 0
          // |x| is 1
          ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
          // |x| > 1 or x is NaN
          : new Ctor(NaN);
      }

      if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

      // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

      Ctor.precision = pr + 6;
      Ctor.rounding = 1;

      x = x.asin();
      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return halfPi.minus(x);
    };


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
     * value of this Decimal.
     *
     * Domain: [1, Infinity]
     * Range: [0, Infinity]
     *
     * acosh(x) = ln(x + sqrt(x^2 - 1))
     *
     * acosh(x < 1)     = NaN
     * acosh(NaN)       = NaN
     * acosh(Infinity)  = Infinity
     * acosh(-Infinity) = NaN
     * acosh(0)         = NaN
     * acosh(-0)        = NaN
     * acosh(1)         = 0
     * acosh(-1)        = NaN
     *
     */
    P.inverseHyperbolicCosine = P.acosh = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
      if (!x.isFinite()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
      Ctor.rounding = 1;
      external = false;

      x = x.times(x).minus(1).sqrt().plus(x);

      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;

      return x.ln();
    };


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
     * of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-Infinity, Infinity]
     *
     * asinh(x) = ln(x + sqrt(x^2 + 1))
     *
     * asinh(NaN)       = NaN
     * asinh(Infinity)  = Infinity
     * asinh(-Infinity) = -Infinity
     * asinh(0)         = 0
     * asinh(-0)        = -0
     *
     */
    P.inverseHyperbolicSine = P.asinh = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite() || x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
      Ctor.rounding = 1;
      external = false;

      x = x.times(x).plus(1).sqrt().plus(x);

      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;

      return x.ln();
    };


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
     * value of this Decimal.
     *
     * Domain: [-1, 1]
     * Range: [-Infinity, Infinity]
     *
     * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
     *
     * atanh(|x| > 1)   = NaN
     * atanh(NaN)       = NaN
     * atanh(Infinity)  = NaN
     * atanh(-Infinity) = NaN
     * atanh(0)         = 0
     * atanh(-0)        = -0
     * atanh(1)         = Infinity
     * atanh(-1)        = -Infinity
     *
     */
    P.inverseHyperbolicTangent = P.atanh = function () {
      var pr, rm, wpr, xsd,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite()) return new Ctor(NaN);
      if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      xsd = x.sd();

      if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

      Ctor.precision = wpr = xsd - x.e;

      x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

      Ctor.precision = pr + 4;
      Ctor.rounding = 1;

      x = x.ln();

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return x.times(0.5);
    };


    /*
     * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
     * Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-pi/2, pi/2]
     *
     * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
     *
     * asin(0)       = 0
     * asin(-0)      = -0
     * asin(1/2)     = pi/6
     * asin(-1/2)    = -pi/6
     * asin(1)       = pi/2
     * asin(-1)      = -pi/2
     * asin(|x| > 1) = NaN
     * asin(NaN)     = NaN
     *
     * TODO? Compare performance of Taylor series.
     *
     */
    P.inverseSine = P.asin = function () {
      var halfPi, k,
        pr, rm,
        x = this,
        Ctor = x.constructor;

      if (x.isZero()) return new Ctor(x);

      k = x.abs().cmp(1);
      pr = Ctor.precision;
      rm = Ctor.rounding;

      if (k !== -1) {

        // |x| is 1
        if (k === 0) {
          halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
          halfPi.s = x.s;
          return halfPi;
        }

        // |x| > 1 or x is NaN
        return new Ctor(NaN);
      }

      // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

      Ctor.precision = pr + 6;
      Ctor.rounding = 1;

      x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return x.times(2);
    };


    /*
     * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
     * of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-pi/2, pi/2]
     *
     * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
     *
     * atan(0)         = 0
     * atan(-0)        = -0
     * atan(1)         = pi/4
     * atan(-1)        = -pi/4
     * atan(Infinity)  = pi/2
     * atan(-Infinity) = -pi/2
     * atan(NaN)       = NaN
     *
     */
    P.inverseTangent = P.atan = function () {
      var i, j, k, n, px, t, r, wpr, x2,
        x = this,
        Ctor = x.constructor,
        pr = Ctor.precision,
        rm = Ctor.rounding;

      if (!x.isFinite()) {
        if (!x.s) return new Ctor(NaN);
        if (pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.5);
          r.s = x.s;
          return r;
        }
      } else if (x.isZero()) {
        return new Ctor(x);
      } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.25);
        r.s = x.s;
        return r;
      }

      Ctor.precision = wpr = pr + 10;
      Ctor.rounding = 1;

      // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

      // Argument reduction
      // Ensure |x| < 0.42
      // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

      k = Math.min(28, wpr / LOG_BASE + 2 | 0);

      for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

      external = false;

      j = Math.ceil(wpr / LOG_BASE);
      n = 1;
      x2 = x.times(x);
      r = new Ctor(x);
      px = x;

      // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
      for (; i !== -1;) {
        px = px.times(x2);
        t = r.minus(px.div(n += 2));

        px = px.times(x2);
        r = t.plus(px.div(n += 2));

        if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
      }

      if (k) r = r.times(2 << (k - 1));

      external = true;

      return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
    };


    /*
     * Return true if the value of this Decimal is a finite number, otherwise return false.
     *
     */
    P.isFinite = function () {
      return !!this.d;
    };


    /*
     * Return true if the value of this Decimal is an integer, otherwise return false.
     *
     */
    P.isInteger = P.isInt = function () {
      return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
    };


    /*
     * Return true if the value of this Decimal is NaN, otherwise return false.
     *
     */
    P.isNaN = function () {
      return !this.s;
    };


    /*
     * Return true if the value of this Decimal is negative, otherwise return false.
     *
     */
    P.isNegative = P.isNeg = function () {
      return this.s < 0;
    };


    /*
     * Return true if the value of this Decimal is positive, otherwise return false.
     *
     */
    P.isPositive = P.isPos = function () {
      return this.s > 0;
    };


    /*
     * Return true if the value of this Decimal is 0 or -0, otherwise return false.
     *
     */
    P.isZero = function () {
      return !!this.d && this.d[0] === 0;
    };


    /*
     * Return true if the value of this Decimal is less than `y`, otherwise return false.
     *
     */
    P.lessThan = P.lt = function (y) {
      return this.cmp(y) < 0;
    };


    /*
     * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
     *
     */
    P.lessThanOrEqualTo = P.lte = function (y) {
      return this.cmp(y) < 1;
    };


    /*
     * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * If no base is specified, return log[10](arg).
     *
     * log[base](arg) = ln(arg) / ln(base)
     *
     * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
     * otherwise:
     *
     * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
     * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
     * between the result and the correctly rounded result will be one ulp (unit in the last place).
     *
     * log[-b](a)       = NaN
     * log[0](a)        = NaN
     * log[1](a)        = NaN
     * log[NaN](a)      = NaN
     * log[Infinity](a) = NaN
     * log[b](0)        = -Infinity
     * log[b](-0)       = -Infinity
     * log[b](-a)       = NaN
     * log[b](1)        = 0
     * log[b](Infinity) = Infinity
     * log[b](NaN)      = NaN
     *
     * [base] {number|string|Decimal} The base of the logarithm.
     *
     */
    P.logarithm = P.log = function (base) {
      var isBase10, d, denominator, k, inf, num, sd, r,
        arg = this,
        Ctor = arg.constructor,
        pr = Ctor.precision,
        rm = Ctor.rounding,
        guard = 5;

      // Default base is 10.
      if (base == null) {
        base = new Ctor(10);
        isBase10 = true;
      } else {
        base = new Ctor(base);
        d = base.d;

        // Return NaN if base is negative, or non-finite, or is 0 or 1.
        if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

        isBase10 = base.eq(10);
      }

      d = arg.d;

      // Is arg negative, non-finite, 0 or 1?
      if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
      }

      // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
      // integer power of 10.
      if (isBase10) {
        if (d.length > 1) {
          inf = true;
        } else {
          for (k = d[0]; k % 10 === 0;) k /= 10;
          inf = k !== 1;
        }
      }

      external = false;
      sd = pr + guard;
      num = naturalLogarithm(arg, sd);
      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

      // The result will have 5 rounding digits.
      r = divide(num, denominator, sd, 1);

      // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
      // calculate 10 further digits.
      //
      // If the result is known to have an infinite decimal expansion, repeat this until it is clear
      // that the result is above or below the boundary. Otherwise, if after calculating the 10
      // further digits, the last 14 are nines, round up and assume the result is exact.
      // Also assume the result is exact if the last 14 are zero.
      //
      // Example of a result that will be incorrectly rounded:
      // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
      // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
      // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
      // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
      // place is still 2.6.
      if (checkRoundingDigits(r.d, k = pr, rm)) {

        do {
          sd += 10;
          num = naturalLogarithm(arg, sd);
          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
          r = divide(num, denominator, sd, 1);

          if (!inf) {

            // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
            if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
              r = finalise(r, pr + 1, 0);
            }

            break;
          }
        } while (checkRoundingDigits(r.d, k += 10, rm));
      }

      external = true;

      return finalise(r, pr, rm);
    };


    /*
     * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
     *
     * arguments {number|string|Decimal}
     *
    P.max = function () {
      Array.prototype.push.call(arguments, this);
      return maxOrMin(this.constructor, arguments, 'lt');
    };
     */


    /*
     * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
     *
     * arguments {number|string|Decimal}
     *
    P.min = function () {
      Array.prototype.push.call(arguments, this);
      return maxOrMin(this.constructor, arguments, 'gt');
    };
     */


    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     */
    P.minus = P.sub = function (y) {
      var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
        x = this,
        Ctor = x.constructor;

      y = new Ctor(y);

      // If either is not finite...
      if (!x.d || !y.d) {

        // Return NaN if either is NaN.
        if (!x.s || !y.s) y = new Ctor(NaN);

        // Return y negated if x is finite and y is ±Infinity.
        else if (x.d) y.s = -y.s;

        // Return x if y is finite and x is ±Infinity.
        // Return x if both are ±Infinity with different signs.
        // Return NaN if both are ±Infinity with the same sign.
        else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

        return y;
      }

      // If signs differ...
      if (x.s != y.s) {
        y.s = -y.s;
        return x.plus(y);
      }

      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;

      // If either is zero...
      if (!xd[0] || !yd[0]) {

        // Return y negated if x is zero and y is non-zero.
        if (yd[0]) y.s = -y.s;

        // Return x if y is zero and x is non-zero.
        else if (xd[0]) y = new Ctor(x);

        // Return zero if both are zero.
        // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
        else return new Ctor(rm === 3 ? -0 : 0);

        return external ? finalise(y, pr, rm) : y;
      }

      // x and y are finite, non-zero numbers with the same sign.

      // Calculate base 1e7 exponents.
      e = mathfloor(y.e / LOG_BASE);
      xe = mathfloor(x.e / LOG_BASE);

      xd = xd.slice();
      k = xe - e;

      // If base 1e7 exponents differ...
      if (k) {
        xLTy = k < 0;

        if (xLTy) {
          d = xd;
          k = -k;
          len = yd.length;
        } else {
          d = yd;
          e = xe;
          len = xd.length;
        }

        // Numbers with massively different exponents would result in a very high number of
        // zeros needing to be prepended, but this can be avoided while still ensuring correct
        // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

        if (k > i) {
          k = i;
          d.length = 1;
        }

        // Prepend zeros to equalise exponents.
        d.reverse();
        for (i = k; i--;) d.push(0);
        d.reverse();

      // Base 1e7 exponents equal.
      } else {

        // Check digits to determine which is the bigger number.

        i = xd.length;
        len = yd.length;
        xLTy = i < len;
        if (xLTy) len = i;

        for (i = 0; i < len; i++) {
          if (xd[i] != yd[i]) {
            xLTy = xd[i] < yd[i];
            break;
          }
        }

        k = 0;
      }

      if (xLTy) {
        d = xd;
        xd = yd;
        yd = d;
        y.s = -y.s;
      }

      len = xd.length;

      // Append zeros to `xd` if shorter.
      // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
      for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

      // Subtract yd from xd.
      for (i = yd.length; i > k;) {

        if (xd[--i] < yd[i]) {
          for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
          --xd[j];
          xd[i] += BASE;
        }

        xd[i] -= yd[i];
      }

      // Remove trailing zeros.
      for (; xd[--len] === 0;) xd.pop();

      // Remove leading zeros and adjust exponent accordingly.
      for (; xd[0] === 0; xd.shift()) --e;

      // Zero?
      if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

      y.d = xd;
      y.e = getBase10Exponent(xd, e);

      return external ? finalise(y, pr, rm) : y;
    };


    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     * The result depends on the modulo mode.
     *
     */
    P.modulo = P.mod = function (y) {
      var q,
        x = this,
        Ctor = x.constructor;

      y = new Ctor(y);

      // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
      if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

      // Return x if y is ±Infinity or x is ±0.
      if (!y.d || x.d && !x.d[0]) {
        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
      }

      // Prevent rounding of intermediate calculations.
      external = false;

      if (Ctor.modulo == 9) {

        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // result = x - q * y    where  0 <= result < abs(y)
        q = divide(x, y.abs(), 0, 3, 1);
        q.s *= y.s;
      } else {
        q = divide(x, y, 0, Ctor.modulo, 1);
      }

      q = q.times(y);

      external = true;

      return x.minus(q);
    };


    /*
     * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
     * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     */
    P.naturalExponential = P.exp = function () {
      return naturalExponential(this);
    };


    /*
     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
     * rounded to `precision` significant digits using rounding mode `rounding`.
     *
     */
    P.naturalLogarithm = P.ln = function () {
      return naturalLogarithm(this);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
     * -1.
     *
     */
    P.negated = P.neg = function () {
      var x = new this.constructor(this);
      x.s = -x.s;
      return finalise(x);
    };


    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     */
    P.plus = P.add = function (y) {
      var carry, d, e, i, k, len, pr, rm, xd, yd,
        x = this,
        Ctor = x.constructor;

      y = new Ctor(y);

      // If either is not finite...
      if (!x.d || !y.d) {

        // Return NaN if either is NaN.
        if (!x.s || !y.s) y = new Ctor(NaN);

        // Return x if y is finite and x is ±Infinity.
        // Return x if both are ±Infinity with the same sign.
        // Return NaN if both are ±Infinity with different signs.
        // Return y if x is finite and y is ±Infinity.
        else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

        return y;
      }

       // If signs differ...
      if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
      }

      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;

      // If either is zero...
      if (!xd[0] || !yd[0]) {

        // Return x if y is zero.
        // Return y if y is non-zero.
        if (!yd[0]) y = new Ctor(x);

        return external ? finalise(y, pr, rm) : y;
      }

      // x and y are finite, non-zero numbers with the same sign.

      // Calculate base 1e7 exponents.
      k = mathfloor(x.e / LOG_BASE);
      e = mathfloor(y.e / LOG_BASE);

      xd = xd.slice();
      i = k - e;

      // If base 1e7 exponents differ...
      if (i) {

        if (i < 0) {
          d = xd;
          i = -i;
          len = yd.length;
        } else {
          d = yd;
          e = k;
          len = xd.length;
        }

        // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
        k = Math.ceil(pr / LOG_BASE);
        len = k > len ? k + 1 : len + 1;

        if (i > len) {
          i = len;
          d.length = 1;
        }

        // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
        d.reverse();
        for (; i--;) d.push(0);
        d.reverse();
      }

      len = xd.length;
      i = yd.length;

      // If yd is longer than xd, swap xd and yd so xd points to the longer array.
      if (len - i < 0) {
        i = len;
        d = yd;
        yd = xd;
        xd = d;
      }

      // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
      for (carry = 0; i;) {
        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
        xd[i] %= BASE;
      }

      if (carry) {
        xd.unshift(carry);
        ++e;
      }

      // Remove trailing zeros.
      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      for (len = xd.length; xd[--len] == 0;) xd.pop();

      y.d = xd;
      y.e = getBase10Exponent(xd, e);

      return external ? finalise(y, pr, rm) : y;
    };


    /*
     * Return the number of significant digits of the value of this Decimal.
     *
     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
     *
     */
    P.precision = P.sd = function (z) {
      var k,
        x = this;

      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

      if (x.d) {
        k = getPrecision(x.d);
        if (z && x.e + 1 > k) k = x.e + 1;
      } else {
        k = NaN;
      }

      return k;
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
     * rounding mode `rounding`.
     *
     */
    P.round = function () {
      var x = this,
        Ctor = x.constructor;

      return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
    };


    /*
     * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-1, 1]
     *
     * sin(x) = x - x^3/3! + x^5/5! - ...
     *
     * sin(0)         = 0
     * sin(-0)        = -0
     * sin(Infinity)  = NaN
     * sin(-Infinity) = NaN
     * sin(NaN)       = NaN
     *
     */
    P.sine = P.sin = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite()) return new Ctor(NaN);
      if (x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;

      x = sine(Ctor, toLessThanHalfPi(Ctor, x));

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
    };


    /*
     * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     *  sqrt(-n) =  N
     *  sqrt(N)  =  N
     *  sqrt(-I) =  N
     *  sqrt(I)  =  I
     *  sqrt(0)  =  0
     *  sqrt(-0) = -0
     *
     */
    P.squareRoot = P.sqrt = function () {
      var m, n, sd, r, rep, t,
        x = this,
        d = x.d,
        e = x.e,
        s = x.s,
        Ctor = x.constructor;

      // Negative/NaN/Infinity/zero?
      if (s !== 1 || !d || !d[0]) {
        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
      }

      external = false;

      // Initial estimate.
      s = Math.sqrt(+x);

      // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
      if (s == 0 || s == 1 / 0) {
        n = digitsToString(d);

        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(n);
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new Ctor(n);
      } else {
        r = new Ctor(s.toString());
      }

      sd = (e = Ctor.precision) + 3;

      // Newton-Raphson iteration.
      for (;;) {
        t = r;
        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

        // TODO? Replace with for-loop and checkRoundingDigits.
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);

          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
          // 4999, i.e. approaching a rounding boundary, continue the iteration.
          if (n == '9999' || !rep && n == '4999') {

            // On the first iteration only, check to see if rounding up gives the exact result as the
            // nines may infinitely repeat.
            if (!rep) {
              finalise(t, e + 1, 0);

              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }

            sd += 4;
            rep = 1;
          } else {

            // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
            // If not, then there are further digits and m will be truthy.
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

              // Truncate to the first rounding digit.
              finalise(r, e + 1, 1);
              m = !r.times(r).eq(x);
            }

            break;
          }
        }
      }

      external = true;

      return finalise(r, e, Ctor.rounding, m);
    };


    /*
     * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-Infinity, Infinity]
     *
     * tan(0)         = 0
     * tan(-0)        = -0
     * tan(Infinity)  = NaN
     * tan(-Infinity) = NaN
     * tan(NaN)       = NaN
     *
     */
    P.tangent = P.tan = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite()) return new Ctor(NaN);
      if (x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 10;
      Ctor.rounding = 1;

      x = x.sin();
      x.s = 1;
      x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
    };


    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     */
    P.times = P.mul = function (y) {
      var carry, e, i, k, r, rL, t, xdL, ydL,
        x = this,
        Ctor = x.constructor,
        xd = x.d,
        yd = (y = new Ctor(y)).d;

      y.s *= x.s;

       // If either is NaN, ±Infinity or ±0...
      if (!xd || !xd[0] || !yd || !yd[0]) {

        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

          // Return NaN if either is NaN.
          // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
          ? NaN

          // Return ±Infinity if either is ±Infinity.
          // Return ±0 if either is ±0.
          : !xd || !yd ? y.s / 0 : y.s * 0);
      }

      e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
      xdL = xd.length;
      ydL = yd.length;

      // Ensure xd points to the longer array.
      if (xdL < ydL) {
        r = xd;
        xd = yd;
        yd = r;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      }

      // Initialise the result array with zeros.
      r = [];
      rL = xdL + ydL;
      for (i = rL; i--;) r.push(0);

      // Multiply!
      for (i = ydL; --i >= 0;) {
        carry = 0;
        for (k = xdL + i; k > i;) {
          t = r[k] + yd[i] * xd[k - i - 1] + carry;
          r[k--] = t % BASE | 0;
          carry = t / BASE | 0;
        }

        r[k] = (r[k] + carry) % BASE | 0;
      }

      // Remove trailing zeros.
      for (; !r[--rL];) r.pop();

      if (carry) ++e;
      else r.shift();

      y.d = r;
      y.e = getBase10Exponent(r, e);

      return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
    };


    /*
     * Return a string representing the value of this Decimal in base 2, round to `sd` significant
     * digits using rounding mode `rm`.
     *
     * If the optional `sd` argument is present then return binary exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P.toBinary = function (sd, rm) {
      return toStringBinary(this, 2, sd, rm);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
     * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
     *
     * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P.toDecimalPlaces = P.toDP = function (dp, rm) {
      var x = this,
        Ctor = x.constructor;

      x = new Ctor(x);
      if (dp === void 0) return x;

      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      return finalise(x, dp + x.e + 1, rm);
    };


    /*
     * Return a string representing the value of this Decimal in exponential notation rounded to
     * `dp` fixed decimal places using rounding mode `rounding`.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P.toExponential = function (dp, rm) {
      var str,
        x = this,
        Ctor = x.constructor;

      if (dp === void 0) {
        str = finiteToString(x, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);

        x = finalise(new Ctor(x), dp + 1, rm);
        str = finiteToString(x, true, dp + 1);
      }

      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };


    /*
     * Return a string representing the value of this Decimal in normal (fixed-point) notation to
     * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
     * omitted.
     *
     * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
     * (-0).toFixed(3) is '0.000'.
     * (-0.5).toFixed(0) is '-0'.
     *
     */
    P.toFixed = function (dp, rm) {
      var str, y,
        x = this,
        Ctor = x.constructor;

      if (dp === void 0) {
        str = finiteToString(x);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);

        y = finalise(new Ctor(x), dp + x.e + 1, rm);
        str = finiteToString(y, false, dp + y.e + 1);
      }

      // To determine whether to add the minus sign look at the value before it was rounded,
      // i.e. look at `x` rather than `y`.
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };


    /*
     * Return an array representing the value of this Decimal as a simple fraction with an integer
     * numerator and an integer denominator.
     *
     * The denominator will be a positive non-zero value less than or equal to the specified maximum
     * denominator. If a maximum denominator is not specified, the denominator will be the lowest
     * value necessary to represent the number exactly.
     *
     * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
     *
     */
    P.toFraction = function (maxD) {
      var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
        x = this,
        xd = x.d,
        Ctor = x.constructor;

      if (!xd) return new Ctor(x);

      n1 = d0 = new Ctor(1);
      d1 = n0 = new Ctor(0);

      d = new Ctor(d1);
      e = d.e = getPrecision(xd) - x.e - 1;
      k = e % LOG_BASE;
      d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

      if (maxD == null) {

        // d is 10**e, the minimum max-denominator needed.
        maxD = e > 0 ? d : n1;
      } else {
        n = new Ctor(maxD);
        if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
        maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
      }

      external = false;
      n = new Ctor(digitsToString(xd));
      pr = Ctor.precision;
      Ctor.precision = e = xd.length * LOG_BASE * 2;

      for (;;)  {
        q = divide(n, d, 0, 1, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.cmp(maxD) == 1) break;
        d0 = d1;
        d1 = d2;
        d2 = n1;
        n1 = n0.plus(q.times(d2));
        n0 = d2;
        d2 = d;
        d = n.minus(q.times(d2));
        n = d2;
      }

      d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;

      // Determine which fraction is closer to x, n0/d0 or n1/d1?
      r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
          ? [n1, d1] : [n0, d0];

      Ctor.precision = pr;
      external = true;

      return r;
    };


    /*
     * Return a string representing the value of this Decimal in base 16, round to `sd` significant
     * digits using rounding mode `rm`.
     *
     * If the optional `sd` argument is present then return binary exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P.toHexadecimal = P.toHex = function (sd, rm) {
      return toStringBinary(this, 16, sd, rm);
    };


    /*
     * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
     * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
     *
     * The return value will always have the same sign as this Decimal, unless either this Decimal
     * or `y` is NaN, in which case the return value will be also be NaN.
     *
     * The return value is not affected by the value of `precision`.
     *
     * y {number|string|Decimal} The magnitude to round to a multiple of.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * 'toNearest() rounding mode not an integer: {rm}'
     * 'toNearest() rounding mode out of range: {rm}'
     *
     */
    P.toNearest = function (y, rm) {
      var x = this,
        Ctor = x.constructor;

      x = new Ctor(x);

      if (y == null) {

        // If x is not finite, return x.
        if (!x.d) return x;

        y = new Ctor(1);
        rm = Ctor.rounding;
      } else {
        y = new Ctor(y);
        if (rm === void 0) {
          rm = Ctor.rounding;
        } else {
          checkInt32(rm, 0, 8);
        }

        // If x is not finite, return x if y is not NaN, else NaN.
        if (!x.d) return y.s ? x : y;

        // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
        if (!y.d) {
          if (y.s) y.s = x.s;
          return y;
        }
      }

      // If y is not zero, calculate the nearest multiple of y to x.
      if (y.d[0]) {
        external = false;
        x = divide(x, y, 0, rm, 1).times(y);
        external = true;
        finalise(x);

      // If y is zero, return zero with the sign of x.
      } else {
        y.s = x.s;
        x = y;
      }

      return x;
    };


    /*
     * Return the value of this Decimal converted to a number primitive.
     * Zero keeps its sign.
     *
     */
    P.toNumber = function () {
      return +this;
    };


    /*
     * Return a string representing the value of this Decimal in base 8, round to `sd` significant
     * digits using rounding mode `rm`.
     *
     * If the optional `sd` argument is present then return binary exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P.toOctal = function (sd, rm) {
      return toStringBinary(this, 8, sd, rm);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
     * to `precision` significant digits using rounding mode `rounding`.
     *
     * ECMAScript compliant.
     *
     *   pow(x, NaN)                           = NaN
     *   pow(x, ±0)                            = 1

     *   pow(NaN, non-zero)                    = NaN
     *   pow(abs(x) > 1, +Infinity)            = +Infinity
     *   pow(abs(x) > 1, -Infinity)            = +0
     *   pow(abs(x) == 1, ±Infinity)           = NaN
     *   pow(abs(x) < 1, +Infinity)            = +0
     *   pow(abs(x) < 1, -Infinity)            = +Infinity
     *   pow(+Infinity, y > 0)                 = +Infinity
     *   pow(+Infinity, y < 0)                 = +0
     *   pow(-Infinity, odd integer > 0)       = -Infinity
     *   pow(-Infinity, even integer > 0)      = +Infinity
     *   pow(-Infinity, odd integer < 0)       = -0
     *   pow(-Infinity, even integer < 0)      = +0
     *   pow(+0, y > 0)                        = +0
     *   pow(+0, y < 0)                        = +Infinity
     *   pow(-0, odd integer > 0)              = -0
     *   pow(-0, even integer > 0)             = +0
     *   pow(-0, odd integer < 0)              = -Infinity
     *   pow(-0, even integer < 0)             = +Infinity
     *   pow(finite x < 0, finite non-integer) = NaN
     *
     * For non-integer or very large exponents pow(x, y) is calculated using
     *
     *   x^y = exp(y*ln(x))
     *
     * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
     * probability of an incorrectly rounded result
     * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
     * i.e. 1 in 250,000,000,000,000
     *
     * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
     *
     * y {number|string|Decimal} The power to which to raise this Decimal.
     *
     */
    P.toPower = P.pow = function (y) {
      var e, k, pr, r, rm, s,
        x = this,
        Ctor = x.constructor,
        yn = +(y = new Ctor(y));

      // Either ±Infinity, NaN or ±0?
      if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

      x = new Ctor(x);

      if (x.eq(1)) return x;

      pr = Ctor.precision;
      rm = Ctor.rounding;

      if (y.eq(1)) return finalise(x, pr, rm);

      // y exponent
      e = mathfloor(y.e / LOG_BASE);

      // If y is a small integer use the 'exponentiation by squaring' algorithm.
      if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r = intPow(Ctor, x, k, pr);
        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
      }

      s = x.s;

      // if x is negative
      if (s < 0) {

        // if y is not an integer
        if (e < y.d.length - 1) return new Ctor(NaN);

        // Result is positive if x is negative and the last digit of integer y is even.
        if ((y.d[e] & 1) == 0) s = 1;

        // if x.eq(-1)
        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
          x.s = s;
          return x;
        }
      }

      // Estimate result exponent.
      // x^y = 10^e,  where e = y * log10(x)
      // log10(x) = log10(x_significand) + x_exponent
      // log10(x_significand) = ln(x_significand) / ln(10)
      k = mathpow(+x, yn);
      e = k == 0 || !isFinite(k)
        ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
        : new Ctor(k + '').e;

      // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

      // Overflow/underflow?
      if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

      external = false;
      Ctor.rounding = x.s = 1;

      // Estimate the extra guard digits needed to ensure five correct rounding digits from
      // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
      // new Decimal(2.32456).pow('2087987436534566.46411')
      // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
      k = Math.min(12, (e + '').length);

      // r = x^y = exp(y*ln(x))
      r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

      // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
      if (r.d) {

        // Truncate to the required precision plus five rounding digits.
        r = finalise(r, pr + 5, 1);

        // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
        // the result.
        if (checkRoundingDigits(r.d, pr, rm)) {
          e = pr + 10;

          // Truncate to the increased precision plus five rounding digits.
          r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

          // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
          if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }
        }
      }

      r.s = s;
      external = true;
      Ctor.rounding = rm;

      return finalise(r, pr, rm);
    };


    /*
     * Return a string representing the value of this Decimal rounded to `sd` significant digits
     * using rounding mode `rounding`.
     *
     * Return exponential notation if `sd` is less than the number of digits necessary to represent
     * the integer part of the value in normal notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P.toPrecision = function (sd, rm) {
      var str,
        x = this,
        Ctor = x.constructor;

      if (sd === void 0) {
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      } else {
        checkInt32(sd, 1, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);

        x = finalise(new Ctor(x), sd, rm);
        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
      }

      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
     * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
     * omitted.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * 'toSD() digits out of range: {sd}'
     * 'toSD() digits not an integer: {sd}'
     * 'toSD() rounding mode not an integer: {rm}'
     * 'toSD() rounding mode out of range: {rm}'
     *
     */
    P.toSignificantDigits = P.toSD = function (sd, rm) {
      var x = this,
        Ctor = x.constructor;

      if (sd === void 0) {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd, 1, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
      }

      return finalise(new Ctor(x), sd, rm);
    };


    /*
     * Return a string representing the value of this Decimal.
     *
     * Return exponential notation if this Decimal has a positive exponent equal to or greater than
     * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
     *
     */
    P.toString = function () {
      var x = this,
        Ctor = x.constructor,
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
     *
     */
    P.truncated = P.trunc = function () {
      return finalise(new this.constructor(this), this.e + 1, 1);
    };


    /*
     * Return a string representing the value of this Decimal.
     * Unlike `toString`, negative zero will include the minus sign.
     *
     */
    P.valueOf = P.toJSON = function () {
      var x = this,
        Ctor = x.constructor,
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

      return x.isNeg() ? '-' + str : str;
    };


    // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


    /*
     *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
     *                           finiteToString, naturalExponential, naturalLogarithm
     *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
     *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
     *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
     *  convertBase              toStringBinary, parseOther
     *  cos                      P.cos
     *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
     *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
     *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
     *                           taylorSeries, atan2, parseOther
     *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
     *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
     *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
     *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
     *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
     *                           P.truncated, divide, getLn10, getPi, naturalExponential,
     *                           naturalLogarithm, ceil, floor, round, trunc
     *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
     *                           toStringBinary
     *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
     *  getLn10                  P.logarithm, naturalLogarithm
     *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
     *  getPrecision             P.precision, P.toFraction
     *  getZeroString            digitsToString, finiteToString
     *  intPow                   P.toPower, parseOther
     *  isOdd                    toLessThanHalfPi
     *  maxOrMin                 max, min
     *  naturalExponential       P.naturalExponential, P.toPower
     *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
     *                           P.toPower, naturalExponential
     *  nonFiniteToString        finiteToString, toStringBinary
     *  parseDecimal             Decimal
     *  parseOther               Decimal
     *  sin                      P.sin
     *  taylorSeries             P.cosh, P.sinh, cos, sin
     *  toLessThanHalfPi         P.cos, P.sin
     *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
     *  truncate                 intPow
     *
     *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
     *                           naturalLogarithm, config, parseOther, random, Decimal
     */


    function digitsToString(d) {
      var i, k, ws,
        indexOfLastWord = d.length - 1,
        str = '',
        w = d[0];

      if (indexOfLastWord > 0) {
        str += w;
        for (i = 1; i < indexOfLastWord; i++) {
          ws = d[i] + '';
          k = LOG_BASE - ws.length;
          if (k) str += getZeroString(k);
          str += ws;
        }

        w = d[i];
        ws = w + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
      } else if (w === 0) {
        return '0';
      }

      // Remove trailing zeros of last w.
      for (; w % 10 === 0;) w /= 10;

      return str + w;
    }


    function checkInt32(i, min, max) {
      if (i !== ~~i || i < min || i > max) {
        throw Error(invalidArgument + i);
      }
    }


    /*
     * Check 5 rounding digits if `repeating` is null, 4 otherwise.
     * `repeating == null` if caller is `log` or `pow`,
     * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
     */
    function checkRoundingDigits(d, i, rm, repeating) {
      var di, k, r, rd;

      // Get the length of the first word of the array d.
      for (k = d[0]; k >= 10; k /= 10) --i;

      // Is the rounding digit in the first word of d?
      if (--i < 0) {
        i += LOG_BASE;
        di = 0;
      } else {
        di = Math.ceil((i + 1) / LOG_BASE);
        i %= LOG_BASE;
      }

      // i is the index (0 - 6) of the rounding digit.
      // E.g. if within the word 3487563 the first rounding digit is 5,
      // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
      k = mathpow(10, LOG_BASE - i);
      rd = d[di] % k | 0;

      if (repeating == null) {
        if (i < 3) {
          if (i == 0) rd = rd / 100 | 0;
          else if (i == 1) rd = rd / 10 | 0;
          r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
        } else {
          r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
            (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
              (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
        }
      } else {
        if (i < 4) {
          if (i == 0) rd = rd / 1000 | 0;
          else if (i == 1) rd = rd / 100 | 0;
          else if (i == 2) rd = rd / 10 | 0;
          r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
        } else {
          r = ((repeating || rm < 4) && rd + 1 == k ||
          (!repeating && rm > 3) && rd + 1 == k / 2) &&
            (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
        }
      }

      return r;
    }


    // Convert string of `baseIn` to an array of numbers of `baseOut`.
    // Eg. convertBase('255', 10, 16) returns [15, 15].
    // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
    function convertBase(str, baseIn, baseOut) {
      var j,
        arr = [0],
        arrL,
        i = 0,
        strL = str.length;

      for (; i < strL;) {
        for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
        arr[0] += NUMERALS.indexOf(str.charAt(i++));
        for (j = 0; j < arr.length; j++) {
          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] === void 0) arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }

      return arr.reverse();
    }


    /*
     * cos(x) = 1 - x^2/2! + x^4/4! - ...
     * |x| < pi/2
     *
     */
    function cosine(Ctor, x) {
      var k, len, y;

      if (x.isZero()) return x;

      // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
      // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

      // Estimate the optimum number of times to use the argument reduction.
      len = x.d.length;
      if (len < 32) {
        k = Math.ceil(len / 3);
        y = (1 / tinyPow(4, k)).toString();
      } else {
        k = 16;
        y = '2.3283064365386962890625e-10';
      }

      Ctor.precision += k;

      x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

      // Reverse argument reduction
      for (var i = k; i--;) {
        var cos2x = x.times(x);
        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
      }

      Ctor.precision -= k;

      return x;
    }


    /*
     * Perform division in the specified base.
     */
    var divide = (function () {

      // Assumes non-zero x and k, and hence non-zero result.
      function multiplyInteger(x, k, base) {
        var temp,
          carry = 0,
          i = x.length;

        for (x = x.slice(); i--;) {
          temp = x[i] * k + carry;
          x[i] = temp % base | 0;
          carry = temp / base | 0;
        }

        if (carry) x.unshift(carry);

        return x;
      }

      function compare(a, b, aL, bL) {
        var i, r;

        if (aL != bL) {
          r = aL > bL ? 1 : -1;
        } else {
          for (i = r = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              r = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return r;
      }

      function subtract(a, b, aL, base) {
        var i = 0;

        // Subtract b from a.
        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }

        // Remove leading zeros.
        for (; !a[0] && a.length > 1;) a.shift();
      }

      return function (x, y, pr, rm, dp, base) {
        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
          yL, yz,
          Ctor = x.constructor,
          sign = x.s == y.s ? 1 : -1,
          xd = x.d,
          yd = y.d;

        // Either NaN, Infinity or 0?
        if (!xd || !xd[0] || !yd || !yd[0]) {

          return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
            !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

            // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
            xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
        }

        if (base) {
          logBase = 1;
          e = x.e - y.e;
        } else {
          base = BASE;
          logBase = LOG_BASE;
          e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
        }

        yL = yd.length;
        xL = xd.length;
        q = new Ctor(sign);
        qd = q.d = [];

        // Result exponent may be one less than e.
        // The digit array of a Decimal from toStringBinary may have trailing zeros.
        for (i = 0; yd[i] == (xd[i] || 0); i++);

        if (yd[i] > (xd[i] || 0)) e--;

        if (pr == null) {
          sd = pr = Ctor.precision;
          rm = Ctor.rounding;
        } else if (dp) {
          sd = pr + (x.e - y.e) + 1;
        } else {
          sd = pr;
        }

        if (sd < 0) {
          qd.push(1);
          more = true;
        } else {

          // Convert precision in number of base 10 digits to base 1e7 digits.
          sd = sd / logBase + 2 | 0;
          i = 0;

          // divisor < 1e7
          if (yL == 1) {
            k = 0;
            yd = yd[0];
            sd++;

            // k is the carry.
            for (; (i < xL || k) && sd--; i++) {
              t = k * base + (xd[i] || 0);
              qd[i] = t / yd | 0;
              k = t % yd | 0;
            }

            more = k || i < xL;

          // divisor >= 1e7
          } else {

            // Normalise xd and yd so highest order digit of yd is >= base/2
            k = base / (yd[0] + 1) | 0;

            if (k > 1) {
              yd = multiplyInteger(yd, k, base);
              xd = multiplyInteger(xd, k, base);
              yL = yd.length;
              xL = xd.length;
            }

            xi = yL;
            rem = xd.slice(0, yL);
            remL = rem.length;

            // Add zeros to make remainder as long as divisor.
            for (; remL < yL;) rem[remL++] = 0;

            yz = yd.slice();
            yz.unshift(0);
            yd0 = yd[0];

            if (yd[1] >= base / 2) ++yd0;

            do {
              k = 0;

              // Compare divisor and remainder.
              cmp = compare(yd, rem, yL, remL);

              // If divisor < remainder.
              if (cmp < 0) {

                // Calculate trial digit, k.
                rem0 = rem[0];
                if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                // k will be how many times the divisor goes into the current remainder.
                k = rem0 / yd0 | 0;

                //  Algorithm:
                //  1. product = divisor * trial digit (k)
                //  2. if product > remainder: product -= divisor, k--
                //  3. remainder -= product
                //  4. if product was < remainder at 2:
                //    5. compare new remainder and divisor
                //    6. If remainder > divisor: remainder -= divisor, k++

                if (k > 1) {
                  if (k >= base) k = base - 1;

                  // product = divisor * trial digit.
                  prod = multiplyInteger(yd, k, base);
                  prodL = prod.length;
                  remL = rem.length;

                  // Compare product and remainder.
                  cmp = compare(prod, rem, prodL, remL);

                  // product > remainder.
                  if (cmp == 1) {
                    k--;

                    // Subtract divisor from product.
                    subtract(prod, yL < prodL ? yz : yd, prodL, base);
                  }
                } else {

                  // cmp is -1.
                  // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                  // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                  if (k == 0) cmp = k = 1;
                  prod = yd.slice();
                }

                prodL = prod.length;
                if (prodL < remL) prod.unshift(0);

                // Subtract product from remainder.
                subtract(rem, prod, remL, base);

                // If product was < previous remainder.
                if (cmp == -1) {
                  remL = rem.length;

                  // Compare divisor and new remainder.
                  cmp = compare(yd, rem, yL, remL);

                  // If divisor < new remainder, subtract divisor from remainder.
                  if (cmp < 1) {
                    k++;

                    // Subtract divisor from remainder.
                    subtract(rem, yL < remL ? yz : yd, remL, base);
                  }
                }

                remL = rem.length;
              } else if (cmp === 0) {
                k++;
                rem = [0];
              }    // if cmp === 1, k will be 0

              // Add the next digit, k, to the result array.
              qd[i++] = k;

              // Update the remainder.
              if (cmp && rem[0]) {
                rem[remL++] = xd[xi] || 0;
              } else {
                rem = [xd[xi]];
                remL = 1;
              }

            } while ((xi++ < xL || rem[0] !== void 0) && sd--);

            more = rem[0] !== void 0;
          }

          // Leading zero?
          if (!qd[0]) qd.shift();
        }

        // logBase is 1 when divide is being used for base conversion.
        if (logBase == 1) {
          q.e = e;
          inexact = more;
        } else {

          // To calculate q.e, first get the number of digits of qd[0].
          for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
          q.e = i + e * logBase - 1;

          finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
        }

        return q;
      };
    })();


    /*
     * Round `x` to `sd` significant digits using rounding mode `rm`.
     * Check for over/under-flow.
     */
     function finalise(x, sd, rm, isTruncated) {
      var digits, i, j, k, rd, roundUp, w, xd, xdi,
        Ctor = x.constructor;

      // Don't round if sd is null or undefined.
      out: if (sd != null) {
        xd = x.d;

        // Infinity/NaN.
        if (!xd) return x;

        // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
        // w: the word of xd containing rd, a base 1e7 number.
        // xdi: the index of w within xd.
        // digits: the number of digits of w.
        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
        // they had leading zeros)
        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

        // Get the length of the first word of the digits array xd.
        for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
        i = sd - digits;

        // Is the rounding digit in the first word of xd?
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          w = xd[xdi = 0];

          // Get the rounding digit at index j of w.
          rd = w / mathpow(10, digits - j - 1) % 10 | 0;
        } else {
          xdi = Math.ceil((i + 1) / LOG_BASE);
          k = xd.length;
          if (xdi >= k) {
            if (isTruncated) {

              // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
              for (; k++ <= xdi;) xd.push(0);
              w = rd = 0;
              digits = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            w = k = xd[xdi];

            // Get the number of digits of w.
            for (digits = 1; k >= 10; k /= 10) digits++;

            // Get the index of rd within w.
            i %= LOG_BASE;

            // Get the index of rd within w, adjusted for leading zeros.
            // The number of leading zeros of w is given by LOG_BASE - digits.
            j = i - LOG_BASE + digits;

            // Get the rounding digit at index j of w.
            rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
          }
        }

        // Are there any non-zero digits after the rounding digit?
        isTruncated = isTruncated || sd < 0 ||
          xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

        // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
        // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
        // will give 714.

        roundUp = rm < 4
          ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
          : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

            // Check whether the digit to the left of the rounding digit is odd.
            ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
              rm == (x.s < 0 ? 8 : 7));

        if (sd < 1 || !xd[0]) {
          xd.length = 0;
          if (roundUp) {

            // Convert sd to decimal places.
            sd -= x.e + 1;

            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
            x.e = -sd || 0;
          } else {

            // Zero.
            xd[0] = x.e = 0;
          }

          return x;
        }

        // Remove excess digits.
        if (i == 0) {
          xd.length = xdi;
          k = 1;
          xdi--;
        } else {
          xd.length = xdi + 1;
          k = mathpow(10, LOG_BASE - i);

          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
          // j > 0 means i > number of leading zeros of w.
          xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
        }

        if (roundUp) {
          for (;;) {

            // Is the digit to be rounded up in the first word of xd?
            if (xdi == 0) {

              // i will be the length of xd[0] before k is added.
              for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
              j = xd[0] += k;
              for (k = 1; j >= 10; j /= 10) k++;

              // if i != k the length has increased.
              if (i != k) {
                x.e++;
                if (xd[0] == BASE) xd[0] = 1;
              }

              break;
            } else {
              xd[xdi] += k;
              if (xd[xdi] != BASE) break;
              xd[xdi--] = 0;
              k = 1;
            }
          }
        }

        // Remove trailing zeros.
        for (i = xd.length; xd[--i] === 0;) xd.pop();
      }

      if (external) {

        // Overflow?
        if (x.e > Ctor.maxE) {

          // Infinity.
          x.d = null;
          x.e = NaN;

        // Underflow?
        } else if (x.e < Ctor.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
          // Ctor.underflow = true;
        } // else Ctor.underflow = false;
      }

      return x;
    }


    function finiteToString(x, isExp, sd) {
      if (!x.isFinite()) return nonFiniteToString(x);
      var k,
        e = x.e,
        str = digitsToString(x.d),
        len = str.length;

      if (isExp) {
        if (sd && (k = sd - len) > 0) {
          str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
        } else if (len > 1) {
          str = str.charAt(0) + '.' + str.slice(1);
        }

        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
      } else if (e < 0) {
        str = '0.' + getZeroString(-e - 1) + str;
        if (sd && (k = sd - len) > 0) str += getZeroString(k);
      } else if (e >= len) {
        str += getZeroString(e + 1 - len);
        if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
      } else {
        if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
        if (sd && (k = sd - len) > 0) {
          if (e + 1 === len) str += '.';
          str += getZeroString(k);
        }
      }

      return str;
    }


    // Calculate the base 10 exponent from the base 1e7 exponent.
    function getBase10Exponent(digits, e) {
      var w = digits[0];

      // Add the number of digits of the first word of the digits array.
      for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
      return e;
    }


    function getLn10(Ctor, sd, pr) {
      if (sd > LN10_PRECISION) {

        // Reset global state in case the exception is caught.
        external = true;
        if (pr) Ctor.precision = pr;
        throw Error(precisionLimitExceeded);
      }
      return finalise(new Ctor(LN10), sd, 1, true);
    }


    function getPi(Ctor, sd, rm) {
      if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
      return finalise(new Ctor(PI), sd, rm, true);
    }


    function getPrecision(digits) {
      var w = digits.length - 1,
        len = w * LOG_BASE + 1;

      w = digits[w];

      // If non-zero...
      if (w) {

        // Subtract the number of trailing zeros of the last word.
        for (; w % 10 == 0; w /= 10) len--;

        // Add the number of digits of the first word.
        for (w = digits[0]; w >= 10; w /= 10) len++;
      }

      return len;
    }


    function getZeroString(k) {
      var zs = '';
      for (; k--;) zs += '0';
      return zs;
    }


    /*
     * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
     * integer of type number.
     *
     * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
     *
     */
    function intPow(Ctor, x, n, pr) {
      var isTruncated,
        r = new Ctor(1),

        // Max n of 9007199254740991 takes 53 loop iterations.
        // Maximum digits array length; leaves [28, 34] guard digits.
        k = Math.ceil(pr / LOG_BASE + 4);

      external = false;

      for (;;) {
        if (n % 2) {
          r = r.times(x);
          if (truncate(r.d, k)) isTruncated = true;
        }

        n = mathfloor(n / 2);
        if (n === 0) {

          // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
          n = r.d.length - 1;
          if (isTruncated && r.d[n] === 0) ++r.d[n];
          break;
        }

        x = x.times(x);
        truncate(x.d, k);
      }

      external = true;

      return r;
    }


    function isOdd(n) {
      return n.d[n.d.length - 1] & 1;
    }


    /*
     * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
     */
    function maxOrMin(Ctor, args, ltgt) {
      var y,
        x = new Ctor(args[0]),
        i = 0;

      for (; ++i < args.length;) {
        y = new Ctor(args[i]);
        if (!y.s) {
          x = y;
          break;
        } else if (x[ltgt](y)) {
          x = y;
        }
      }

      return x;
    }


    /*
     * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
     * digits.
     *
     * Taylor/Maclaurin series.
     *
     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
     *
     * Argument reduction:
     *   Repeat x = x / 32, k += 5, until |x| < 0.1
     *   exp(x) = exp(x / 2^k)^(2^k)
     *
     * Previously, the argument was initially reduced by
     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
     * found to be slower than just dividing repeatedly by 32 as above.
     *
     * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
     * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
     * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
     *
     *  exp(Infinity)  = Infinity
     *  exp(-Infinity) = 0
     *  exp(NaN)       = NaN
     *  exp(±0)        = 1
     *
     *  exp(x) is non-terminating for any finite, non-zero x.
     *
     *  The result will always be correctly rounded.
     *
     */
    function naturalExponential(x, sd) {
      var denominator, guard, j, pow, sum, t, wpr,
        rep = 0,
        i = 0,
        k = 0,
        Ctor = x.constructor,
        rm = Ctor.rounding,
        pr = Ctor.precision;

      // 0/NaN/Infinity?
      if (!x.d || !x.d[0] || x.e > 17) {

        return new Ctor(x.d
          ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
          : x.s ? x.s < 0 ? 0 : x : 0 / 0);
      }

      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }

      t = new Ctor(0.03125);

      // while abs(x) >= 0.1
      while (x.e > -2) {

        // x = x / 2^5
        x = x.times(t);
        k += 5;
      }

      // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
      // necessary to ensure the first 4 rounding digits are correct.
      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow = sum = new Ctor(1);
      Ctor.precision = wpr;

      for (;;) {
        pow = finalise(pow.times(x), wpr, 1);
        denominator = denominator.times(++i);
        t = sum.plus(divide(pow, denominator, wpr, 1));

        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          j = k;
          while (j--) sum = finalise(sum.times(sum), wpr, 1);

          // Check to see if the first 4 rounding digits are [49]999.
          // If so, repeat the summation with a higher precision, otherwise
          // e.g. with precision: 18, rounding: 1
          // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
          // `wpr - guard` is the index of first rounding digit.
          if (sd == null) {

            if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += 10;
              denominator = pow = t = new Ctor(1);
              i = 0;
              rep++;
            } else {
              return finalise(sum, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum;
          }
        }

        sum = t;
      }
    }


    /*
     * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
     * digits.
     *
     *  ln(-n)        = NaN
     *  ln(0)         = -Infinity
     *  ln(-0)        = -Infinity
     *  ln(1)         = 0
     *  ln(Infinity)  = Infinity
     *  ln(-Infinity) = NaN
     *  ln(NaN)       = NaN
     *
     *  ln(n) (n != 1) is non-terminating.
     *
     */
    function naturalLogarithm(y, sd) {
      var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
        n = 1,
        guard = 10,
        x = y,
        xd = x.d,
        Ctor = x.constructor,
        rm = Ctor.rounding,
        pr = Ctor.precision;

      // Is x negative or Infinity, NaN, 0 or 1?
      if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
      }

      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }

      Ctor.precision = wpr += guard;
      c = digitsToString(xd);
      c0 = c.charAt(0);

      if (Math.abs(e = x.e) < 1.5e15) {

        // Argument reduction.
        // The series converges faster the closer the argument is to 1, so using
        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
        // later be divided by this number, then separate out the power of 10 using
        // ln(a*10^b) = ln(a) + b*ln(10).

        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
        // max n is 6 (gives 0.7 - 1.3)
        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
          x = x.times(y);
          c = digitsToString(x.d);
          c0 = c.charAt(0);
          n++;
        }

        e = x.e;

        if (c0 > 1) {
          x = new Ctor('0.' + c);
          e++;
        } else {
          x = new Ctor(c0 + '.' + c.slice(1));
        }
      } else {

        // The argument reduction method above may result in overflow if the argument y is a massive
        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
        // function using ln(x*10^e) = ln(x) + e*ln(10).
        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
        x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
        Ctor.precision = pr;

        return sd == null ? finalise(x, pr, rm, external = true) : x;
      }

      // x1 is x reduced to a value near 1.
      x1 = x;

      // Taylor series.
      // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
      // where x = (y - 1)/(y + 1)    (|x| < 1)
      sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
      x2 = finalise(x.times(x), wpr, 1);
      denominator = 3;

      for (;;) {
        numerator = finalise(numerator.times(x2), wpr, 1);
        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          sum = sum.times(2);

          // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
          // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
          if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
          sum = divide(sum, new Ctor(n), wpr, 1);

          // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
          // been repeated previously) and the first 4 rounding digits 9999?
          // If so, restart the summation with a higher precision, otherwise
          // e.g. with precision: 12, rounding: 1
          // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
          // `wpr - guard` is the index of first rounding digit.
          if (sd == null) {
            if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += guard;
              t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
              x2 = finalise(x.times(x), wpr, 1);
              denominator = rep = 1;
            } else {
              return finalise(sum, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum;
          }
        }

        sum = t;
        denominator += 2;
      }
    }


    // ±Infinity, NaN.
    function nonFiniteToString(x) {
      // Unsigned.
      return String(x.s * x.s / 0);
    }


    /*
     * Parse the value of a new Decimal `x` from string `str`.
     */
    function parseDecimal(x, str) {
      var e, i, len;

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

      // Exponential form?
      if ((i = str.search(/e/i)) > 0) {

        // Determine exponent.
        if (e < 0) e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {

        // Integer.
        e = str.length;
      }

      // Determine leading zeros.
      for (i = 0; str.charCodeAt(i) === 48; i++);

      // Determine trailing zeros.
      for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
      str = str.slice(i, len);

      if (str) {
        len -= i;
        x.e = e = e - i - 1;
        x.d = [];

        // Transform base

        // e is the base 10 exponent.
        // i is where to slice str to get the first word of the digits array.
        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;

        if (i < len) {
          if (i) x.d.push(+str.slice(0, i));
          for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
          str = str.slice(i);
          i = LOG_BASE - str.length;
        } else {
          i -= len;
        }

        for (; i--;) str += '0';
        x.d.push(+str);

        if (external) {

          // Overflow?
          if (x.e > x.constructor.maxE) {

            // Infinity.
            x.d = null;
            x.e = NaN;

          // Underflow?
          } else if (x.e < x.constructor.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
            // x.constructor.underflow = true;
          } // else x.constructor.underflow = false;
        }
      } else {

        // Zero.
        x.e = 0;
        x.d = [0];
      }

      return x;
    }


    /*
     * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
     */
    function parseOther(x, str) {
      var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

      if (str.indexOf('_') > -1) {
        str = str.replace(/(\d)_(?=\d)/g, '$1');
        if (isDecimal.test(str)) return parseDecimal(x, str);
      } else if (str === 'Infinity' || str === 'NaN') {
        if (!+str) x.s = NaN;
        x.e = NaN;
        x.d = null;
        return x;
      }

      if (isHex.test(str))  {
        base = 16;
        str = str.toLowerCase();
      } else if (isBinary.test(str))  {
        base = 2;
      } else if (isOctal.test(str))  {
        base = 8;
      } else {
        throw Error(invalidArgument + str);
      }

      // Is there a binary exponent part?
      i = str.search(/p/i);

      if (i > 0) {
        p = +str.slice(i + 1);
        str = str.substring(2, i);
      } else {
        str = str.slice(2);
      }

      // Convert `str` as an integer then divide the result by `base` raised to a power such that the
      // fraction part will be restored.
      i = str.indexOf('.');
      isFloat = i >= 0;
      Ctor = x.constructor;

      if (isFloat) {
        str = str.replace('.', '');
        len = str.length;
        i = len - i;

        // log[10](16) = 1.2041... , log[10](88) = 1.9444....
        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
      }

      xd = convertBase(str, base, BASE);
      xe = xd.length - 1;

      // Remove trailing zeros.
      for (i = xe; xd[i] === 0; --i) xd.pop();
      if (i < 0) return new Ctor(x.s * 0);
      x.e = getBase10Exponent(xd, xe);
      x.d = xd;
      external = false;

      // At what precision to perform the division to ensure exact conversion?
      // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
      // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
      // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
      // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
      // Therefore using 4 * the number of digits of str will always be enough.
      if (isFloat) x = divide(x, divisor, len * 4);

      // Multiply by the binary exponent part if present.
      if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
      external = true;

      return x;
    }


    /*
     * sin(x) = x - x^3/3! + x^5/5! - ...
     * |x| < pi/2
     *
     */
    function sine(Ctor, x) {
      var k,
        len = x.d.length;

      if (len < 3) {
        return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
      }

      // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
      // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
      // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;

      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x);

      // Reverse argument reduction
      var sin2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);
      for (; k--;) {
        sin2_x = x.times(x);
        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
      }

      return x;
    }


    // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
    function taylorSeries(Ctor, n, x, y, isHyperbolic) {
      var j, t, u, x2,
        pr = Ctor.precision,
        k = Math.ceil(pr / LOG_BASE);

      external = false;
      x2 = x.times(x);
      u = new Ctor(y);

      for (;;) {
        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
        u = isHyperbolic ? y.plus(t) : y.minus(t);
        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
        t = u.plus(y);

        if (t.d[k] !== void 0) {
          for (j = k; t.d[j] === u.d[j] && j--;);
          if (j == -1) break;
        }

        j = u;
        u = y;
        y = t;
        t = j;
      }

      external = true;
      t.d.length = k + 1;

      return t;
    }


    // Exponent e must be positive and non-zero.
    function tinyPow(b, e) {
      var n = b;
      while (--e) n *= b;
      return n;
    }


    // Return the absolute value of `x` reduced to less than or equal to half pi.
    function toLessThanHalfPi(Ctor, x) {
      var t,
        isNeg = x.s < 0,
        pi = getPi(Ctor, Ctor.precision, 1),
        halfPi = pi.times(0.5);

      x = x.abs();

      if (x.lte(halfPi)) {
        quadrant = isNeg ? 4 : 1;
        return x;
      }

      t = x.divToInt(pi);

      if (t.isZero()) {
        quadrant = isNeg ? 3 : 2;
      } else {
        x = x.minus(t.times(pi));

        // 0 <= x < pi
        if (x.lte(halfPi)) {
          quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
          return x;
        }

        quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
      }

      return x.minus(pi).abs();
    }


    /*
     * Return the value of Decimal `x` as a string in base `baseOut`.
     *
     * If the optional `sd` argument is present include a binary exponent suffix.
     */
    function toStringBinary(x, baseOut, sd, rm) {
      var base, e, i, k, len, roundUp, str, xd, y,
        Ctor = x.constructor,
        isExp = sd !== void 0;

      if (isExp) {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
      } else {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      }

      if (!x.isFinite()) {
        str = nonFiniteToString(x);
      } else {
        str = finiteToString(x);
        i = str.indexOf('.');

        // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
        // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
        // minBinaryExponent = floor(decimalExponent * log[2](10))
        // log[2](10) = 3.321928094887362347870319429489390175864

        if (isExp) {
          base = 2;
          if (baseOut == 16) {
            sd = sd * 4 - 3;
          } else if (baseOut == 8) {
            sd = sd * 3 - 2;
          }
        } else {
          base = baseOut;
        }

        // Convert the number as an integer then divide the result by its base raised to a power such
        // that the fraction part will be restored.

        // Non-integer.
        if (i >= 0) {
          str = str.replace('.', '');
          y = new Ctor(1);
          y.e = str.length - i;
          y.d = convertBase(finiteToString(y), 10, base);
          y.e = y.d.length;
        }

        xd = convertBase(str, 10, base);
        e = len = xd.length;

        // Remove trailing zeros.
        for (; xd[--len] == 0;) xd.pop();

        if (!xd[0]) {
          str = isExp ? '0p+0' : '0';
        } else {
          if (i < 0) {
            e--;
          } else {
            x = new Ctor(x);
            x.d = xd;
            x.e = e;
            x = divide(x, y, sd, rm, 0, base);
            xd = x.d;
            e = x.e;
            roundUp = inexact;
          }

          // The rounding digit, i.e. the digit after the digit that may be rounded up.
          i = xd[sd];
          k = base / 2;
          roundUp = roundUp || xd[sd + 1] !== void 0;

          roundUp = rm < 4
            ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
            : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
              rm === (x.s < 0 ? 8 : 7));

          xd.length = sd;

          if (roundUp) {

            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (; ++xd[--sd] > base - 1;) {
              xd[sd] = 0;
              if (!sd) {
                ++e;
                xd.unshift(1);
              }
            }
          }

          // Determine trailing zeros.
          for (len = xd.length; !xd[len - 1]; --len);

          // E.g. [4, 11, 15] becomes 4bf.
          for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

          // Add binary exponent suffix?
          if (isExp) {
            if (len > 1) {
              if (baseOut == 16 || baseOut == 8) {
                i = baseOut == 16 ? 4 : 3;
                for (--len; len % i; len++) str += '0';
                xd = convertBase(str, base, baseOut);
                for (len = xd.length; !xd[len - 1]; --len);

                // xd[0] will always be be 1
                for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
              } else {
                str = str.charAt(0) + '.' + str.slice(1);
              }
            }

            str =  str + (e < 0 ? 'p' : 'p+') + e;
          } else if (e < 0) {
            for (; ++e;) str = '0' + str;
            str = '0.' + str;
          } else {
            if (++e > len) for (e -= len; e-- ;) str += '0';
            else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
          }
        }

        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
      }

      return x.s < 0 ? '-' + str : str;
    }


    // Does not strip trailing zeros.
    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    }


    // Decimal methods


    /*
     *  abs
     *  acos
     *  acosh
     *  add
     *  asin
     *  asinh
     *  atan
     *  atanh
     *  atan2
     *  cbrt
     *  ceil
     *  clamp
     *  clone
     *  config
     *  cos
     *  cosh
     *  div
     *  exp
     *  floor
     *  hypot
     *  ln
     *  log
     *  log2
     *  log10
     *  max
     *  min
     *  mod
     *  mul
     *  pow
     *  random
     *  round
     *  set
     *  sign
     *  sin
     *  sinh
     *  sqrt
     *  sub
     *  sum
     *  tan
     *  tanh
     *  trunc
     */


    /*
     * Return a new Decimal whose value is the absolute value of `x`.
     *
     * x {number|string|Decimal}
     *
     */
    function abs(x) {
      return new this(x).abs();
    }


    /*
     * Return a new Decimal whose value is the arccosine in radians of `x`.
     *
     * x {number|string|Decimal}
     *
     */
    function acos(x) {
      return new this(x).acos();
    }


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function acosh(x) {
      return new this(x).acosh();
    }


    /*
     * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function add$1(x, y) {
      return new this(x).plus(y);
    }


    /*
     * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function asin(x) {
      return new this(x).asin();
    }


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function asinh(x) {
      return new this(x).asinh();
    }


    /*
     * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function atan(x) {
      return new this(x).atan();
    }


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function atanh(x) {
      return new this(x).atanh();
    }


    /*
     * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
     * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-pi, pi]
     *
     * y {number|string|Decimal} The y-coordinate.
     * x {number|string|Decimal} The x-coordinate.
     *
     * atan2(±0, -0)               = ±pi
     * atan2(±0, +0)               = ±0
     * atan2(±0, -x)               = ±pi for x > 0
     * atan2(±0, x)                = ±0 for x > 0
     * atan2(-y, ±0)               = -pi/2 for y > 0
     * atan2(y, ±0)                = pi/2 for y > 0
     * atan2(±y, -Infinity)        = ±pi for finite y > 0
     * atan2(±y, +Infinity)        = ±0 for finite y > 0
     * atan2(±Infinity, x)         = ±pi/2 for finite x
     * atan2(±Infinity, -Infinity) = ±3*pi/4
     * atan2(±Infinity, +Infinity) = ±pi/4
     * atan2(NaN, x) = NaN
     * atan2(y, NaN) = NaN
     *
     */
    function atan2(y, x) {
      y = new this(y);
      x = new this(x);
      var r,
        pr = this.precision,
        rm = this.rounding,
        wpr = pr + 4;

      // Either NaN
      if (!y.s || !x.s) {
        r = new this(NaN);

      // Both ±Infinity
      } else if (!y.d && !x.d) {
        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
        r.s = y.s;

      // x is ±Infinity or y is ±0
      } else if (!x.d || y.isZero()) {
        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
        r.s = y.s;

      // y is ±Infinity or x is ±0
      } else if (!y.d || x.isZero()) {
        r = getPi(this, wpr, 1).times(0.5);
        r.s = y.s;

      // Both non-zero and finite
      } else if (x.s < 0) {
        this.precision = wpr;
        this.rounding = 1;
        r = this.atan(divide(y, x, wpr, 1));
        x = getPi(this, wpr, 1);
        this.precision = pr;
        this.rounding = rm;
        r = y.s < 0 ? r.minus(x) : r.plus(x);
      } else {
        r = this.atan(divide(y, x, wpr, 1));
      }

      return r;
    }


    /*
     * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function cbrt(x) {
      return new this(x).cbrt();
    }


    /*
     * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
     *
     * x {number|string|Decimal}
     *
     */
    function ceil(x) {
      return finalise(x = new this(x), x.e + 1, 2);
    }


    /*
     * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.
     *
     * x {number|string|Decimal}
     * min {number|string|Decimal}
     * max {number|string|Decimal}
     *
     */
    function clamp(x, min, max) {
      return new this(x).clamp(min, max);
    }


    /*
     * Configure global settings for a Decimal constructor.
     *
     * `obj` is an object with one or more of the following properties,
     *
     *   precision  {number}
     *   rounding   {number}
     *   toExpNeg   {number}
     *   toExpPos   {number}
     *   maxE       {number}
     *   minE       {number}
     *   modulo     {number}
     *   crypto     {boolean|number}
     *   defaults   {true}
     *
     * E.g. Decimal.config({ precision: 20, rounding: 4 })
     *
     */
    function config(obj) {
      if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
      var i, p, v,
        useDefaults = obj.defaults === true,
        ps = [
          'precision', 1, MAX_DIGITS,
          'rounding', 0, 8,
          'toExpNeg', -EXP_LIMIT, 0,
          'toExpPos', 0, EXP_LIMIT,
          'maxE', 0, EXP_LIMIT,
          'minE', -EXP_LIMIT, 0,
          'modulo', 0, 9
        ];

      for (i = 0; i < ps.length; i += 3) {
        if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
        if ((v = obj[p]) !== void 0) {
          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
          else throw Error(invalidArgument + p + ': ' + v);
        }
      }

      if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (v === true || v === false || v === 0 || v === 1) {
          if (v) {
            if (typeof crypto != 'undefined' && crypto &&
              (crypto.getRandomValues || crypto.randomBytes)) {
              this[p] = true;
            } else {
              throw Error(cryptoUnavailable);
            }
          } else {
            this[p] = false;
          }
        } else {
          throw Error(invalidArgument + p + ': ' + v);
        }
      }

      return this;
    }


    /*
     * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function cos(x) {
      return new this(x).cos();
    }


    /*
     * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function cosh(x) {
      return new this(x).cosh();
    }


    /*
     * Create and return a Decimal constructor with the same configuration properties as this Decimal
     * constructor.
     *
     */
    function clone(obj) {
      var i, p, ps;

      /*
       * The Decimal constructor and exported function.
       * Return a new Decimal instance.
       *
       * v {number|string|Decimal} A numeric value.
       *
       */
      function Decimal(v) {
        var e, i, t,
          x = this;

        // Decimal called without new.
        if (!(x instanceof Decimal)) return new Decimal(v);

        // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
        // which points to Object.
        x.constructor = Decimal;

        // Duplicate.
        if (isDecimalInstance(v)) {
          x.s = v.s;

          if (external) {
            if (!v.d || v.e > Decimal.maxE) {

              // Infinity.
              x.e = NaN;
              x.d = null;
            } else if (v.e < Decimal.minE) {

              // Zero.
              x.e = 0;
              x.d = [0];
            } else {
              x.e = v.e;
              x.d = v.d.slice();
            }
          } else {
            x.e = v.e;
            x.d = v.d ? v.d.slice() : v.d;
          }

          return;
        }

        t = typeof v;

        if (t === 'number') {
          if (v === 0) {
            x.s = 1 / v < 0 ? -1 : 1;
            x.e = 0;
            x.d = [0];
            return;
          }

          if (v < 0) {
            v = -v;
            x.s = -1;
          } else {
            x.s = 1;
          }

          // Fast path for small integers.
          if (v === ~~v && v < 1e7) {
            for (e = 0, i = v; i >= 10; i /= 10) e++;

            if (external) {
              if (e > Decimal.maxE) {
                x.e = NaN;
                x.d = null;
              } else if (e < Decimal.minE) {
                x.e = 0;
                x.d = [0];
              } else {
                x.e = e;
                x.d = [v];
              }
            } else {
              x.e = e;
              x.d = [v];
            }

            return;

          // Infinity, NaN.
          } else if (v * 0 !== 0) {
            if (!v) x.s = NaN;
            x.e = NaN;
            x.d = null;
            return;
          }

          return parseDecimal(x, v.toString());

        } else if (t !== 'string') {
          throw Error(invalidArgument + v);
        }

        // Minus sign?
        if ((i = v.charCodeAt(0)) === 45) {
          v = v.slice(1);
          x.s = -1;
        } else {
          // Plus sign?
          if (i === 43) v = v.slice(1);
          x.s = 1;
        }

        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
      }

      Decimal.prototype = P;

      Decimal.ROUND_UP = 0;
      Decimal.ROUND_DOWN = 1;
      Decimal.ROUND_CEIL = 2;
      Decimal.ROUND_FLOOR = 3;
      Decimal.ROUND_HALF_UP = 4;
      Decimal.ROUND_HALF_DOWN = 5;
      Decimal.ROUND_HALF_EVEN = 6;
      Decimal.ROUND_HALF_CEIL = 7;
      Decimal.ROUND_HALF_FLOOR = 8;
      Decimal.EUCLID = 9;

      Decimal.config = Decimal.set = config;
      Decimal.clone = clone;
      Decimal.isDecimal = isDecimalInstance;

      Decimal.abs = abs;
      Decimal.acos = acos;
      Decimal.acosh = acosh;        // ES6
      Decimal.add = add$1;
      Decimal.asin = asin;
      Decimal.asinh = asinh;        // ES6
      Decimal.atan = atan;
      Decimal.atanh = atanh;        // ES6
      Decimal.atan2 = atan2;
      Decimal.cbrt = cbrt;          // ES6
      Decimal.ceil = ceil;
      Decimal.clamp = clamp;
      Decimal.cos = cos;
      Decimal.cosh = cosh;          // ES6
      Decimal.div = div;
      Decimal.exp = exp;
      Decimal.floor = floor;
      Decimal.hypot = hypot;        // ES6
      Decimal.ln = ln;
      Decimal.log = log;
      Decimal.log10 = log10;        // ES6
      Decimal.log2 = log2;          // ES6
      Decimal.max = max;
      Decimal.min = min;
      Decimal.mod = mod;
      Decimal.mul = mul;
      Decimal.pow = pow;
      Decimal.random = random;
      Decimal.round = round;
      Decimal.sign = sign;          // ES6
      Decimal.sin = sin;
      Decimal.sinh = sinh;          // ES6
      Decimal.sqrt = sqrt;
      Decimal.sub = sub;
      Decimal.sum = sum;
      Decimal.tan = tan;
      Decimal.tanh = tanh;          // ES6
      Decimal.trunc = trunc;        // ES6

      if (obj === void 0) obj = {};
      if (obj) {
        if (obj.defaults !== true) {
          ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
          for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
        }
      }

      Decimal.config(obj);

      return Decimal;
    }


    /*
     * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function div(x, y) {
      return new this(x).div(y);
    }


    /*
     * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} The power to which to raise the base of the natural log.
     *
     */
    function exp(x) {
      return new this(x).exp();
    }


    /*
     * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
     *
     * x {number|string|Decimal}
     *
     */
    function floor(x) {
      return finalise(x = new this(x), x.e + 1, 3);
    }


    /*
     * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
     * rounded to `precision` significant digits using rounding mode `rounding`.
     *
     * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
     *
     * arguments {number|string|Decimal}
     *
     */
    function hypot() {
      var i, n,
        t = new this(0);

      external = false;

      for (i = 0; i < arguments.length;) {
        n = new this(arguments[i++]);
        if (!n.d) {
          if (n.s) {
            external = true;
            return new this(1 / 0);
          }
          t = n;
        } else if (t.d) {
          t = t.plus(n.times(n));
        }
      }

      external = true;

      return t.sqrt();
    }


    /*
     * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
     * otherwise return false.
     *
     */
    function isDecimalInstance(obj) {
      return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
    }


    /*
     * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function ln(x) {
      return new this(x).ln();
    }


    /*
     * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
     * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
     *
     * log[y](x)
     *
     * x {number|string|Decimal} The argument of the logarithm.
     * y {number|string|Decimal} The base of the logarithm.
     *
     */
    function log(x, y) {
      return new this(x).log(y);
    }


    /*
     * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function log2(x) {
      return new this(x).log(2);
    }


    /*
     * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function log10(x) {
      return new this(x).log(10);
    }


    /*
     * Return a new Decimal whose value is the maximum of the arguments.
     *
     * arguments {number|string|Decimal}
     *
     */
    function max() {
      return maxOrMin(this, arguments, 'lt');
    }


    /*
     * Return a new Decimal whose value is the minimum of the arguments.
     *
     * arguments {number|string|Decimal}
     *
     */
    function min() {
      return maxOrMin(this, arguments, 'gt');
    }


    /*
     * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
     * using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function mod(x, y) {
      return new this(x).mod(y);
    }


    /*
     * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function mul(x, y) {
      return new this(x).mul(y);
    }


    /*
     * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} The base.
     * y {number|string|Decimal} The exponent.
     *
     */
    function pow(x, y) {
      return new this(x).pow(y);
    }


    /*
     * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
     * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
     * are produced).
     *
     * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
     *
     */
    function random(sd) {
      var d, e, k, n,
        i = 0,
        r = new this(1),
        rd = [];

      if (sd === void 0) sd = this.precision;
      else checkInt32(sd, 1, MAX_DIGITS);

      k = Math.ceil(sd / LOG_BASE);

      if (!this.crypto) {
        for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

      // Browsers supporting crypto.getRandomValues.
      } else if (crypto.getRandomValues) {
        d = crypto.getRandomValues(new Uint32Array(k));

        for (; i < k;) {
          n = d[i];

          // 0 <= n < 4294967296
          // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
          if (n >= 4.29e9) {
            d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
          } else {

            // 0 <= n <= 4289999999
            // 0 <= (n % 1e7) <= 9999999
            rd[i++] = n % 1e7;
          }
        }

      // Node.js supporting crypto.randomBytes.
      } else if (crypto.randomBytes) {

        // buffer
        d = crypto.randomBytes(k *= 4);

        for (; i < k;) {

          // 0 <= n < 2147483648
          n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

          // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
          if (n >= 2.14e9) {
            crypto.randomBytes(4).copy(d, i);
          } else {

            // 0 <= n <= 2139999999
            // 0 <= (n % 1e7) <= 9999999
            rd.push(n % 1e7);
            i += 4;
          }
        }

        i = k / 4;
      } else {
        throw Error(cryptoUnavailable);
      }

      k = rd[--i];
      sd %= LOG_BASE;

      // Convert trailing digits to zeros according to sd.
      if (k && sd) {
        n = mathpow(10, LOG_BASE - sd);
        rd[i] = (k / n | 0) * n;
      }

      // Remove trailing words which are zero.
      for (; rd[i] === 0; i--) rd.pop();

      // Zero?
      if (i < 0) {
        e = 0;
        rd = [0];
      } else {
        e = -1;

        // Remove leading words which are zero and adjust exponent accordingly.
        for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

        // Count the digits of the first word of rd to determine leading zeros.
        for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

        // Adjust the exponent for leading zeros of the first word of rd.
        if (k < LOG_BASE) e -= LOG_BASE - k;
      }

      r.e = e;
      r.d = rd;

      return r;
    }


    /*
     * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
     *
     * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
     *
     * x {number|string|Decimal}
     *
     */
    function round(x) {
      return finalise(x = new this(x), x.e + 1, this.rounding);
    }


    /*
     * Return
     *   1    if x > 0,
     *  -1    if x < 0,
     *   0    if x is 0,
     *  -0    if x is -0,
     *   NaN  otherwise
     *
     * x {number|string|Decimal}
     *
     */
    function sign(x) {
      x = new this(x);
      return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
    }


    /*
     * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
     * using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function sin(x) {
      return new this(x).sin();
    }


    /*
     * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function sinh(x) {
      return new this(x).sinh();
    }


    /*
     * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function sqrt(x) {
      return new this(x).sqrt();
    }


    /*
     * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
     * using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function sub(x, y) {
      return new this(x).sub(y);
    }


    /*
     * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * Only the result is rounded, not the intermediate calculations.
     *
     * arguments {number|string|Decimal}
     *
     */
    function sum() {
      var i = 0,
        args = arguments,
        x = new this(args[i]);

      external = false;
      for (; x.s && ++i < args.length;) x = x.plus(args[i]);
      external = true;

      return finalise(x, this.precision, this.rounding);
    }


    /*
     * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function tan(x) {
      return new this(x).tan();
    }


    /*
     * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function tanh(x) {
      return new this(x).tanh();
    }


    /*
     * Return a new Decimal whose value is `x` truncated to an integer.
     *
     * x {number|string|Decimal}
     *
     */
    function trunc(x) {
      return finalise(x = new this(x), x.e + 1, 1);
    }


    P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;
    P[Symbol.toStringTag] = 'Decimal';

    // Create and configure initial Decimal constructor.
    var Decimal = P.constructor = clone(DEFAULTS);

    // Create the internal constants from their string values.
    LN10 = new Decimal(LN10);
    PI = new Decimal(PI);

    var name$n = 'BigNumber';
    var dependencies$n = ['?on', 'config'];
    var createBigNumberClass = /* #__PURE__ */factory(name$n, dependencies$n, _ref => {
      var {
        on,
        config
      } = _ref;
      var BigNumber = Decimal.clone({
        precision: config.precision,
        modulo: Decimal.EUCLID
      });
      BigNumber.prototype = Object.create(BigNumber.prototype);

      /**
       * Attach type information
       */
      BigNumber.prototype.type = 'BigNumber';
      BigNumber.prototype.isBigNumber = true;

      /**
       * Get a JSON representation of a BigNumber containing
       * type information
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "BigNumber", "value": "0.2"}`
       */
      BigNumber.prototype.toJSON = function () {
        return {
          mathjs: 'BigNumber',
          value: this.toString()
        };
      };

      /**
       * Instantiate a BigNumber from a JSON object
       * @param {Object} json  a JSON object structured as:
       *                       `{"mathjs": "BigNumber", "value": "0.2"}`
       * @return {BigNumber}
       */
      BigNumber.fromJSON = function (json) {
        return new BigNumber(json.value);
      };
      if (on) {
        // listen for changed in the configuration, automatically apply changed precision
        on('config', function (curr, prev) {
          if (curr.precision !== prev.precision) {
            BigNumber.config({
              precision: curr.precision
            });
          }
        });
      }
      return BigNumber;
    }, {
      isClass: true
    });

    /**
     * @license Complex.js v2.1.1 12/05/2020
     *
     * Copyright (c) 2020, Robert Eisele (robert@xarg.org)
     * Dual licensed under the MIT or GPL Version 2 licenses.
     **/

    var complex = createCommonjsModule(function (module, exports) {
    /**
     *
     * This class allows the manipulation of complex numbers.
     * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
     *
     * Object form
     * { re: <real>, im: <imaginary> }
     * { arg: <angle>, abs: <radius> }
     * { phi: <angle>, r: <radius> }
     *
     * Array / Vector form
     * [ real, imaginary ]
     *
     * Double form
     * 99.3 - Single double value
     *
     * String form
     * '23.1337' - Simple real number
     * '15+3i' - a simple complex number
     * '3-i' - a simple complex number
     *
     * Example:
     *
     * var c = new Complex('99.3+8i');
     * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
     *
     */

    (function(root) {

      var cosh = Math.cosh || function(x) {
        return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
      };

      var sinh = Math.sinh || function(x) {
        return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
      };

      /**
       * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).
       *
       * @param {number} x
       * @returns {number} cos(x) - 1
       */
      var cosm1 = function(x) {

        var b = Math.PI / 4;
        if (-b > x || x > b) {
          return Math.cos(x) - 1.0;
        }

        /* Calculate horner form of polynomial of taylor series in Q
        var fac = 1, alt = 1, pol = {};
        for (var i = 0; i <= 16; i++) {
          fac*= i || 1;
          if (i % 2 == 0) {
            pol[i] = new Fraction(1, alt * fac);
            alt = -alt;
          }
        }
        console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1
        */

        var xx = x * x;
        return xx * (
          xx * (
            xx * (
              xx * (
                xx * (
                  xx * (
                    xx * (
                      xx / 20922789888000
                      - 1 / 87178291200)
                    + 1 / 479001600)
                  - 1 / 3628800)
                + 1 / 40320)
              - 1 / 720)
            + 1 / 24)
          - 1 / 2);
      };

      var hypot = function(x, y) {

        var a = Math.abs(x);
        var b = Math.abs(y);

        if (a < 3000 && b < 3000) {
          return Math.sqrt(a * a + b * b);
        }

        if (a < b) {
          a = b;
          b = x / y;
        } else {
          b = y / x;
        }
        return a * Math.sqrt(1 + b * b);
      };

      var parser_exit = function() {
        throw SyntaxError('Invalid Param');
      };

      /**
       * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
       *
       * @param {number} a
       * @param {number} b
       * @returns {number}
       */
      function logHypot(a, b) {

        var _a = Math.abs(a);
        var _b = Math.abs(b);

        if (a === 0) {
          return Math.log(_b);
        }

        if (b === 0) {
          return Math.log(_a);
        }

        if (_a < 3000 && _b < 3000) {
          return Math.log(a * a + b * b) * 0.5;
        }

        /* I got 4 ideas to compute this property without overflow:
         *
         * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
         *
         * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

         Math.log(a * a + b * b) / 2

         *
         *
         * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

         var fn = function(a, b) {
         a = Math.abs(a);
         b = Math.abs(b);
         var t = Math.min(a, b);
         a = Math.max(a, b);
         t = t / a;

         return Math.log(a) + Math.log(1 + t * t) / 2;
         };

         * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

         Math.log(a / Math.cos(Math.atan2(b, a)))

         * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

         Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

         */

         a = a / 2;
         b = b / 2;

        return 0.5 * Math.log(a * a + b * b) + Math.LN2;
      }

      var parse = function(a, b) {

        var z = { 're': 0, 'im': 0 };

        if (a === undefined || a === null) {
          z['re'] =
          z['im'] = 0;
        } else if (b !== undefined) {
          z['re'] = a;
          z['im'] = b;
        } else
          switch (typeof a) {

            case 'object':

              if ('im' in a && 're' in a) {
                z['re'] = a['re'];
                z['im'] = a['im'];
              } else if ('abs' in a && 'arg' in a) {
                if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
                  return Complex['INFINITY'];
                }
                z['re'] = a['abs'] * Math.cos(a['arg']);
                z['im'] = a['abs'] * Math.sin(a['arg']);
              } else if ('r' in a && 'phi' in a) {
                if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
                  return Complex['INFINITY'];
                }
                z['re'] = a['r'] * Math.cos(a['phi']);
                z['im'] = a['r'] * Math.sin(a['phi']);
              } else if (a.length === 2) { // Quick array check
                z['re'] = a[0];
                z['im'] = a[1];
              } else {
                parser_exit();
              }
              break;

            case 'string':

              z['im'] = /* void */
              z['re'] = 0;

              var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
              var plus = 1;
              var minus = 0;

              if (tokens === null) {
                parser_exit();
              }

              for (var i = 0; i < tokens.length; i++) {

                var c = tokens[i];

                if (c === ' ' || c === '\t' || c === '\n') ; else if (c === '+') {
                  plus++;
                } else if (c === '-') {
                  minus++;
                } else if (c === 'i' || c === 'I') {

                  if (plus + minus === 0) {
                    parser_exit();
                  }

                  if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                    i++;
                  } else {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
                  }
                  plus = minus = 0;

                } else {

                  if (plus + minus === 0 || isNaN(c)) {
                    parser_exit();
                  }

                  if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                    i++;
                  } else {
                    z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
                  }
                  plus = minus = 0;
                }
              }

              // Still something on the stack
              if (plus + minus > 0) {
                parser_exit();
              }
              break;

            case 'number':
              z['im'] = 0;
              z['re'] = a;
              break;

            default:
              parser_exit();
          }

        if (isNaN(z['re']) || isNaN(z['im'])) ;

        return z;
      };

      /**
       * @constructor
       * @returns {Complex}
       */
      function Complex(a, b) {

        if (!(this instanceof Complex)) {
          return new Complex(a, b);
        }

        var z = parse(a, b);

        this['re'] = z['re'];
        this['im'] = z['im'];
      }

      Complex.prototype = {

        're': 0,
        'im': 0,

        /**
         * Calculates the sign of a complex number, which is a normalized complex
         *
         * @returns {Complex}
         */
        'sign': function() {

          var abs = this['abs']();

          return new Complex(
            this['re'] / abs,
            this['im'] / abs);
        },

        /**
         * Adds two complex numbers
         *
         * @returns {Complex}
         */
        'add': function(a, b) {

          var z = new Complex(a, b);

          // Infinity + Infinity = NaN
          if (this['isInfinite']() && z['isInfinite']()) {
            return Complex['NAN'];
          }

          // Infinity + z = Infinity { where z != Infinity }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          return new Complex(
            this['re'] + z['re'],
            this['im'] + z['im']);
        },

        /**
         * Subtracts two complex numbers
         *
         * @returns {Complex}
         */
        'sub': function(a, b) {

          var z = new Complex(a, b);

          // Infinity - Infinity = NaN
          if (this['isInfinite']() && z['isInfinite']()) {
            return Complex['NAN'];
          }

          // Infinity - z = Infinity { where z != Infinity }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          return new Complex(
            this['re'] - z['re'],
            this['im'] - z['im']);
        },

        /**
         * Multiplies two complex numbers
         *
         * @returns {Complex}
         */
        'mul': function(a, b) {

          var z = new Complex(a, b);

          // Infinity * 0 = NaN
          if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
            return Complex['NAN'];
          }

          // Infinity * z = Infinity { where z != 0 }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          // Short circuit for real values
          if (z['im'] === 0 && this['im'] === 0) {
            return new Complex(this['re'] * z['re'], 0);
          }

          return new Complex(
            this['re'] * z['re'] - this['im'] * z['im'],
            this['re'] * z['im'] + this['im'] * z['re']);
        },

        /**
         * Divides two complex numbers
         *
         * @returns {Complex}
         */
        'div': function(a, b) {

          var z = new Complex(a, b);

          // 0 / 0 = NaN and Infinity / Infinity = NaN
          if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
            return Complex['NAN'];
          }

          // Infinity / 0 = Infinity
          if (this['isInfinite']() || z['isZero']()) {
            return Complex['INFINITY'];
          }

          // 0 / Infinity = 0
          if (this['isZero']() || z['isInfinite']()) {
            return Complex['ZERO'];
          }

          a = this['re'];
          b = this['im'];

          var c = z['re'];
          var d = z['im'];
          var t, x;

          if (0 === d) {
            // Divisor is real
            return new Complex(a / c, b / c);
          }

          if (Math.abs(c) < Math.abs(d)) {

            x = c / d;
            t = c * x + d;

            return new Complex(
              (a * x + b) / t,
              (b * x - a) / t);

          } else {

            x = d / c;
            t = d * x + c;

            return new Complex(
              (a + b * x) / t,
              (b - a * x) / t);
          }
        },

        /**
         * Calculate the power of two complex numbers
         *
         * @returns {Complex}
         */
        'pow': function(a, b) {

          var z = new Complex(a, b);

          a = this['re'];
          b = this['im'];

          if (z['isZero']()) {
            return Complex['ONE'];
          }

          // If the exponent is real
          if (z['im'] === 0) {

            if (b === 0 && a > 0) {

              return new Complex(Math.pow(a, z['re']), 0);

            } else if (a === 0) { // If base is fully imaginary

              switch ((z['re'] % 4 + 4) % 4) {
                case 0:
                  return new Complex(Math.pow(b, z['re']), 0);
                case 1:
                  return new Complex(0, Math.pow(b, z['re']));
                case 2:
                  return new Complex(-Math.pow(b, z['re']), 0);
                case 3:
                  return new Complex(0, -Math.pow(b, z['re']));
              }
            }
          }

          /* I couldn't find a good formula, so here is a derivation and optimization
           *
           * z_1^z_2 = (a + bi)^(c + di)
           *         = exp((c + di) * log(a + bi)
           *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
           * =>...
           * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
           * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
           *
           * =>...
           * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
           * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
           *
           * =>
           * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
           * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
           *
           */

          if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
            return Complex['ZERO'];
          }

          var arg = Math.atan2(b, a);
          var loh = logHypot(a, b);

          a = Math.exp(z['re'] * loh - z['im'] * arg);
          b = z['im'] * loh + z['re'] * arg;
          return new Complex(
            a * Math.cos(b),
            a * Math.sin(b));
        },

        /**
         * Calculate the complex square root
         *
         * @returns {Complex}
         */
        'sqrt': function() {

          var a = this['re'];
          var b = this['im'];
          var r = this['abs']();

          var re, im;

          if (a >= 0) {

            if (b === 0) {
              return new Complex(Math.sqrt(a), 0);
            }

            re = 0.5 * Math.sqrt(2.0 * (r + a));
          } else {
            re = Math.abs(b) / Math.sqrt(2 * (r - a));
          }

          if (a <= 0) {
            im = 0.5 * Math.sqrt(2.0 * (r - a));
          } else {
            im = Math.abs(b) / Math.sqrt(2 * (r + a));
          }

          return new Complex(re, b < 0 ? -im : im);
        },

        /**
         * Calculate the complex exponent
         *
         * @returns {Complex}
         */
        'exp': function() {

          var tmp = Math.exp(this['re']);

          if (this['im'] === 0) ;
          return new Complex(
            tmp * Math.cos(this['im']),
            tmp * Math.sin(this['im']));
        },

        /**
         * Calculate the complex exponent and subtracts one.
         *
         * This may be more accurate than `Complex(x).exp().sub(1)` if
         * `x` is small.
         *
         * @returns {Complex}
         */
        'expm1': function() {

          /**
           * exp(a + i*b) - 1
           = exp(a) * (cos(b) + j*sin(b)) - 1
           = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
           */

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            Math.expm1(a) * Math.cos(b) + cosm1(b),
            Math.exp(a) * Math.sin(b));
        },

        /**
         * Calculate the natural log
         *
         * @returns {Complex}
         */
        'log': function() {

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            logHypot(a, b),
            Math.atan2(b, a));
        },

        /**
         * Calculate the magnitude of the complex number
         *
         * @returns {number}
         */
        'abs': function() {

          return hypot(this['re'], this['im']);
        },

        /**
         * Calculate the angle of the complex number
         *
         * @returns {number}
         */
        'arg': function() {

          return Math.atan2(this['im'], this['re']);
        },

        /**
         * Calculate the sine of the complex number
         *
         * @returns {Complex}
         */
        'sin': function() {

          // sin(z) = ( e^iz - e^-iz ) / 2i 
          //        = sin(a)cosh(b) + i cos(a)sinh(b)

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            Math.sin(a) * cosh(b),
            Math.cos(a) * sinh(b));
        },

        /**
         * Calculate the cosine
         *
         * @returns {Complex}
         */
        'cos': function() {

          // cos(z) = ( e^iz + e^-iz ) / 2 
          //        = cos(a)cosh(b) - i sin(a)sinh(b)

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            Math.cos(a) * cosh(b),
            -Math.sin(a) * sinh(b));
        },

        /**
         * Calculate the tangent
         *
         * @returns {Complex}
         */
        'tan': function() {

          // tan(z) = sin(z) / cos(z) 
          //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )
          //        = ( e^2iz - 1 ) / i( e^2iz + 1 )
          //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = Math.cos(a) + cosh(b);

          return new Complex(
            Math.sin(a) / d,
            sinh(b) / d);
        },

        /**
         * Calculate the cotangent
         *
         * @returns {Complex}
         */
        'cot': function() {

          // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = Math.cos(a) - cosh(b);

          return new Complex(
            -Math.sin(a) / d,
            sinh(b) / d);
        },

        /**
         * Calculate the secant
         *
         * @returns {Complex}
         */
        'sec': function() {

          // sec(c) = 2 / (e^(ci) + e^(-ci))

          var a = this['re'];
          var b = this['im'];
          var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

          return new Complex(
            Math.cos(a) * cosh(b) / d,
            Math.sin(a) * sinh(b) / d);
        },

        /**
         * Calculate the cosecans
         *
         * @returns {Complex}
         */
        'csc': function() {

          // csc(c) = 2i / (e^(ci) - e^(-ci))

          var a = this['re'];
          var b = this['im'];
          var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

          return new Complex(
            Math.sin(a) * cosh(b) / d,
            -Math.cos(a) * sinh(b) / d);
        },

        /**
         * Calculate the complex arcus sinus
         *
         * @returns {Complex}
         */
        'asin': function() {

          // asin(c) = -i * log(ci + sqrt(1 - c^2))

          var a = this['re'];
          var b = this['im'];

          var t1 = new Complex(
            b * b - a * a + 1,
            -2 * a * b)['sqrt']();

          var t2 = new Complex(
            t1['re'] - b,
            t1['im'] + a)['log']();

          return new Complex(t2['im'], -t2['re']);
        },

        /**
         * Calculate the complex arcus cosinus
         *
         * @returns {Complex}
         */
        'acos': function() {

          // acos(c) = i * log(c - i * sqrt(1 - c^2))

          var a = this['re'];
          var b = this['im'];

          var t1 = new Complex(
            b * b - a * a + 1,
            -2 * a * b)['sqrt']();

          var t2 = new Complex(
            t1['re'] - b,
            t1['im'] + a)['log']();

          return new Complex(Math.PI / 2 - t2['im'], t2['re']);
        },

        /**
         * Calculate the complex arcus tangent
         *
         * @returns {Complex}
         */
        'atan': function() {

          // atan(c) = i / 2 log((i + x) / (i - x))

          var a = this['re'];
          var b = this['im'];

          if (a === 0) {

            if (b === 1) {
              return new Complex(0, Infinity);
            }

            if (b === -1) {
              return new Complex(0, -Infinity);
            }
          }

          var d = a * a + (1.0 - b) * (1.0 - b);

          var t1 = new Complex(
            (1 - b * b - a * a) / d,
            -2 * a / d).log();

          return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
        },

        /**
         * Calculate the complex arcus cotangent
         *
         * @returns {Complex}
         */
        'acot': function() {

          // acot(c) = i / 2 log((c - i) / (c + i))

          var a = this['re'];
          var b = this['im'];

          if (b === 0) {
            return new Complex(Math.atan2(1, a), 0);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).atan()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).atan();
        },

        /**
         * Calculate the complex arcus secant
         *
         * @returns {Complex}
         */
        'asec': function() {

          // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(0, Infinity);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).acos()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).acos();
        },

        /**
         * Calculate the complex arcus cosecans
         *
         * @returns {Complex}
         */
        'acsc': function() {

          // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(Math.PI / 2, Infinity);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).asin()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).asin();
        },

        /**
         * Calculate the complex sinh
         *
         * @returns {Complex}
         */
        'sinh': function() {

          // sinh(c) = (e^c - e^-c) / 2

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            sinh(a) * Math.cos(b),
            cosh(a) * Math.sin(b));
        },

        /**
         * Calculate the complex cosh
         *
         * @returns {Complex}
         */
        'cosh': function() {

          // cosh(c) = (e^c + e^-c) / 2

          var a = this['re'];
          var b = this['im'];

          return new Complex(
            cosh(a) * Math.cos(b),
            sinh(a) * Math.sin(b));
        },

        /**
         * Calculate the complex tanh
         *
         * @returns {Complex}
         */
        'tanh': function() {

          // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = cosh(a) + Math.cos(b);

          return new Complex(
            sinh(a) / d,
            Math.sin(b) / d);
        },

        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        'coth': function() {

          // coth(c) = (e^c + e^-c) / (e^c - e^-c)

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = cosh(a) - Math.cos(b);

          return new Complex(
            sinh(a) / d,
            -Math.sin(b) / d);
        },

        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        'csch': function() {

          // csch(c) = 2 / (e^c - e^-c)

          var a = this['re'];
          var b = this['im'];
          var d = Math.cos(2 * b) - cosh(2 * a);

          return new Complex(
            -2 * sinh(a) * Math.cos(b) / d,
            2 * cosh(a) * Math.sin(b) / d);
        },

        /**
         * Calculate the complex sech
         *
         * @returns {Complex}
         */
        'sech': function() {

          // sech(c) = 2 / (e^c + e^-c)

          var a = this['re'];
          var b = this['im'];
          var d = Math.cos(2 * b) + cosh(2 * a);

          return new Complex(
            2 * cosh(a) * Math.cos(b) / d,
            -2 * sinh(a) * Math.sin(b) / d);
        },

        /**
         * Calculate the complex asinh
         *
         * @returns {Complex}
         */
        'asinh': function() {

          // asinh(c) = log(c + sqrt(c^2 + 1))

          var tmp = this['im'];
          this['im'] = -this['re'];
          this['re'] = tmp;
          var res = this['asin']();

          this['re'] = -this['im'];
          this['im'] = tmp;
          tmp = res['re'];

          res['re'] = -res['im'];
          res['im'] = tmp;
          return res;
        },

        /**
         * Calculate the complex acosh
         *
         * @returns {Complex}
         */
        'acosh': function() {

          // acosh(c) = log(c + sqrt(c^2 - 1))

          var res = this['acos']();
          if (res['im'] <= 0) {
            var tmp = res['re'];
            res['re'] = -res['im'];
            res['im'] = tmp;
          } else {
            var tmp = res['im'];
            res['im'] = -res['re'];
            res['re'] = tmp;
          }
          return res;
        },

        /**
         * Calculate the complex atanh
         *
         * @returns {Complex}
         */
        'atanh': function() {

          // atanh(c) = log((1+c) / (1-c)) / 2

          var a = this['re'];
          var b = this['im'];

          var noIM = a > 1 && b === 0;
          var oneMinus = 1 - a;
          var onePlus = 1 + a;
          var d = oneMinus * oneMinus + b * b;

          var x = (d !== 0)
            ? new Complex(
              (onePlus * oneMinus - b * b) / d,
              (b * oneMinus + onePlus * b) / d)
            : new Complex(
              (a !== -1) ? (a / 0) : 0,
              (b !== 0) ? (b / 0) : 0);

          var temp = x['re'];
          x['re'] = logHypot(x['re'], x['im']) / 2;
          x['im'] = Math.atan2(x['im'], temp) / 2;
          if (noIM) {
            x['im'] = -x['im'];
          }
          return x;
        },

        /**
         * Calculate the complex acoth
         *
         * @returns {Complex}
         */
        'acoth': function() {

          // acoth(c) = log((c+1) / (c-1)) / 2

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(0, Math.PI / 2);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).atanh()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).atanh();
        },

        /**
         * Calculate the complex acsch
         *
         * @returns {Complex}
         */
        'acsch': function() {

          // acsch(c) = log((1+sqrt(1+c^2))/c)

          var a = this['re'];
          var b = this['im'];

          if (b === 0) {

            return new Complex(
              (a !== 0)
                ? Math.log(a + Math.sqrt(a * a + 1))
                : Infinity, 0);
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).asinh()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).asinh();
        },

        /**
         * Calculate the complex asech
         *
         * @returns {Complex}
         */
        'asech': function() {

          // asech(c) = log((1+sqrt(1-c^2))/c)

          var a = this['re'];
          var b = this['im'];

          if (this['isZero']()) {
            return Complex['INFINITY'];
          }

          var d = a * a + b * b;
          return (d !== 0)
            ? new Complex(
              a / d,
              -b / d).acosh()
            : new Complex(
              (a !== 0) ? a / 0 : 0,
              (b !== 0) ? -b / 0 : 0).acosh();
        },

        /**
         * Calculate the complex inverse 1/z
         *
         * @returns {Complex}
         */
        'inverse': function() {

          // 1 / 0 = Infinity and 1 / Infinity = 0
          if (this['isZero']()) {
            return Complex['INFINITY'];
          }

          if (this['isInfinite']()) {
            return Complex['ZERO'];
          }

          var a = this['re'];
          var b = this['im'];

          var d = a * a + b * b;

          return new Complex(a / d, -b / d);
        },

        /**
         * Returns the complex conjugate
         *
         * @returns {Complex}
         */
        'conjugate': function() {

          return new Complex(this['re'], -this['im']);
        },

        /**
         * Gets the negated complex number
         *
         * @returns {Complex}
         */
        'neg': function() {

          return new Complex(-this['re'], -this['im']);
        },

        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        'ceil': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
            Math.ceil(this['re'] * places) / places,
            Math.ceil(this['im'] * places) / places);
        },

        /**
         * Floors the actual complex number
         *
         * @returns {Complex}
         */
        'floor': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
            Math.floor(this['re'] * places) / places,
            Math.floor(this['im'] * places) / places);
        },

        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        'round': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
            Math.round(this['re'] * places) / places,
            Math.round(this['im'] * places) / places);
        },

        /**
         * Compares two complex numbers
         *
         * **Note:** new Complex(Infinity).equals(Infinity) === false
         *
         * @returns {boolean}
         */
        'equals': function(a, b) {

          var z = new Complex(a, b);

          return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
            Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
        },

        /**
         * Clones the actual object
         *
         * @returns {Complex}
         */
        'clone': function() {

          return new Complex(this['re'], this['im']);
        },

        /**
         * Gets a string of the actual complex number
         *
         * @returns {string}
         */
        'toString': function() {

          var a = this['re'];
          var b = this['im'];
          var ret = "";

          if (this['isNaN']()) {
            return 'NaN';
          }

          if (this['isInfinite']()) {
            return 'Infinity';
          }

          if (Math.abs(a) < Complex['EPSILON']) {
            a = 0;
          }

          if (Math.abs(b) < Complex['EPSILON']) {
            b = 0;
          }

          // If is real number
          if (b === 0) {
            return ret + a;
          }

          if (a !== 0) {
            ret += a;
            ret += " ";
            if (b < 0) {
              b = -b;
              ret += "-";
            } else {
              ret += "+";
            }
            ret += " ";
          } else if (b < 0) {
            b = -b;
            ret += "-";
          }

          if (1 !== b) { // b is the absolute imaginary part
            ret += b;
          }
          return ret + "i";
        },

        /**
         * Returns the actual number as a vector
         *
         * @returns {Array}
         */
        'toVector': function() {

          return [this['re'], this['im']];
        },

        /**
         * Returns the actual real value of the current object
         *
         * @returns {number|null}
         */
        'valueOf': function() {

          if (this['im'] === 0) {
            return this['re'];
          }
          return null;
        },

        /**
         * Determines whether a complex number is not on the Riemann sphere.
         *
         * @returns {boolean}
         */
        'isNaN': function() {
          return isNaN(this['re']) || isNaN(this['im']);
        },

        /**
         * Determines whether or not a complex number is at the zero pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isZero': function() {
          return this['im'] === 0 && this['re'] === 0;
        },

        /**
         * Determines whether a complex number is not at the infinity pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isFinite': function() {
          return isFinite(this['re']) && isFinite(this['im']);
        },

        /**
         * Determines whether or not a complex number is at the infinity pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isInfinite': function() {
          return !(this['isNaN']() || this['isFinite']());
        }
      };

      Complex['ZERO'] = new Complex(0, 0);
      Complex['ONE'] = new Complex(1, 0);
      Complex['I'] = new Complex(0, 1);
      Complex['PI'] = new Complex(Math.PI, 0);
      Complex['E'] = new Complex(Math.E, 0);
      Complex['INFINITY'] = new Complex(Infinity, Infinity);
      Complex['NAN'] = new Complex(NaN, NaN);
      Complex['EPSILON'] = 1e-15;

      {
        Object.defineProperty(Complex, "__esModule", { 'value': true });
        Complex['default'] = Complex;
        Complex['Complex'] = Complex;
        module['exports'] = Complex;
      }

    })();
    });

    var Complex$1 = /*@__PURE__*/getDefaultExportFromCjs(complex);

    var name$m = 'Complex';
    var dependencies$m = [];
    var createComplexClass = /* #__PURE__ */factory(name$m, dependencies$m, () => {
      /**
       * Attach type information
       */
      Object.defineProperty(Complex$1, 'name', {
        value: 'Complex'
      });
      Complex$1.prototype.constructor = Complex$1;
      Complex$1.prototype.type = 'Complex';
      Complex$1.prototype.isComplex = true;

      /**
       * Get a JSON representation of the complex number
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
       */
      Complex$1.prototype.toJSON = function () {
        return {
          mathjs: 'Complex',
          re: this.re,
          im: this.im
        };
      };

      /*
       * Return the value of the complex number in polar notation
       * The angle phi will be set in the interval of [-pi, pi].
       * @return {{r: number, phi: number}} Returns and object with properties r and phi.
       */
      Complex$1.prototype.toPolar = function () {
        return {
          r: this.abs(),
          phi: this.arg()
        };
      };

      /**
       * Get a string representation of the complex number,
       * with optional formatting options.
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @return {string} str
       */
      Complex$1.prototype.format = function (options) {
        var str = '';
        var im = this.im;
        var re = this.re;
        var strRe = format$2(this.re, options);
        var strIm = format$2(this.im, options);

        // round either re or im when smaller than the configured precision
        var precision = isNumber(options) ? options : options ? options.precision : null;
        if (precision !== null) {
          var epsilon = Math.pow(10, -precision);
          if (Math.abs(re / im) < epsilon) {
            re = 0;
          }
          if (Math.abs(im / re) < epsilon) {
            im = 0;
          }
        }
        if (im === 0) {
          // real value
          str = strRe;
        } else if (re === 0) {
          // purely complex value
          if (im === 1) {
            str = 'i';
          } else if (im === -1) {
            str = '-i';
          } else {
            str = strIm + 'i';
          }
        } else {
          // complex value
          if (im < 0) {
            if (im === -1) {
              str = strRe + ' - i';
            } else {
              str = strRe + ' - ' + strIm.substring(1) + 'i';
            }
          } else {
            if (im === 1) {
              str = strRe + ' + i';
            } else {
              str = strRe + ' + ' + strIm + 'i';
            }
          }
        }
        return str;
      };

      /**
       * Create a complex number from polar coordinates
       *
       * Usage:
       *
       *     Complex.fromPolar(r: number, phi: number) : Complex
       *     Complex.fromPolar({r: number, phi: number}) : Complex
       *
       * @param {*} args...
       * @return {Complex}
       */
      Complex$1.fromPolar = function (args) {
        switch (arguments.length) {
          case 1:
            {
              var arg = arguments[0];
              if (typeof arg === 'object') {
                return Complex$1(arg);
              } else {
                throw new TypeError('Input has to be an object with r and phi keys.');
              }
            }
          case 2:
            {
              var r = arguments[0];
              var phi = arguments[1];
              if (isNumber(r)) {
                if (isUnit(phi) && phi.hasBase('ANGLE')) {
                  // convert unit to a number in radians
                  phi = phi.toNumber('rad');
                }
                if (isNumber(phi)) {
                  return new Complex$1({
                    r,
                    phi
                  });
                }
                throw new TypeError('Phi is not a number nor an angle unit.');
              } else {
                throw new TypeError('Radius r is not a number.');
              }
            }
          default:
            throw new SyntaxError('Wrong number of arguments in function fromPolar');
        }
      };
      Complex$1.prototype.valueOf = Complex$1.prototype.toString;

      /**
       * Create a Complex number from a JSON object
       * @param {Object} json  A JSON Object structured as
       *                       {"mathjs": "Complex", "re": 2, "im": 3}
       *                       All properties are optional, default values
       *                       for `re` and `im` are 0.
       * @return {Complex} Returns a new Complex number
       */
      Complex$1.fromJSON = function (json) {
        return new Complex$1(json);
      };

      /**
       * Compare two complex numbers, `a` and `b`:
       *
       * - Returns 1 when the real part of `a` is larger than the real part of `b`
       * - Returns -1 when the real part of `a` is smaller than the real part of `b`
       * - Returns 1 when the real parts are equal
       *   and the imaginary part of `a` is larger than the imaginary part of `b`
       * - Returns -1 when the real parts are equal
       *   and the imaginary part of `a` is smaller than the imaginary part of `b`
       * - Returns 0 when both real and imaginary parts are equal.
       *
       * @params {Complex} a
       * @params {Complex} b
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */
      Complex$1.compare = function (a, b) {
        if (a.re > b.re) {
          return 1;
        }
        if (a.re < b.re) {
          return -1;
        }
        if (a.im > b.im) {
          return 1;
        }
        if (a.im < b.im) {
          return -1;
        }
        return 0;
      };
      return Complex$1;
    }, {
      isClass: true
    });

    /**
     * @license Fraction.js v4.2.0 05/03/2022
     * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
     *
     * Copyright (c) 2021, Robert Eisele (robert@xarg.org)
     * Dual licensed under the MIT or GPL Version 2 licenses.
     **/

    var fraction = createCommonjsModule(function (module, exports) {
    /**
     *
     * This class offers the possibility to calculate fractions.
     * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
     *
     * Array/Object form
     * [ 0 => <nominator>, 1 => <denominator> ]
     * [ n => <nominator>, d => <denominator> ]
     *
     * Integer form
     * - Single integer value
     *
     * Double form
     * - Single double value
     *
     * String form
     * 123.456 - a simple double
     * 123/456 - a string fraction
     * 123.'456' - a double with repeating decimal places
     * 123.(456) - synonym
     * 123.45'6' - a double with repeating last place
     * 123.45(6) - synonym
     *
     * Example:
     *
     * var f = new Fraction("9.4'31'");
     * f.mul([-4, 3]).div(4.9);
     *
     */

    (function(root) {

      // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
      // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
      // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
      var MAX_CYCLE_LEN = 2000;

      // Parsed data to avoid calling "new" all the time
      var P = {
        "s": 1,
        "n": 0,
        "d": 1
      };

      function assign(n, s) {

        if (isNaN(n = parseInt(n, 10))) {
          throw Fraction['InvalidParameter'];
        }
        return n * s;
      }

      // Creates a new Fraction internally without the need of the bulky constructor
      function newFraction(n, d) {

        if (d === 0) {
          throw Fraction['DivisionByZero'];
        }

        var f = Object.create(Fraction.prototype);
        f["s"] = n < 0 ? -1 : 1;

        n = n < 0 ? -n : n;

        var a = gcd(n, d);

        f["n"] = n / a;
        f["d"] = d / a;
        return f;
      }

      function factorize(num) {

        var factors = {};

        var n = num;
        var i = 2;
        var s = 4;

        while (s <= n) {

          while (n % i === 0) {
            n/= i;
            factors[i] = (factors[i] || 0) + 1;
          }
          s+= 1 + 2 * i++;
        }

        if (n !== num) {
          if (n > 1)
            factors[n] = (factors[n] || 0) + 1;
        } else {
          factors[num] = (factors[num] || 0) + 1;
        }
        return factors;
      }

      var parse = function(p1, p2) {

        var n = 0, d = 1, s = 1;
        var v = 0, w = 0, x = 0, y = 1, z = 1;

        var A = 0, B = 1;
        var C = 1, D = 1;

        var N = 10000000;
        var M;

        if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
          n = p1;
          d = p2;
          s = n * d;

          if (n % 1 !== 0 || d % 1 !== 0) {
            throw Fraction['NonIntegerParameter'];
          }

        } else
          switch (typeof p1) {

            case "object":
              {
                if ("d" in p1 && "n" in p1) {
                  n = p1["n"];
                  d = p1["d"];
                  if ("s" in p1)
                    n*= p1["s"];
                } else if (0 in p1) {
                  n = p1[0];
                  if (1 in p1)
                    d = p1[1];
                } else {
                  throw Fraction['InvalidParameter'];
                }
                s = n * d;
                break;
              }
            case "number":
              {
                if (p1 < 0) {
                  s = p1;
                  p1 = -p1;
                }

                if (p1 % 1 === 0) {
                  n = p1;
                } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

                  if (p1 >= 1) {
                    z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                    p1/= z;
                  }

                  // Using Farey Sequences
                  // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

                  while (B <= N && D <= N) {
                    M = (A + C) / (B + D);

                    if (p1 === M) {
                      if (B + D <= N) {
                        n = A + C;
                        d = B + D;
                      } else if (D > B) {
                        n = C;
                        d = D;
                      } else {
                        n = A;
                        d = B;
                      }
                      break;

                    } else {

                      if (p1 > M) {
                        A+= C;
                        B+= D;
                      } else {
                        C+= A;
                        D+= B;
                      }

                      if (B > N) {
                        n = C;
                        d = D;
                      } else {
                        n = A;
                        d = B;
                      }
                    }
                  }
                  n*= z;
                } else if (isNaN(p1) || isNaN(p2)) {
                  d = n = NaN;
                }
                break;
              }
            case "string":
              {
                B = p1.match(/\d+|./g);

                if (B === null)
                  throw Fraction['InvalidParameter'];

                if (B[A] === '-') {// Check for minus sign at the beginning
                  s = -1;
                  A++;
                } else if (B[A] === '+') {// Check for plus sign at the beginning
                  A++;
                }

                if (B.length === A + 1) { // Check if it's just a simple number "1234"
                  w = assign(B[A++], s);
                } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

                  if (B[A] !== '.') { // Handle 0.5 and .5
                    v = assign(B[A++], s);
                  }
                  A++;

                  // Check for decimal places
                  if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                    w = assign(B[A], s);
                    y = Math.pow(10, B[A].length);
                    A++;
                  }

                  // Check for repeating places
                  if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                    x = assign(B[A + 1], s);
                    z = Math.pow(10, B[A + 1].length) - 1;
                    A+= 3;
                  }

                } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
                  w = assign(B[A], s);
                  y = assign(B[A + 2], 1);
                  A+= 3;
                } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
                  v = assign(B[A], s);
                  w = assign(B[A + 2], s);
                  y = assign(B[A + 4], 1);
                  A+= 5;
                }

                if (B.length <= A) { // Check for more tokens on the stack
                  d = y * z;
                  s = /* void */
                  n = x + d * v + z * w;
                  break;
                }

                /* Fall through on error */
              }
            default:
              throw Fraction['InvalidParameter'];
          }

        if (d === 0) {
          throw Fraction['DivisionByZero'];
        }

        P["s"] = s < 0 ? -1 : 1;
        P["n"] = Math.abs(n);
        P["d"] = Math.abs(d);
      };

      function modpow(b, e, m) {

        var r = 1;
        for (; e > 0; b = (b * b) % m, e >>= 1) {

          if (e & 1) {
            r = (r * b) % m;
          }
        }
        return r;
      }


      function cycleLen(n, d) {

        for (; d % 2 === 0;
          d/= 2) {
        }

        for (; d % 5 === 0;
          d/= 5) {
        }

        if (d === 1) // Catch non-cyclic numbers
          return 0;

        // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
        // 10^(d-1) % d == 1
        // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
        // as we want to translate the numbers to strings.

        var rem = 10 % d;
        var t = 1;

        for (; rem !== 1; t++) {
          rem = rem * 10 % d;

          if (t > MAX_CYCLE_LEN)
            return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
        }
        return t;
      }


      function cycleStart(n, d, len) {

        var rem1 = 1;
        var rem2 = modpow(10, len, d);

        for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
          // Solve 10^s == 10^(s+t) (mod d)

          if (rem1 === rem2)
            return t;

          rem1 = rem1 * 10 % d;
          rem2 = rem2 * 10 % d;
        }
        return 0;
      }

      function gcd(a, b) {

        if (!a)
          return b;
        if (!b)
          return a;

        while (1) {
          a%= b;
          if (!a)
            return b;
          b%= a;
          if (!b)
            return a;
        }
      }
      /**
       * Module constructor
       *
       * @constructor
       * @param {number|Fraction=} a
       * @param {number=} b
       */
      function Fraction(a, b) {

        parse(a, b);

        if (this instanceof Fraction) {
          a = gcd(P["d"], P["n"]); // Abuse variable a
          this["s"] = P["s"];
          this["n"] = P["n"] / a;
          this["d"] = P["d"] / a;
        } else {
          return newFraction(P['s'] * P['n'], P['d']);
        }
      }

      Fraction['DivisionByZero'] = new Error("Division by Zero");
      Fraction['InvalidParameter'] = new Error("Invalid argument");
      Fraction['NonIntegerParameter'] = new Error("Parameters must be integer");

      Fraction.prototype = {

        "s": 1,
        "n": 0,
        "d": 1,

        /**
         * Calculates the absolute value
         *
         * Ex: new Fraction(-4).abs() => 4
         **/
        "abs": function() {

          return newFraction(this["n"], this["d"]);
        },

        /**
         * Inverts the sign of the current fraction
         *
         * Ex: new Fraction(-4).neg() => 4
         **/
        "neg": function() {

          return newFraction(-this["s"] * this["n"], this["d"]);
        },

        /**
         * Adds two rational numbers
         *
         * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
         **/
        "add": function(a, b) {

          parse(a, b);
          return newFraction(
            this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
            this["d"] * P["d"]
          );
        },

        /**
         * Subtracts two rational numbers
         *
         * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
         **/
        "sub": function(a, b) {

          parse(a, b);
          return newFraction(
            this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
            this["d"] * P["d"]
          );
        },

        /**
         * Multiplies two rational numbers
         *
         * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
         **/
        "mul": function(a, b) {

          parse(a, b);
          return newFraction(
            this["s"] * P["s"] * this["n"] * P["n"],
            this["d"] * P["d"]
          );
        },

        /**
         * Divides two rational numbers
         *
         * Ex: new Fraction("-17.(345)").inverse().div(3)
         **/
        "div": function(a, b) {

          parse(a, b);
          return newFraction(
            this["s"] * P["s"] * this["n"] * P["d"],
            this["d"] * P["n"]
          );
        },

        /**
         * Clones the actual object
         *
         * Ex: new Fraction("-17.(345)").clone()
         **/
        "clone": function() {
          return newFraction(this['s'] * this['n'], this['d']);
        },

        /**
         * Calculates the modulo of two rational numbers - a more precise fmod
         *
         * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
         **/
        "mod": function(a, b) {

          if (isNaN(this['n']) || isNaN(this['d'])) {
            return new Fraction(NaN);
          }

          if (a === undefined) {
            return newFraction(this["s"] * this["n"] % this["d"], 1);
          }

          parse(a, b);
          if (0 === P["n"] && 0 === this["d"]) {
            throw Fraction['DivisionByZero'];
          }

          /*
           * First silly attempt, kinda slow
           *
           return that["sub"]({
           "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
           "d": num["d"],
           "s": this["s"]
           });*/

          /*
           * New attempt: a1 / b1 = a2 / b2 * q + r
           * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
           * => (b2 * a1 % a2 * b1) / (b1 * b2)
           */
          return newFraction(
            this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
            P["d"] * this["d"]
          );
        },

        /**
         * Calculates the fractional gcd of two rational numbers
         *
         * Ex: new Fraction(5,8).gcd(3,7) => 1/56
         */
        "gcd": function(a, b) {

          parse(a, b);

          // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

          return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
        },

        /**
         * Calculates the fractional lcm of two rational numbers
         *
         * Ex: new Fraction(5,8).lcm(3,7) => 15
         */
        "lcm": function(a, b) {

          parse(a, b);

          // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

          if (P["n"] === 0 && this["n"] === 0) {
            return newFraction(0, 1);
          }
          return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
        },

        /**
         * Calculates the ceil of a rational number
         *
         * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
         **/
        "ceil": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Calculates the floor of a rational number
         *
         * Ex: new Fraction('4.(3)').floor() => (4 / 1)
         **/
        "floor": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Rounds a rational numbers
         *
         * Ex: new Fraction('4.(3)').round() => (4 / 1)
         **/
        "round": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Gets the inverse of the fraction, means numerator and denominator are exchanged
         *
         * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
         **/
        "inverse": function() {

          return newFraction(this["s"] * this["d"], this["n"]);
        },

        /**
         * Calculates the fraction to some rational exponent, if possible
         *
         * Ex: new Fraction(-1,2).pow(-3) => -8
         */
        "pow": function(a, b) {

          parse(a, b);

          // Trivial case when exp is an integer

          if (P['d'] === 1) {

            if (P['s'] < 0) {
              return newFraction(Math.pow(this['s'] * this["d"], P['n']), Math.pow(this["n"], P['n']));
            } else {
              return newFraction(Math.pow(this['s'] * this["n"], P['n']), Math.pow(this["d"], P['n']));
            }
          }

          // Negative roots become complex
          //     (-a/b)^(c/d) = x
          // <=> (-1)^(c/d) * (a/b)^(c/d) = x
          // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°
          // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )
          // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.
          if (this['s'] < 0) return null;

          // Now prime factor n and d
          var N = factorize(this['n']);
          var D = factorize(this['d']);

          // Exponentiate and take root for n and d individually
          var n = 1;
          var d = 1;
          for (var k in N) {
            if (k === '1') continue;
            if (k === '0') {
              n = 0;
              break;
            }
            N[k]*= P['n'];

            if (N[k] % P['d'] === 0) {
              N[k]/= P['d'];
            } else return null;
            n*= Math.pow(k, N[k]);
          }

          for (var k in D) {
            if (k === '1') continue;
            D[k]*= P['n'];

            if (D[k] % P['d'] === 0) {
              D[k]/= P['d'];
            } else return null;
            d*= Math.pow(k, D[k]);
          }

          if (P['s'] < 0) {
            return newFraction(d, n);
          }
          return newFraction(n, d);
        },

        /**
         * Check if two rational numbers are the same
         *
         * Ex: new Fraction(19.6).equals([98, 5]);
         **/
        "equals": function(a, b) {

          parse(a, b);
          return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
        },

        /**
         * Check if two rational numbers are the same
         *
         * Ex: new Fraction(19.6).equals([98, 5]);
         **/
        "compare": function(a, b) {

          parse(a, b);
          var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
          return (0 < t) - (t < 0);
        },

        "simplify": function(eps) {

          if (isNaN(this['n']) || isNaN(this['d'])) {
            return this;
          }

          eps = eps || 0.001;

          var thisABS = this['abs']();
          var cont = thisABS['toContinued']();

          for (var i = 1; i < cont.length; i++) {

            var s = newFraction(cont[i - 1], 1);
            for (var k = i - 2; k >= 0; k--) {
              s = s['inverse']()['add'](cont[k]);
            }

            if (s['sub'](thisABS)['abs']().valueOf() < eps) {
              return s['mul'](this['s']);
            }
          }
          return this;
        },

        /**
         * Check if two rational numbers are divisible
         *
         * Ex: new Fraction(19.6).divisible(1.5);
         */
        "divisible": function(a, b) {

          parse(a, b);
          return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
        },

        /**
         * Returns a decimal representation of the fraction
         *
         * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
         **/
        'valueOf': function() {

          return this["s"] * this["n"] / this["d"];
        },

        /**
         * Returns a string-fraction representation of a Fraction object
         *
         * Ex: new Fraction("1.'3'").toFraction(true) => "4 1/3"
         **/
        'toFraction': function(excludeWhole) {

          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str+= '-';
          }

          if (d === 1) {
            str+= n;
          } else {

            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str+= whole;
              str+= " ";
              n%= d;
            }

            str+= n;
            str+= '/';
            str+= d;
          }
          return str;
        },

        /**
         * Returns a latex representation of a Fraction object
         *
         * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
         **/
        'toLatex': function(excludeWhole) {

          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str+= '-';
          }

          if (d === 1) {
            str+= n;
          } else {

            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str+= whole;
              n%= d;
            }

            str+= "\\frac{";
            str+= n;
            str+= '}{';
            str+= d;
            str+= '}';
          }
          return str;
        },

        /**
         * Returns an array of continued fraction elements
         *
         * Ex: new Fraction("7/8").toContinued() => [0,1,7]
         */
        'toContinued': function() {

          var t;
          var a = this['n'];
          var b = this['d'];
          var res = [];

          if (isNaN(a) || isNaN(b)) {
            return res;
          }

          do {
            res.push(Math.floor(a / b));
            t = a % b;
            a = b;
            b = t;
          } while (a !== 1);

          return res;
        },

        /**
         * Creates a string representation of a fraction with all digits
         *
         * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
         **/
        'toString': function(dec) {

          var N = this["n"];
          var D = this["d"];

          if (isNaN(N) || isNaN(D)) {
            return "NaN";
          }

          dec = dec || 15; // 15 = decimal places when no repetation

          var cycLen = cycleLen(N, D); // Cycle length
          var cycOff = cycleStart(N, D, cycLen); // Cycle start

          var str = this['s'] < 0 ? "-" : "";

          str+= N / D | 0;

          N%= D;
          N*= 10;

          if (N)
            str+= ".";

          if (cycLen) {

            for (var i = cycOff; i--;) {
              str+= N / D | 0;
              N%= D;
              N*= 10;
            }
            str+= "(";
            for (var i = cycLen; i--;) {
              str+= N / D | 0;
              N%= D;
              N*= 10;
            }
            str+= ")";
          } else {
            for (var i = dec; N && i--;) {
              str+= N / D | 0;
              N%= D;
              N*= 10;
            }
          }
          return str;
        }
      };

      {
        Object.defineProperty(Fraction, "__esModule", { 'value': true });
        Fraction['default'] = Fraction;
        Fraction['Fraction'] = Fraction;
        module['exports'] = Fraction;
      }

    })();
    });

    var Fraction$1 = /*@__PURE__*/getDefaultExportFromCjs(fraction);

    var name$l = 'Fraction';
    var dependencies$l = [];
    var createFractionClass = /* #__PURE__ */factory(name$l, dependencies$l, () => {
      /**
       * Attach type information
       */
      Object.defineProperty(Fraction$1, 'name', {
        value: 'Fraction'
      });
      Fraction$1.prototype.constructor = Fraction$1;
      Fraction$1.prototype.type = 'Fraction';
      Fraction$1.prototype.isFraction = true;

      /**
       * Get a JSON representation of a Fraction containing type information
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
       */
      Fraction$1.prototype.toJSON = function () {
        return {
          mathjs: 'Fraction',
          n: this.s * this.n,
          d: this.d
        };
      };

      /**
       * Instantiate a Fraction from a JSON object
       * @param {Object} json  a JSON object structured as:
       *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
       * @return {BigNumber}
       */
      Fraction$1.fromJSON = function (json) {
        return new Fraction$1(json);
      };
      return Fraction$1;
    }, {
      isClass: true
    });

    var name$k = 'Matrix';
    var dependencies$k = [];
    var createMatrixClass = /* #__PURE__ */factory(name$k, dependencies$k, () => {
      /**
       * @constructor Matrix
       *
       * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
       * array. A matrix can be constructed as:
       *
       *     let matrix = math.matrix(data)
       *
       * Matrix contains the functions to resize, get and set values, get the size,
       * clone the matrix and to convert the matrix to a vector, array, or scalar.
       * Furthermore, one can iterate over the matrix using map and forEach.
       * The internal Array of the Matrix can be accessed using the function valueOf.
       *
       * Example usage:
       *
       *     let matrix = math.matrix([[1, 2], [3, 4]])
       *     matix.size()              // [2, 2]
       *     matrix.resize([3, 2], 5)
       *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
       *     matrix.subset([1,2])       // 3 (indexes are zero-based)
       *
       */
      function Matrix() {
        if (!(this instanceof Matrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }
      }

      /**
       * Attach type information
       */
      Matrix.prototype.type = 'Matrix';
      Matrix.prototype.isMatrix = true;

      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()   // retrieve storage format
       *
       * @return {string}           The storage format.
       */
      Matrix.prototype.storage = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke storage on a Matrix interface');
      };

      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()    // retrieve matrix datatype
       *
       * @return {string}           The datatype.
       */
      Matrix.prototype.datatype = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke datatype on a Matrix interface');
      };

      /**
       * Create a new Matrix With the type of the current matrix instance
       * @param {Array | Object} data
       * @param {string} [datatype]
       */
      Matrix.prototype.create = function (data, datatype) {
        throw new Error('Cannot invoke create on a Matrix interface');
      };

      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */
      Matrix.prototype.subset = function (index, replacement, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke subset on a Matrix interface');
      };

      /**
       * Get a single element from the matrix.
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */
      Matrix.prototype.get = function (index) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke get on a Matrix interface');
      };

      /**
       * Replace a single element in the matrix.
       * @param {number[]} index   Zero-based index
       * @param {*} value
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be left undefined.
       * @return {Matrix} self
       */
      Matrix.prototype.set = function (index, value, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke set on a Matrix interface');
      };

      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @param {number[]} size           The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */
      Matrix.prototype.resize = function (size, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke resize on a Matrix interface');
      };

      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * @param {number[]} size           The new size the matrix should have.
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */
      Matrix.prototype.reshape = function (size, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke reshape on a Matrix interface');
      };

      /**
       * Create a clone of the matrix
       * @return {Matrix} clone
       */
      Matrix.prototype.clone = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke clone on a Matrix interface');
      };

      /**
       * Retrieve the size of the matrix.
       * @returns {number[]} size
       */
      Matrix.prototype.size = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke size on a Matrix interface');
      };

      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       *
       * @return {Matrix} matrix
       */
      Matrix.prototype.map = function (callback, skipZeros) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke map on a Matrix interface');
      };

      /**
       * Execute a callback function on each entry of the matrix.
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       */
      Matrix.prototype.forEach = function (callback) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke forEach on a Matrix interface');
      };

      /**
       * Iterate over the matrix elements
       * @return {Iterable<{ value, index: number[] }>}
       */
      Matrix.prototype[Symbol.iterator] = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot iterate a Matrix interface');
      };

      /**
       * Create an Array with a copy of the data of the Matrix
       * @returns {Array} array
       */
      Matrix.prototype.toArray = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke toArray on a Matrix interface');
      };

      /**
       * Get the primitive value of the Matrix: a multidimensional array
       * @returns {Array} array
       */
      Matrix.prototype.valueOf = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke valueOf on a Matrix interface');
      };

      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */
      Matrix.prototype.format = function (options) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke format on a Matrix interface');
      };

      /**
       * Get a string representation of the matrix
       * @returns {string} str
       */
      Matrix.prototype.toString = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke toString on a Matrix interface');
      };
      return Matrix;
    }, {
      isClass: true
    });

    // function utils

    /**
     * Find the maximum number of arguments expected by a typed function.
     * @param {function} fn   A typed function
     * @return {number} Returns the maximum number of expected arguments.
     *                  Returns -1 when no signatures where found on the function.
     */
    function maxArgumentCount(fn) {
      return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
        var count = (signature.match(/,/g) || []).length + 1;
        return Math.max(args, count);
      }, -1);
    }

    var name$j = 'DenseMatrix';
    var dependencies$j = ['Matrix'];
    var createDenseMatrixClass = /* #__PURE__ */factory(name$j, dependencies$j, _ref => {
      var {
        Matrix
      } = _ref;
      /**
       * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
       * @class DenseMatrix
       * @enum {{ value, index: number[] }}
       */
      function DenseMatrix(data, datatype) {
        if (!(this instanceof DenseMatrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }
        if (datatype && !isString(datatype)) {
          throw new Error('Invalid datatype: ' + datatype);
        }
        if (isMatrix(data)) {
          // check data is a DenseMatrix
          if (data.type === 'DenseMatrix') {
            // clone data & size
            this._data = clone$1(data._data);
            this._size = clone$1(data._size);
            this._datatype = datatype || data._datatype;
          } else {
            // build data from existing matrix
            this._data = data.toArray();
            this._size = data.size();
            this._datatype = datatype || data._datatype;
          }
        } else if (data && isArray(data.data) && isArray(data.size)) {
          // initialize fields from JSON representation
          this._data = data.data;
          this._size = data.size;
          // verify the dimensions of the array
          validate(this._data, this._size);
          this._datatype = datatype || data.datatype;
        } else if (isArray(data)) {
          // replace nested Matrices with Arrays
          this._data = preprocess(data);
          // get the dimensions of the array
          this._size = arraySize(this._data);
          // verify the dimensions of the array, TODO: compute size while processing array
          validate(this._data, this._size);
          // data type unknown
          this._datatype = datatype;
        } else if (data) {
          // unsupported type
          throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
        } else {
          // nothing provided
          this._data = [];
          this._size = [0];
          this._datatype = datatype;
        }
      }
      DenseMatrix.prototype = new Matrix();

      /**
       * Create a new DenseMatrix
       */
      DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
        return new DenseMatrix(data, datatype);
      };

      /**
       * Attach type information
       */
      Object.defineProperty(DenseMatrix, 'name', {
        value: 'DenseMatrix'
      });
      DenseMatrix.prototype.constructor = DenseMatrix;
      DenseMatrix.prototype.type = 'DenseMatrix';
      DenseMatrix.prototype.isDenseMatrix = true;

      /**
       * Get the matrix type
       *
       * Usage:
       *    const matrixType = matrix.getDataType()  // retrieves the matrix type
       *
       * @memberOf DenseMatrix
       * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
       */
      DenseMatrix.prototype.getDataType = function () {
        return getArrayDataType(this._data, typeOf);
      };

      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()  // retrieve storage format
       *
       * @memberof DenseMatrix
       * @return {string}           The storage format.
       */
      DenseMatrix.prototype.storage = function () {
        return 'dense';
      };

      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()   // retrieve matrix datatype
       *
       * @memberof DenseMatrix
       * @return {string}           The datatype.
       */
      DenseMatrix.prototype.datatype = function () {
        return this._datatype;
      };

      /**
       * Create a new DenseMatrix
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {string} [datatype]
       */
      DenseMatrix.prototype.create = function (data, datatype) {
        return new DenseMatrix(data, datatype);
      };

      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @memberof DenseMatrix
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */
      DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
        switch (arguments.length) {
          case 1:
            return _get(this, index);

          // intentional fall through
          case 2:
          case 3:
            return _set(this, index, replacement, defaultValue);
          default:
            throw new SyntaxError('Wrong number of arguments');
        }
      };

      /**
       * Get a single element from the matrix.
       * @memberof DenseMatrix
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */
      DenseMatrix.prototype.get = function (index) {
        if (!isArray(index)) {
          throw new TypeError('Array expected');
        }
        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        }

        // check index
        for (var x = 0; x < index.length; x++) {
          validateIndex(index[x], this._size[x]);
        }
        var data = this._data;
        for (var i = 0, ii = index.length; i < ii; i++) {
          var indexI = index[i];
          validateIndex(indexI, data.length);
          data = data[indexI];
        }
        return data;
      };

      /**
       * Replace a single element in the matrix.
       * @memberof DenseMatrix
       * @param {number[]} index   Zero-based index
       * @param {*} value
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be left undefined.
       * @return {DenseMatrix} self
       */
      DenseMatrix.prototype.set = function (index, value, defaultValue) {
        if (!isArray(index)) {
          throw new TypeError('Array expected');
        }
        if (index.length < this._size.length) {
          throw new DimensionError(index.length, this._size.length, '<');
        }
        var i, ii, indexI;

        // enlarge matrix when needed
        var size = index.map(function (i) {
          return i + 1;
        });
        _fit(this, size, defaultValue);

        // traverse over the dimensions
        var data = this._data;
        for (i = 0, ii = index.length - 1; i < ii; i++) {
          indexI = index[i];
          validateIndex(indexI, data.length);
          data = data[indexI];
        }

        // set new value
        indexI = index[index.length - 1];
        validateIndex(indexI, data.length);
        data[indexI] = value;
        return this;
      };

      /**
       * Get a submatrix of this matrix
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix
       * @param {Index} index   Zero-based index
       * @private
       */
      function _get(matrix, index) {
        if (!isIndex(index)) {
          throw new TypeError('Invalid index');
        }
        var isScalar = index.isScalar();
        if (isScalar) {
          // return a scalar
          return matrix.get(index.min());
        } else {
          // validate dimensions
          var size = index.size();
          if (size.length !== matrix._size.length) {
            throw new DimensionError(size.length, matrix._size.length);
          }

          // validate if any of the ranges in the index is out of range
          var min = index.min();
          var max = index.max();
          for (var i = 0, ii = matrix._size.length; i < ii; i++) {
            validateIndex(min[i], matrix._size[i]);
            validateIndex(max[i], matrix._size[i]);
          }

          // retrieve submatrix
          // TODO: more efficient when creating an empty matrix and setting _data and _size manually
          return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
        }
      }

      /**
       * Recursively get a submatrix of a multi dimensional matrix.
       * Index is not checked for correct number or length of dimensions.
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {Index} index
       * @param {number} dims   Total number of dimensions
       * @param {number} dim    Current dimension
       * @return {Array} submatrix
       * @private
       */
      function _getSubmatrix(data, index, dims, dim) {
        var last = dim === dims - 1;
        var range = index.dimension(dim);
        if (last) {
          return range.map(function (i) {
            validateIndex(i, data.length);
            return data[i];
          }).valueOf();
        } else {
          return range.map(function (i) {
            validateIndex(i, data.length);
            var child = data[i];
            return _getSubmatrix(child, index, dims, dim + 1);
          }).valueOf();
        }
      }

      /**
       * Replace a submatrix in this matrix
       * Indexes are zero-based.
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix
       * @param {Index} index
       * @param {DenseMatrix | Array | *} submatrix
       * @param {*} defaultValue          Default value, filled in on new entries when
       *                                  the matrix is resized.
       * @return {DenseMatrix} matrix
       * @private
       */
      function _set(matrix, index, submatrix, defaultValue) {
        if (!index || index.isIndex !== true) {
          throw new TypeError('Invalid index');
        }

        // get index size and check whether the index contains a single value
        var iSize = index.size();
        var isScalar = index.isScalar();

        // calculate the size of the submatrix, and convert it into an Array if needed
        var sSize;
        if (isMatrix(submatrix)) {
          sSize = submatrix.size();
          submatrix = submatrix.valueOf();
        } else {
          sSize = arraySize(submatrix);
        }
        if (isScalar) {
          // set a scalar

          // check whether submatrix is a scalar
          if (sSize.length !== 0) {
            throw new TypeError('Scalar expected');
          }
          matrix.set(index.min(), submatrix, defaultValue);
        } else {
          // set a submatrix

          // validate dimensions
          if (iSize.length < matrix._size.length) {
            throw new DimensionError(iSize.length, matrix._size.length, '<');
          }
          if (sSize.length < iSize.length) {
            // calculate number of missing outer dimensions
            var i = 0;
            var outer = 0;
            while (iSize[i] === 1 && sSize[i] === 1) {
              i++;
            }
            while (iSize[i] === 1) {
              outer++;
              i++;
            }

            // unsqueeze both outer and inner dimensions
            submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
          }

          // check whether the size of the submatrix matches the index size
          if (!deepStrictEqual(iSize, sSize)) {
            throw new DimensionError(iSize, sSize, '>');
          }

          // enlarge matrix when needed
          var size = index.max().map(function (i) {
            return i + 1;
          });
          _fit(matrix, size, defaultValue);

          // insert the sub matrix
          var dims = iSize.length;
          var dim = 0;
          _setSubmatrix(matrix._data, index, submatrix, dims, dim);
        }
        return matrix;
      }

      /**
       * Replace a submatrix of a multi dimensional matrix.
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {Index} index
       * @param {Array} submatrix
       * @param {number} dims   Total number of dimensions
       * @param {number} dim
       * @private
       */
      function _setSubmatrix(data, index, submatrix, dims, dim) {
        var last = dim === dims - 1;
        var range = index.dimension(dim);
        if (last) {
          range.forEach(function (dataIndex, subIndex) {
            validateIndex(dataIndex);
            data[dataIndex] = submatrix[subIndex[0]];
          });
        } else {
          range.forEach(function (dataIndex, subIndex) {
            validateIndex(dataIndex);
            _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
          });
        }
      }

      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @memberof DenseMatrix
       * @param {number[] || Matrix} size The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */
      DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
        // validate arguments
        if (!isCollection(size)) {
          throw new TypeError('Array or Matrix expected');
        }

        // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector
        var sizeArray = size.valueOf().map(value => {
          return Array.isArray(value) && value.length === 1 ? value[0] : value;
        });

        // matrix to resize
        var m = copy ? this.clone() : this;
        // resize matrix
        return _resize(m, sizeArray, defaultValue);
      };
      function _resize(matrix, size, defaultValue) {
        // check size
        if (size.length === 0) {
          // first value in matrix
          var v = matrix._data;
          // go deep
          while (isArray(v)) {
            v = v[0];
          }
          return v;
        }
        // resize matrix
        matrix._size = size.slice(0); // copy the array
        matrix._data = resize(matrix._data, matrix._size, defaultValue);
        // return matrix
        return matrix;
      }

      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * NOTE: This might be better suited to copy by default, instead of modifying
       *       in place. For now, it operates in place to remain consistent with
       *       resize().
       *
       * @memberof DenseMatrix
       * @param {number[]} size           The new size the matrix should have.
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */
      DenseMatrix.prototype.reshape = function (size, copy) {
        var m = copy ? this.clone() : this;
        m._data = reshape$1(m._data, size);
        var currentLength = m._size.reduce((length, size) => length * size);
        m._size = processSizesWildcard(size, currentLength);
        return m;
      };

      /**
       * Enlarge the matrix when it is smaller than given size.
       * If the matrix is larger or equal sized, nothing is done.
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix           The matrix to be resized
       * @param {number[]} size
       * @param {*} defaultValue          Default value, filled in on new entries.
       * @private
       */
      function _fit(matrix, size, defaultValue) {
        var
        // copy the array
        newSize = matrix._size.slice(0);
        var changed = false;

        // add dimensions when needed
        while (newSize.length < size.length) {
          newSize.push(0);
          changed = true;
        }

        // enlarge size when needed
        for (var i = 0, ii = size.length; i < ii; i++) {
          if (size[i] > newSize[i]) {
            newSize[i] = size[i];
            changed = true;
          }
        }
        if (changed) {
          // resize only when size is changed
          _resize(matrix, newSize, defaultValue);
        }
      }

      /**
       * Create a clone of the matrix
       * @memberof DenseMatrix
       * @return {DenseMatrix} clone
       */
      DenseMatrix.prototype.clone = function () {
        var m = new DenseMatrix({
          data: clone$1(this._data),
          size: clone$1(this._size),
          datatype: this._datatype
        });
        return m;
      };

      /**
       * Retrieve the size of the matrix.
       * @memberof DenseMatrix
       * @returns {number[]} size
       */
      DenseMatrix.prototype.size = function () {
        return this._size.slice(0); // return a clone of _size
      };

      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @memberof DenseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       *
       * @return {DenseMatrix} matrix
       */
      DenseMatrix.prototype.map = function (callback) {
        // matrix instance
        var me = this;
        var args = maxArgumentCount(callback);
        var recurse = function recurse(value, index) {
          if (isArray(value)) {
            return value.map(function (child, i) {
              return recurse(child, index.concat(i));
            });
          } else {
            // invoke the callback function with the right number of arguments
            if (args === 1) {
              return callback(value);
            } else if (args === 2) {
              return callback(value, index);
            } else {
              // 3 or -1
              return callback(value, index, me);
            }
          }
        };

        // determine the new datatype when the original matrix has datatype defined
        // TODO: should be done in matrix constructor instead
        var data = recurse(this._data, []);
        var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;
        return new DenseMatrix(data, datatype);
      };

      /**
       * Execute a callback function on each entry of the matrix.
       * @memberof DenseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       */
      DenseMatrix.prototype.forEach = function (callback) {
        // matrix instance
        var me = this;
        var recurse = function recurse(value, index) {
          if (isArray(value)) {
            value.forEach(function (child, i) {
              recurse(child, index.concat(i));
            });
          } else {
            callback(value, index, me);
          }
        };
        recurse(this._data, []);
      };

      /**
       * Iterate over the matrix elements
       * @return {Iterable<{ value, index: number[] }>}
       */
      DenseMatrix.prototype[Symbol.iterator] = function* () {
        var recurse = function* recurse(value, index) {
          if (isArray(value)) {
            for (var i = 0; i < value.length; i++) {
              yield* recurse(value[i], index.concat(i));
            }
          } else {
            yield {
              value,
              index
            };
          }
        };
        yield* recurse(this._data, []);
      };

      /**
       * Returns an array containing the rows of a 2D matrix
       * @returns {Array<Matrix>}
       */
      DenseMatrix.prototype.rows = function () {
        var result = [];
        var s = this.size();
        if (s.length !== 2) {
          throw new TypeError('Rows can only be returned for a 2D matrix.');
        }
        var data = this._data;
        for (var row of data) {
          result.push(new DenseMatrix([row], this._datatype));
        }
        return result;
      };

      /**
       * Returns an array containing the columns of a 2D matrix
       * @returns {Array<Matrix>}
       */
      DenseMatrix.prototype.columns = function () {
        var _this = this;
        var result = [];
        var s = this.size();
        if (s.length !== 2) {
          throw new TypeError('Rows can only be returned for a 2D matrix.');
        }
        var data = this._data;
        var _loop = function _loop(i) {
          var col = data.map(row => [row[i]]);
          result.push(new DenseMatrix(col, _this._datatype));
        };
        for (var i = 0; i < s[1]; i++) {
          _loop(i);
        }
        return result;
      };

      /**
       * Create an Array with a copy of the data of the DenseMatrix
       * @memberof DenseMatrix
       * @returns {Array} array
       */
      DenseMatrix.prototype.toArray = function () {
        return clone$1(this._data);
      };

      /**
       * Get the primitive value of the DenseMatrix: a multidimensional array
       * @memberof DenseMatrix
       * @returns {Array} array
       */
      DenseMatrix.prototype.valueOf = function () {
        return this._data;
      };

      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @memberof DenseMatrix
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */
      DenseMatrix.prototype.format = function (options) {
        return format(this._data, options);
      };

      /**
       * Get a string representation of the matrix
       * @memberof DenseMatrix
       * @returns {string} str
       */
      DenseMatrix.prototype.toString = function () {
        return format(this._data);
      };

      /**
       * Get a JSON representation of the matrix
       * @memberof DenseMatrix
       * @returns {Object}
       */
      DenseMatrix.prototype.toJSON = function () {
        return {
          mathjs: 'DenseMatrix',
          data: this._data,
          size: this._size,
          datatype: this._datatype
        };
      };

      /**
       * Get the kth Matrix diagonal.
       *
       * @memberof DenseMatrix
       * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
       *
       * @returns {Matrix}                     The matrix with the diagonal values.
       */
      DenseMatrix.prototype.diagonal = function (k) {
        // validate k if any
        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          }
          // is must be an integer
          if (!isNumber(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;

        // rows & columns
        var rows = this._size[0];
        var columns = this._size[1];

        // number diagonal values
        var n = Math.min(rows - kSub, columns - kSuper);

        // x is a matrix get diagonal from matrix
        var data = [];

        // loop rows
        for (var i = 0; i < n; i++) {
          data[i] = this._data[i + kSub][i + kSuper];
        }

        // create DenseMatrix
        return new DenseMatrix({
          data,
          size: [n],
          datatype: this._datatype
        });
      };

      /**
       * Create a diagonal matrix.
       *
       * @memberof DenseMatrix
       * @param {Array} size                     The matrix size.
       * @param {number | Matrix | Array } value The values for the diagonal.
       * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
       * @param {number} [defaultValue]          The default value for non-diagonal
       * @param {string} [datatype]              The datatype for the diagonal
       *
       * @returns {DenseMatrix}
       */
      DenseMatrix.diagonal = function (size, value, k, defaultValue) {
        if (!isArray(size)) {
          throw new TypeError('Array expected, size parameter');
        }
        if (size.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        }

        // map size & validate
        size = size.map(function (s) {
          // check it is a big number
          if (isBigNumber(s)) {
            // convert it
            s = s.toNumber();
          }
          // validate arguments
          if (!isNumber(s) || !isInteger$1(s) || s < 1) {
            throw new Error('Size values must be positive integers');
          }
          return s;
        });

        // validate k if any
        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          }
          // is must be an integer
          if (!isNumber(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;

        // rows and columns
        var rows = size[0];
        var columns = size[1];

        // number of non-zero items
        var n = Math.min(rows - kSub, columns - kSuper);

        // value extraction function
        var _value;

        // check value
        if (isArray(value)) {
          // validate array
          if (value.length !== n) {
            // number of values in array must be n
            throw new Error('Invalid value array length');
          }
          // define function
          _value = function _value(i) {
            // return value @ i
            return value[i];
          };
        } else if (isMatrix(value)) {
          // matrix size
          var ms = value.size();
          // validate matrix
          if (ms.length !== 1 || ms[0] !== n) {
            // number of values in array must be n
            throw new Error('Invalid matrix length');
          }
          // define function
          _value = function _value(i) {
            // return value @ i
            return value.get([i]);
          };
        } else {
          // define function
          _value = function _value() {
            // return value
            return value;
          };
        }

        // discover default value if needed
        if (!defaultValue) {
          // check first value in array
          defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
          : 0;
        }

        // empty array
        var data = [];

        // check we need to resize array
        if (size.length > 0) {
          // resize array
          data = resize(data, size, defaultValue);
          // fill diagonal
          for (var d = 0; d < n; d++) {
            data[d + kSub][d + kSuper] = _value(d);
          }
        }

        // create DenseMatrix
        return new DenseMatrix({
          data,
          size: [rows, columns]
        });
      };

      /**
       * Generate a matrix from a JSON object
       * @memberof DenseMatrix
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
       *                       where mathjs is optional
       * @returns {DenseMatrix}
       */
      DenseMatrix.fromJSON = function (json) {
        return new DenseMatrix(json);
      };

      /**
       * Swap rows i and j in Matrix.
       *
       * @memberof DenseMatrix
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       *
       * @return {Matrix}        The matrix reference
       */
      DenseMatrix.prototype.swapRows = function (i, j) {
        // check index
        if (!isNumber(i) || !isInteger$1(i) || !isNumber(j) || !isInteger$1(j)) {
          throw new Error('Row index must be positive integers');
        }
        // check dimensions
        if (this._size.length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        }
        // validate index
        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[0]);

        // swap rows
        DenseMatrix._swapRows(i, j, this._data);
        // return current instance
        return this;
      };

      /**
       * Swap rows i and j in Dense Matrix data structure.
       *
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       * @param {Array} data     Matrix data
       */
      DenseMatrix._swapRows = function (i, j, data) {
        // swap values i <-> j
        var vi = data[i];
        data[i] = data[j];
        data[j] = vi;
      };

      /**
       * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
       * Matrices. Replaces all nested Matrices with Arrays
       * @memberof DenseMatrix
       * @param {Array} data
       * @return {Array} data
       */
      function preprocess(data) {
        for (var i = 0, ii = data.length; i < ii; i++) {
          var elem = data[i];
          if (isArray(elem)) {
            data[i] = preprocess(elem);
          } else if (elem && elem.isMatrix === true) {
            data[i] = preprocess(elem.valueOf());
          }
        }
        return data;
      }
      return DenseMatrix;
    }, {
      isClass: true
    });

    /**
     * Execute the callback function element wise for each element in array and any
     * nested array
     * Returns an array with the results
     * @param {Array | Matrix} array
     * @param {Function} callback   The callback is called with two parameters:
     *                              value1 and value2, which contain the current
     *                              element of both arrays.
     * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
     *
     * @return {Array | Matrix} res
     */
    function deepMap(array, callback, skipZeros) {
      if (array && typeof array.map === 'function') {
        // TODO: replace array.map with a for loop to improve performance
        return array.map(function (x) {
          return deepMap(x, callback);
        });
      } else {
        return callback(array);
      }
    }

    var name$i = 'isInteger';
    var dependencies$i = ['typed'];
    var createIsInteger = /* #__PURE__ */factory(name$i, dependencies$i, _ref => {
      var {
        typed
      } = _ref;
      /**
       * Test whether a value is an integer number.
       * The function supports `number`, `BigNumber`, and `Fraction`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isInteger(x)
       *
       * Examples:
       *
       *    math.isInteger(2)                     // returns true
       *    math.isInteger(0)                     // returns true
       *    math.isInteger(0.5)                   // returns false
       *    math.isInteger(math.bignumber(500))   // returns true
       *    math.isInteger(math.fraction(4))      // returns true
       *    math.isInteger('3')                   // returns true
       *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
       *    math.isInteger(math.complex('2-4i'))  // throws an error
       *
       * See also:
       *
       *    isNumeric, isPositive, isNegative, isZero
       *
       * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
       * @return {boolean}  Returns true when `x` contains a numeric, integer value.
       *                    Throws an error in case of an unknown data type.
       */
      return typed(name$i, {
        number: isInteger$1,
        // TODO: what to do with isInteger(add(0.1, 0.2))  ?

        BigNumber: function BigNumber(x) {
          return x.isInt();
        },
        Fraction: function Fraction(x) {
          return x.d === 1 && isFinite(x.n);
        },
        'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
      });
    });

    var n2 = 'number, number';
    function addNumber(a, b) {
      return a + b;
    }
    addNumber.signature = n2;
    function multiplyNumber(a, b) {
      return a * b;
    }
    multiplyNumber.signature = n2;

    /**
     * Compares two BigNumbers.
     * @param {BigNumber} x       First value to compare
     * @param {BigNumber} y       Second value to compare
     * @param {number} [epsilon]  The maximum relative difference between x and y
     *                            If epsilon is undefined or null, the function will
     *                            test whether x and y are exactly equal.
     * @return {boolean} whether the two numbers are nearly equal
     */
    function nearlyEqual(x, y, epsilon) {
      // if epsilon is null or undefined, test whether x and y are exactly equal
      if (epsilon === null || epsilon === undefined) {
        return x.eq(y);
      }

      // use "==" operator, handles infinities
      if (x.eq(y)) {
        return true;
      }

      // NaN
      if (x.isNaN() || y.isNaN()) {
        return false;
      }

      // at this point x and y should be finite
      if (x.isFinite() && y.isFinite()) {
        // check numbers are very close, needed when comparing numbers near zero
        var diff = x.minus(y).abs();
        if (diff.isZero()) {
          return true;
        } else {
          // use relative error
          var max = x.constructor.max(x.abs(), y.abs());
          return diff.lte(max.times(epsilon));
        }
      }

      // Infinite and Number or negative Infinite and positive Infinite cases
      return false;
    }

    /**
     * Test whether two complex values are equal provided a given epsilon.
     * Does not use or change the global Complex.EPSILON setting
     * @param {Complex} x
     * @param {Complex} y
     * @param {number} epsilon
     * @returns {boolean}
     */
    function complexEquals(x, y, epsilon) {
      return nearlyEqual$1(x.re, y.re, epsilon) && nearlyEqual$1(x.im, y.im, epsilon);
    }

    var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {
      var {
        typed
      } = _ref;
      return {
        'Unit, Unit': typed.referToSelf(self => (x, y) => {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }
          return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);
        })
      };
    });

    var name$h = 'equalScalar';
    var dependencies$h = ['typed', 'config'];
    var createEqualScalar = /* #__PURE__ */factory(name$h, dependencies$h, _ref => {
      var {
        typed,
        config
      } = _ref;
      var compareUnits = createCompareUnits({
        typed
      });

      /**
       * Test whether two scalar values are nearly equal.
       *
       * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
       * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
       * @private
       */
      return typed(name$h, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x === y;
        },
        'number, number': function numberNumber(x, y) {
          return nearlyEqual$1(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.eq(y) || nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.equals(y);
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          return complexEquals(x, y, config.epsilon);
        }
      }, compareUnits);
    });
    factory(name$h, ['typed', 'config'], _ref2 => {
      var {
        typed,
        config
      } = _ref2;
      return typed(name$h, {
        'number, number': function numberNumber(x, y) {
          return nearlyEqual$1(x, y, config.epsilon);
        }
      });
    });

    var name$g = 'SparseMatrix';
    var dependencies$g = ['typed', 'equalScalar', 'Matrix'];
    var createSparseMatrixClass = /* #__PURE__ */factory(name$g, dependencies$g, _ref => {
      var {
        typed,
        equalScalar,
        Matrix
      } = _ref;
      /**
       * Sparse Matrix implementation. This type implements
       * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))
       * format for two-dimensional sparse matrices.
       * @class SparseMatrix
       */
      function SparseMatrix(data, datatype) {
        if (!(this instanceof SparseMatrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }
        if (datatype && !isString(datatype)) {
          throw new Error('Invalid datatype: ' + datatype);
        }
        if (isMatrix(data)) {
          // create from matrix
          _createFromMatrix(this, data, datatype);
        } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
          // initialize fields
          this._values = data.values;
          this._index = data.index;
          this._ptr = data.ptr;
          this._size = data.size;
          this._datatype = datatype || data.datatype;
        } else if (isArray(data)) {
          // create from array
          _createFromArray(this, data, datatype);
        } else if (data) {
          // unsupported type
          throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
        } else {
          // nothing provided
          this._values = [];
          this._index = [];
          this._ptr = [0];
          this._size = [0, 0];
          this._datatype = datatype;
        }
      }
      function _createFromMatrix(matrix, source, datatype) {
        // check matrix type
        if (source.type === 'SparseMatrix') {
          // clone arrays
          matrix._values = source._values ? clone$1(source._values) : undefined;
          matrix._index = clone$1(source._index);
          matrix._ptr = clone$1(source._ptr);
          matrix._size = clone$1(source._size);
          matrix._datatype = datatype || source._datatype;
        } else {
          // build from matrix data
          _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
        }
      }
      function _createFromArray(matrix, data, datatype) {
        // initialize fields
        matrix._values = [];
        matrix._index = [];
        matrix._ptr = [];
        matrix._datatype = datatype;
        // discover rows & columns, do not use math.size() to avoid looping array twice
        var rows = data.length;
        var columns = 0;

        // equal signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;
        if (isString(datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
          // convert 0 to the same datatype
          zero = typed.convert(0, datatype);
        }

        // check we have rows (empty array)
        if (rows > 0) {
          // column index
          var j = 0;
          do {
            // store pointer to values index
            matrix._ptr.push(matrix._index.length);
            // loop rows
            for (var i = 0; i < rows; i++) {
              // current row
              var row = data[i];
              // check row is an array
              if (isArray(row)) {
                // update columns if needed (only on first column)
                if (j === 0 && columns < row.length) {
                  columns = row.length;
                }
                // check row has column
                if (j < row.length) {
                  // value
                  var v = row[j];
                  // check value != 0
                  if (!eq(v, zero)) {
                    // store value
                    matrix._values.push(v);
                    // index
                    matrix._index.push(i);
                  }
                }
              } else {
                // update columns if needed (only on first column)
                if (j === 0 && columns < 1) {
                  columns = 1;
                }
                // check value != 0 (row is a scalar)
                if (!eq(row, zero)) {
                  // store value
                  matrix._values.push(row);
                  // index
                  matrix._index.push(i);
                }
              }
            }
            // increment index
            j++;
          } while (j < columns);
        }
        // store number of values in ptr
        matrix._ptr.push(matrix._index.length);
        // size
        matrix._size = [rows, columns];
      }
      SparseMatrix.prototype = new Matrix();

      /**
       * Create a new SparseMatrix
       */
      SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
        return new SparseMatrix(data, datatype);
      };

      /**
       * Attach type information
       */
      Object.defineProperty(SparseMatrix, 'name', {
        value: 'SparseMatrix'
      });
      SparseMatrix.prototype.constructor = SparseMatrix;
      SparseMatrix.prototype.type = 'SparseMatrix';
      SparseMatrix.prototype.isSparseMatrix = true;

      /**
       * Get the matrix type
       *
       * Usage:
       *    const matrixType = matrix.getDataType()  // retrieves the matrix type
       *
       * @memberOf SparseMatrix
       * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
       */
      SparseMatrix.prototype.getDataType = function () {
        return getArrayDataType(this._values, typeOf);
      };

      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()   // retrieve storage format
       *
       * @memberof SparseMatrix
       * @return {string}           The storage format.
       */
      SparseMatrix.prototype.storage = function () {
        return 'sparse';
      };

      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()    // retrieve matrix datatype
       *
       * @memberof SparseMatrix
       * @return {string}           The datatype.
       */
      SparseMatrix.prototype.datatype = function () {
        return this._datatype;
      };

      /**
       * Create a new SparseMatrix
       * @memberof SparseMatrix
       * @param {Array} data
       * @param {string} [datatype]
       */
      SparseMatrix.prototype.create = function (data, datatype) {
        return new SparseMatrix(data, datatype);
      };

      /**
       * Get the matrix density.
       *
       * Usage:
       *     const density = matrix.density()                   // retrieve matrix density
       *
       * @memberof SparseMatrix
       * @return {number}           The matrix density.
       */
      SparseMatrix.prototype.density = function () {
        // rows & columns
        var rows = this._size[0];
        var columns = this._size[1];
        // calculate density
        return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
      };

      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @memberof SparseMatrix
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */
      SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke subset on a Pattern only matrix');
        }

        // check arguments
        switch (arguments.length) {
          case 1:
            return _getsubset(this, index);

          // intentional fall through
          case 2:
          case 3:
            return _setsubset(this, index, replacement, defaultValue);
          default:
            throw new SyntaxError('Wrong number of arguments');
        }
      };
      function _getsubset(matrix, idx) {
        // check idx
        if (!isIndex(idx)) {
          throw new TypeError('Invalid index');
        }
        var isScalar = idx.isScalar();
        if (isScalar) {
          // return a scalar
          return matrix.get(idx.min());
        }
        // validate dimensions
        var size = idx.size();
        if (size.length !== matrix._size.length) {
          throw new DimensionError(size.length, matrix._size.length);
        }

        // vars
        var i, ii, k, kk;

        // validate if any of the ranges in the index is out of range
        var min = idx.min();
        var max = idx.max();
        for (i = 0, ii = matrix._size.length; i < ii; i++) {
          validateIndex(min[i], matrix._size[i]);
          validateIndex(max[i], matrix._size[i]);
        }

        // matrix arrays
        var mvalues = matrix._values;
        var mindex = matrix._index;
        var mptr = matrix._ptr;

        // rows & columns dimensions for result matrix
        var rows = idx.dimension(0);
        var columns = idx.dimension(1);

        // workspace & permutation vector
        var w = [];
        var pv = [];

        // loop rows in resulting matrix
        rows.forEach(function (i, r) {
          // update permutation vector
          pv[i] = r[0];
          // mark i in workspace
          w[i] = true;
        });

        // result matrix arrays
        var values = mvalues ? [] : undefined;
        var index = [];
        var ptr = [];

        // loop columns in result matrix
        columns.forEach(function (j) {
          // update ptr
          ptr.push(index.length);
          // loop values in column j
          for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
            // row
            i = mindex[k];
            // check row is in result matrix
            if (w[i] === true) {
              // push index
              index.push(pv[i]);
              // check we need to process values
              if (values) {
                values.push(mvalues[k]);
              }
            }
          }
        });
        // update ptr
        ptr.push(index.length);

        // return matrix
        return new SparseMatrix({
          values,
          index,
          ptr,
          size,
          datatype: matrix._datatype
        });
      }
      function _setsubset(matrix, index, submatrix, defaultValue) {
        // check index
        if (!index || index.isIndex !== true) {
          throw new TypeError('Invalid index');
        }

        // get index size and check whether the index contains a single value
        var iSize = index.size();
        var isScalar = index.isScalar();

        // calculate the size of the submatrix, and convert it into an Array if needed
        var sSize;
        if (isMatrix(submatrix)) {
          // submatrix size
          sSize = submatrix.size();
          // use array representation
          submatrix = submatrix.toArray();
        } else {
          // get submatrix size (array, scalar)
          sSize = arraySize(submatrix);
        }

        // check index is a scalar
        if (isScalar) {
          // verify submatrix is a scalar
          if (sSize.length !== 0) {
            throw new TypeError('Scalar expected');
          }
          // set value
          matrix.set(index.min(), submatrix, defaultValue);
        } else {
          // validate dimensions, index size must be one or two dimensions
          if (iSize.length !== 1 && iSize.length !== 2) {
            throw new DimensionError(iSize.length, matrix._size.length, '<');
          }

          // check submatrix and index have the same dimensions
          if (sSize.length < iSize.length) {
            // calculate number of missing outer dimensions
            var i = 0;
            var outer = 0;
            while (iSize[i] === 1 && sSize[i] === 1) {
              i++;
            }
            while (iSize[i] === 1) {
              outer++;
              i++;
            }
            // unsqueeze both outer and inner dimensions
            submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
          }

          // check whether the size of the submatrix matches the index size
          if (!deepStrictEqual(iSize, sSize)) {
            throw new DimensionError(iSize, sSize, '>');
          }

          // insert the sub matrix
          if (iSize.length === 1) {
            // if the replacement index only has 1 dimension, go trough each one and set its value
            var range = index.dimension(0);
            range.forEach(function (dataIndex, subIndex) {
              validateIndex(dataIndex);
              matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);
            });
          } else {
            // if the replacement index has 2 dimensions, go through each one and set the value in the correct index
            var firstDimensionRange = index.dimension(0);
            var secondDimensionRange = index.dimension(1);
            firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {
              validateIndex(firstDataIndex);
              secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {
                validateIndex(secondDataIndex);
                matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);
              });
            });
          }
        }
        return matrix;
      }

      /**
       * Get a single element from the matrix.
       * @memberof SparseMatrix
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */
      SparseMatrix.prototype.get = function (index) {
        if (!isArray(index)) {
          throw new TypeError('Array expected');
        }
        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        }

        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke get on a Pattern only matrix');
        }

        // row and column
        var i = index[0];
        var j = index[1];

        // check i, j are valid
        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[1]);

        // find value index
        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
        // check k is prior to next column k and it is in the correct row
        if (k < this._ptr[j + 1] && this._index[k] === i) {
          return this._values[k];
        }
        return 0;
      };

      /**
       * Replace a single element in the matrix.
       * @memberof SparseMatrix
       * @param {number[]} index   Zero-based index
       * @param {*} v
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be set to zero.
       * @return {SparseMatrix} self
       */
      SparseMatrix.prototype.set = function (index, v, defaultValue) {
        if (!isArray(index)) {
          throw new TypeError('Array expected');
        }
        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        }

        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke set on a Pattern only matrix');
        }

        // row and column
        var i = index[0];
        var j = index[1];

        // rows & columns
        var rows = this._size[0];
        var columns = this._size[1];

        // equal signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;
        if (isString(this._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
          // convert 0 to the same datatype
          zero = typed.convert(0, this._datatype);
        }

        // check we need to resize matrix
        if (i > rows - 1 || j > columns - 1) {
          // resize matrix
          _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
          // update rows & columns
          rows = this._size[0];
          columns = this._size[1];
        }

        // check i, j are valid
        validateIndex(i, rows);
        validateIndex(j, columns);

        // find value index
        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
        // check k is prior to next column k and it is in the correct row
        if (k < this._ptr[j + 1] && this._index[k] === i) {
          // check value != 0
          if (!eq(v, zero)) {
            // update value
            this._values[k] = v;
          } else {
            // remove value from matrix
            _remove(k, j, this._values, this._index, this._ptr);
          }
        } else {
          // insert value @ (i, j)
          _insert(k, i, j, v, this._values, this._index, this._ptr);
        }
        return this;
      };
      function _getValueIndex(i, top, bottom, index) {
        // check row is on the bottom side
        if (bottom - top === 0) {
          return bottom;
        }
        // loop rows [top, bottom[
        for (var r = top; r < bottom; r++) {
          // check we found value index
          if (index[r] === i) {
            return r;
          }
        }
        // we did not find row
        return top;
      }
      function _remove(k, j, values, index, ptr) {
        // remove value @ k
        values.splice(k, 1);
        index.splice(k, 1);
        // update pointers
        for (var x = j + 1; x < ptr.length; x++) {
          ptr[x]--;
        }
      }
      function _insert(k, i, j, v, values, index, ptr) {
        // insert value
        values.splice(k, 0, v);
        // update row for k
        index.splice(k, 0, i);
        // update column pointers
        for (var x = j + 1; x < ptr.length; x++) {
          ptr[x]++;
        }
      }

      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @memberof SparseMatrix
       * @param {number[] | Matrix} size  The new size the matrix should have.
       *                                  Since sparse matrices are always two-dimensional,
       *                                  size must be two numbers in either an array or a matrix
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */
      SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
        // validate arguments
        if (!isCollection(size)) {
          throw new TypeError('Array or Matrix expected');
        }

        // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector
        var sizeArray = size.valueOf().map(value => {
          return Array.isArray(value) && value.length === 1 ? value[0] : value;
        });
        if (sizeArray.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        }

        // check sizes
        sizeArray.forEach(function (value) {
          if (!isNumber(value) || !isInteger$1(value) || value < 0) {
            throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');
          }
        });

        // matrix to resize
        var m = copy ? this.clone() : this;
        // resize matrix
        return _resize(m, sizeArray[0], sizeArray[1], defaultValue);
      };
      function _resize(matrix, rows, columns, defaultValue) {
        // value to insert at the time of growing matrix
        var value = defaultValue || 0;

        // equal signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;
        if (isString(matrix._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
          // convert 0 to the same datatype
          zero = typed.convert(0, matrix._datatype);
          // convert value to the same datatype
          value = typed.convert(value, matrix._datatype);
        }

        // should we insert the value?
        var ins = !eq(value, zero);

        // old columns and rows
        var r = matrix._size[0];
        var c = matrix._size[1];
        var i, j, k;

        // check we need to increase columns
        if (columns > c) {
          // loop new columns
          for (j = c; j < columns; j++) {
            // update matrix._ptr for current column
            matrix._ptr[j] = matrix._values.length;
            // check we need to insert matrix._values
            if (ins) {
              // loop rows
              for (i = 0; i < r; i++) {
                // add new matrix._values
                matrix._values.push(value);
                // update matrix._index
                matrix._index.push(i);
              }
            }
          }
          // store number of matrix._values in matrix._ptr
          matrix._ptr[columns] = matrix._values.length;
        } else if (columns < c) {
          // truncate matrix._ptr
          matrix._ptr.splice(columns + 1, c - columns);
          // truncate matrix._values and matrix._index
          matrix._values.splice(matrix._ptr[columns], matrix._values.length);
          matrix._index.splice(matrix._ptr[columns], matrix._index.length);
        }
        // update columns
        c = columns;

        // check we need to increase rows
        if (rows > r) {
          // check we have to insert values
          if (ins) {
            // inserts
            var n = 0;
            // loop columns
            for (j = 0; j < c; j++) {
              // update matrix._ptr for current column
              matrix._ptr[j] = matrix._ptr[j] + n;
              // where to insert matrix._values
              k = matrix._ptr[j + 1] + n;
              // pointer
              var p = 0;
              // loop new rows, initialize pointer
              for (i = r; i < rows; i++, p++) {
                // add value
                matrix._values.splice(k + p, 0, value);
                // update matrix._index
                matrix._index.splice(k + p, 0, i);
                // increment inserts
                n++;
              }
            }
            // store number of matrix._values in matrix._ptr
            matrix._ptr[c] = matrix._values.length;
          }
        } else if (rows < r) {
          // deletes
          var d = 0;
          // loop columns
          for (j = 0; j < c; j++) {
            // update matrix._ptr for current column
            matrix._ptr[j] = matrix._ptr[j] - d;
            // where matrix._values start for next column
            var k0 = matrix._ptr[j];
            var k1 = matrix._ptr[j + 1] - d;
            // loop matrix._index
            for (k = k0; k < k1; k++) {
              // row
              i = matrix._index[k];
              // check we need to delete value and matrix._index
              if (i > rows - 1) {
                // remove value
                matrix._values.splice(k, 1);
                // remove item from matrix._index
                matrix._index.splice(k, 1);
                // increase deletes
                d++;
              }
            }
          }
          // update matrix._ptr for current column
          matrix._ptr[j] = matrix._values.length;
        }
        // update matrix._size
        matrix._size[0] = rows;
        matrix._size[1] = columns;
        // return matrix
        return matrix;
      }

      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * NOTE: This might be better suited to copy by default, instead of modifying
       *       in place. For now, it operates in place to remain consistent with
       *       resize().
       *
       * @memberof SparseMatrix
       * @param {number[]} sizes          The new size the matrix should have.
       *                                  Since sparse matrices are always two-dimensional,
       *                                  size must be two numbers in either an array or a matrix
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */
      SparseMatrix.prototype.reshape = function (sizes, copy) {
        // validate arguments
        if (!isArray(sizes)) {
          throw new TypeError('Array expected');
        }
        if (sizes.length !== 2) {
          throw new Error('Sparse matrices can only be reshaped in two dimensions');
        }

        // check sizes
        sizes.forEach(function (value) {
          if (!isNumber(value) || !isInteger$1(value) || value <= -2 || value === 0) {
            throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');
          }
        });
        var currentLength = this._size[0] * this._size[1];
        sizes = processSizesWildcard(sizes, currentLength);
        var newLength = sizes[0] * sizes[1];

        // m * n must not change
        if (currentLength !== newLength) {
          throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
        }

        // matrix to reshape
        var m = copy ? this.clone() : this;

        // return unchanged if the same shape
        if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {
          return m;
        }

        // Convert to COO format (generate a column index)
        var colIndex = [];
        for (var i = 0; i < m._ptr.length; i++) {
          for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
            colIndex.push(i);
          }
        }

        // Clone the values array
        var values = m._values.slice();

        // Clone the row index array
        var rowIndex = m._index.slice();

        // Transform the (row, column) indices
        for (var _i = 0; _i < m._index.length; _i++) {
          var r1 = rowIndex[_i];
          var c1 = colIndex[_i];
          var flat = r1 * m._size[1] + c1;
          colIndex[_i] = flat % sizes[1];
          rowIndex[_i] = Math.floor(flat / sizes[1]);
        }

        // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
        // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
        // sorting several arrays based on some other array.

        // OR, we could easily just:

        // 1. Remove all values from the matrix
        m._values.length = 0;
        m._index.length = 0;
        m._ptr.length = sizes[1] + 1;
        m._size = sizes.slice();
        for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
          m._ptr[_i2] = 0;
        }

        // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
        // This step is probably the most time-consuming
        for (var h = 0; h < values.length; h++) {
          var _i3 = rowIndex[h];
          var _j = colIndex[h];
          var v = values[h];
          var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);
          _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
        }

        // The value indices are inserted out of order, but apparently that's... still OK?

        return m;
      };

      /**
       * Create a clone of the matrix
       * @memberof SparseMatrix
       * @return {SparseMatrix} clone
       */
      SparseMatrix.prototype.clone = function () {
        var m = new SparseMatrix({
          values: this._values ? clone$1(this._values) : undefined,
          index: clone$1(this._index),
          ptr: clone$1(this._ptr),
          size: clone$1(this._size),
          datatype: this._datatype
        });
        return m;
      };

      /**
       * Retrieve the size of the matrix.
       * @memberof SparseMatrix
       * @returns {number[]} size
       */
      SparseMatrix.prototype.size = function () {
        return this._size.slice(0); // copy the Array
      };

      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @memberof SparseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       *
       * @return {SparseMatrix} matrix
       */
      SparseMatrix.prototype.map = function (callback, skipZeros) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke map on a Pattern only matrix');
        }
        // matrix instance
        var me = this;
        // rows and columns
        var rows = this._size[0];
        var columns = this._size[1];
        // invoke callback
        var args = maxArgumentCount(callback);
        var invoke = function invoke(v, i, j) {
          // invoke callback
          if (args === 1) return callback(v);
          if (args === 2) return callback(v, [i, j]);
          return callback(v, [i, j], me);
        };
        // invoke _map
        return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
      };

      /**
       * Create a new matrix with the results of the callback function executed on the interval
       * [minRow..maxRow, minColumn..maxColumn].
       */
      function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
        // result arrays
        var values = [];
        var index = [];
        var ptr = [];

        // equal signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;
        if (isString(matrix._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
          // convert 0 to the same datatype
          zero = typed.convert(0, matrix._datatype);
        }

        // invoke callback
        var invoke = function invoke(v, x, y) {
          // invoke callback
          v = callback(v, x, y);
          // check value != 0
          if (!eq(v, zero)) {
            // store value
            values.push(v);
            // index
            index.push(x);
          }
        };
        // loop columns
        for (var j = minColumn; j <= maxColumn; j++) {
          // store pointer to values index
          ptr.push(values.length);
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = matrix._ptr[j];
          var k1 = matrix._ptr[j + 1];
          if (skipZeros) {
            // loop k within [k0, k1[
            for (var k = k0; k < k1; k++) {
              // row index
              var i = matrix._index[k];
              // check i is in range
              if (i >= minRow && i <= maxRow) {
                // value @ k
                invoke(matrix._values[k], i - minRow, j - minColumn);
              }
            }
          } else {
            // create a cache holding all defined values
            var _values = {};
            for (var _k = k0; _k < k1; _k++) {
              var _i4 = matrix._index[_k];
              _values[_i4] = matrix._values[_k];
            }

            // loop over all rows (indexes can be unordered so we can't use that),
            // and either read the value or zero
            for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
              var value = _i5 in _values ? _values[_i5] : 0;
              invoke(value, _i5 - minRow, j - minColumn);
            }
          }
        }

        // store number of values in ptr
        ptr.push(values.length);
        // return sparse matrix
        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
        });
      }

      /**
       * Execute a callback function on each entry of the matrix.
       * @memberof SparseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       *                              If false, the indices are guaranteed to be in order,
       *                              if true, the indices can be unordered.
       */
      SparseMatrix.prototype.forEach = function (callback, skipZeros) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke forEach on a Pattern only matrix');
        }
        // matrix instance
        var me = this;
        // rows and columns
        var rows = this._size[0];
        var columns = this._size[1];
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];
          if (skipZeros) {
            // loop k within [k0, k1[
            for (var k = k0; k < k1; k++) {
              // row index
              var i = this._index[k];

              // value @ k
              callback(this._values[k], [i, j], me);
            }
          } else {
            // create a cache holding all defined values
            var values = {};
            for (var _k2 = k0; _k2 < k1; _k2++) {
              var _i6 = this._index[_k2];
              values[_i6] = this._values[_k2];
            }

            // loop over all rows (indexes can be unordered so we can't use that),
            // and either read the value or zero
            for (var _i7 = 0; _i7 < rows; _i7++) {
              var value = _i7 in values ? values[_i7] : 0;
              callback(value, [_i7, j], me);
            }
          }
        }
      };

      /**
       * Iterate over the matrix elements, skipping zeros
       * @return {Iterable<{ value, index: number[] }>}
       */
      SparseMatrix.prototype[Symbol.iterator] = function* () {
        if (!this._values) {
          throw new Error('Cannot iterate a Pattern only matrix');
        }
        var columns = this._size[1];
        for (var j = 0; j < columns; j++) {
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];
          for (var k = k0; k < k1; k++) {
            // row index
            var i = this._index[k];
            yield {
              value: this._values[k],
              index: [i, j]
            };
          }
        }
      };

      /**
       * Create an Array with a copy of the data of the SparseMatrix
       * @memberof SparseMatrix
       * @returns {Array} array
       */
      SparseMatrix.prototype.toArray = function () {
        return _toArray(this._values, this._index, this._ptr, this._size, true);
      };

      /**
       * Get the primitive value of the SparseMatrix: a two dimensions array
       * @memberof SparseMatrix
       * @returns {Array} array
       */
      SparseMatrix.prototype.valueOf = function () {
        return _toArray(this._values, this._index, this._ptr, this._size, false);
      };
      function _toArray(values, index, ptr, size, copy) {
        // rows and columns
        var rows = size[0];
        var columns = size[1];
        // result
        var a = [];
        // vars
        var i, j;
        // initialize array
        for (i = 0; i < rows; i++) {
          a[i] = [];
          for (j = 0; j < columns; j++) {
            a[i][j] = 0;
          }
        }

        // loop columns
        for (j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1];
          // loop k within [k0, k1[
          for (var k = k0; k < k1; k++) {
            // row index
            i = index[k];
            // set value (use one for pattern matrix)
            a[i][j] = values ? copy ? clone$1(values[k]) : values[k] : 1;
          }
        }
        return a;
      }

      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @memberof SparseMatrix
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */
      SparseMatrix.prototype.format = function (options) {
        // rows and columns
        var rows = this._size[0];
        var columns = this._size[1];
        // density
        var density = this.density();
        // rows & columns
        var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\n';
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];
          // loop k within [k0, k1[
          for (var k = k0; k < k1; k++) {
            // row index
            var i = this._index[k];
            // append value
            str += '\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');
          }
        }
        return str;
      };

      /**
       * Get a string representation of the matrix
       * @memberof SparseMatrix
       * @returns {string} str
       */
      SparseMatrix.prototype.toString = function () {
        return format(this.toArray());
      };

      /**
       * Get a JSON representation of the matrix
       * @memberof SparseMatrix
       * @returns {Object}
       */
      SparseMatrix.prototype.toJSON = function () {
        return {
          mathjs: 'SparseMatrix',
          values: this._values,
          index: this._index,
          ptr: this._ptr,
          size: this._size,
          datatype: this._datatype
        };
      };

      /**
       * Get the kth Matrix diagonal.
       *
       * @memberof SparseMatrix
       * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
       *
       * @returns {Matrix}                     The matrix vector with the diagonal values.
       */
      SparseMatrix.prototype.diagonal = function (k) {
        // validate k if any
        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          }
          // is must be an integer
          if (!isNumber(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;

        // rows & columns
        var rows = this._size[0];
        var columns = this._size[1];

        // number diagonal values
        var n = Math.min(rows - kSub, columns - kSuper);

        // diagonal arrays
        var values = [];
        var index = [];
        var ptr = [];
        // initial ptr value
        ptr[0] = 0;
        // loop columns
        for (var j = kSuper; j < columns && values.length < n; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];
          // loop x within [k0, k1[
          for (var x = k0; x < k1; x++) {
            // row index
            var i = this._index[x];
            // check row
            if (i === j - kSuper + kSub) {
              // value on this column
              values.push(this._values[x]);
              // store row
              index[values.length - 1] = i - kSub;
              // exit loop
              break;
            }
          }
        }
        // close ptr
        ptr.push(values.length);
        // return matrix
        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [n, 1]
        });
      };

      /**
       * Generate a matrix from a JSON object
       * @memberof SparseMatrix
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
       *                       where mathjs is optional
       * @returns {SparseMatrix}
       */
      SparseMatrix.fromJSON = function (json) {
        return new SparseMatrix(json);
      };

      /**
       * Create a diagonal matrix.
       *
       * @memberof SparseMatrix
       * @param {Array} size                       The matrix size.
       * @param {number | Array | Matrix } value   The values for the diagonal.
       * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
       * @param {number} [defaultValue]            The default value for non-diagonal
       * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
       *
       * @returns {SparseMatrix}
       */
      SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
        if (!isArray(size)) {
          throw new TypeError('Array expected, size parameter');
        }
        if (size.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        }

        // map size & validate
        size = size.map(function (s) {
          // check it is a big number
          if (isBigNumber(s)) {
            // convert it
            s = s.toNumber();
          }
          // validate arguments
          if (!isNumber(s) || !isInteger$1(s) || s < 1) {
            throw new Error('Size values must be positive integers');
          }
          return s;
        });

        // validate k if any
        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          }
          // is must be an integer
          if (!isNumber(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }

        // equal signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;
        if (isString(datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
          // convert 0 to the same datatype
          zero = typed.convert(0, datatype);
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;

        // rows and columns
        var rows = size[0];
        var columns = size[1];

        // number of non-zero items
        var n = Math.min(rows - kSub, columns - kSuper);

        // value extraction function
        var _value;

        // check value
        if (isArray(value)) {
          // validate array
          if (value.length !== n) {
            // number of values in array must be n
            throw new Error('Invalid value array length');
          }
          // define function
          _value = function _value(i) {
            // return value @ i
            return value[i];
          };
        } else if (isMatrix(value)) {
          // matrix size
          var ms = value.size();
          // validate matrix
          if (ms.length !== 1 || ms[0] !== n) {
            // number of values in array must be n
            throw new Error('Invalid matrix length');
          }
          // define function
          _value = function _value(i) {
            // return value @ i
            return value.get([i]);
          };
        } else {
          // define function
          _value = function _value() {
            // return value
            return value;
          };
        }

        // create arrays
        var values = [];
        var index = [];
        var ptr = [];

        // loop items
        for (var j = 0; j < columns; j++) {
          // number of rows with value
          ptr.push(values.length);
          // diagonal index
          var i = j - kSuper;
          // check we need to set diagonal value
          if (i >= 0 && i < n) {
            // get value @ i
            var v = _value(i);
            // check for zero
            if (!eq(v, zero)) {
              // column
              index.push(i + kSub);
              // add value
              values.push(v);
            }
          }
        }
        // last value should be number of values
        ptr.push(values.length);
        // create SparseMatrix
        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [rows, columns]
        });
      };

      /**
       * Swap rows i and j in Matrix.
       *
       * @memberof SparseMatrix
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       *
       * @return {Matrix}        The matrix reference
       */
      SparseMatrix.prototype.swapRows = function (i, j) {
        // check index
        if (!isNumber(i) || !isInteger$1(i) || !isNumber(j) || !isInteger$1(j)) {
          throw new Error('Row index must be positive integers');
        }
        // check dimensions
        if (this._size.length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        }
        // validate index
        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[0]);

        // swap rows
        SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
        // return current instance
        return this;
      };

      /**
       * Loop rows with data in column j.
       *
       * @param {number} j            Column
       * @param {Array} values        Matrix values
       * @param {Array} index         Matrix row indeces
       * @param {Array} ptr           Matrix column pointers
       * @param {Function} callback   Callback function invoked for every row in column j
       */
      SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
        // indeces for column j
        var k0 = ptr[j];
        var k1 = ptr[j + 1];
        // loop
        for (var k = k0; k < k1; k++) {
          // invoke callback
          callback(index[k], values[k]);
        }
      };

      /**
       * Swap rows x and y in Sparse Matrix data structures.
       *
       * @param {number} x         Matrix row index 1
       * @param {number} y         Matrix row index 2
       * @param {number} columns   Number of columns in matrix
       * @param {Array} values     Matrix values
       * @param {Array} index      Matrix row indeces
       * @param {Array} ptr        Matrix column pointers
       */
      SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1];
          // find value index @ x
          var kx = _getValueIndex(x, k0, k1, index);
          // find value index @ x
          var ky = _getValueIndex(y, k0, k1, index);
          // check both rows exist in matrix
          if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
            // swap values (check for pattern matrix)
            if (values) {
              var v = values[kx];
              values[kx] = values[ky];
              values[ky] = v;
            }
            // next column
            continue;
          }
          // check x row exist & no y row
          if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
            // value @ x (check for pattern matrix)
            var vx = values ? values[kx] : undefined;
            // insert value @ y
            index.splice(ky, 0, y);
            if (values) {
              values.splice(ky, 0, vx);
            }
            // remove value @ x (adjust array index if needed)
            index.splice(ky <= kx ? kx + 1 : kx, 1);
            if (values) {
              values.splice(ky <= kx ? kx + 1 : kx, 1);
            }
            // next column
            continue;
          }
          // check y row exist & no x row
          if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
            // value @ y (check for pattern matrix)
            var vy = values ? values[ky] : undefined;
            // insert value @ x
            index.splice(kx, 0, x);
            if (values) {
              values.splice(kx, 0, vy);
            }
            // remove value @ y (adjust array index if needed)
            index.splice(kx <= ky ? ky + 1 : ky, 1);
            if (values) {
              values.splice(kx <= ky ? ky + 1 : ky, 1);
            }
          }
        }
      };
      return SparseMatrix;
    }, {
      isClass: true
    });

    var name$f = 'matrix';
    var dependencies$f = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
    var createMatrix = /* #__PURE__ */factory(name$f, dependencies$f, _ref => {
      var {
        typed,
        Matrix,
        DenseMatrix,
        SparseMatrix
      } = _ref;
      /**
       * Create a Matrix. The function creates a new `math.Matrix` object from
       * an `Array`. A Matrix has utility functions to manipulate the data in the
       * matrix, like getting the size and getting or setting values in the matrix.
       * Supported storage formats are 'dense' and 'sparse'.
       *
       * Syntax:
       *
       *    math.matrix()                         // creates an empty matrix using default storage format (dense).
       *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
       *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
       *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
       *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
       *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
       *
       * Examples:
       *
       *    let m = math.matrix([[1, 2], [3, 4]])
       *    m.size()                        // Array [2, 2]
       *    m.resize([3, 2], 5)
       *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
       *    m.get([1, 0])                    // number 3
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, number, string, unit, sparse
       *
       * @param {Array | Matrix} [data]    A multi dimensional array
       * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`
       * @param {string} [datatype]        Type of the values
       *
       * @return {Matrix} The created matrix
       */
      return typed(name$f, {
        '': function _() {
          return _create([]);
        },
        string: function string(format) {
          return _create([], format);
        },
        'string, string': function stringString(format, datatype) {
          return _create([], format, datatype);
        },
        Array: function Array(data) {
          return _create(data);
        },
        Matrix: function Matrix(data) {
          return _create(data, data.storage());
        },
        'Array | Matrix, string': _create,
        'Array | Matrix, string, string': _create
      });

      /**
       * Create a new Matrix with given storage format
       * @param {Array} data
       * @param {string} [format]
       * @param {string} [datatype]
       * @returns {Matrix} Returns a new Matrix
       * @private
       */
      function _create(data, format, datatype) {
        // get storage format constructor
        if (format === 'dense' || format === 'default' || format === undefined) {
          return new DenseMatrix(data, datatype);
        }
        if (format === 'sparse') {
          return new SparseMatrix(data, datatype);
        }
        throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
      }
    });

    var name$e = 'addScalar';
    var dependencies$e = ['typed'];
    var createAddScalar = /* #__PURE__ */factory(name$e, dependencies$e, _ref => {
      var {
        typed
      } = _ref;
      /**
       * Add two scalar values, `x + y`.
       * This function is meant for internal use: it is used by the public function
       * `add`
       *
       * This function does not support collections (Array or Matrix).
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
       * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
       * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
       * @private
       */
      return typed(name$e, {
        'number, number': addNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.add(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.plus(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.add(y);
        },
        'Unit, Unit': typed.referToSelf(self => (x, y) => {
          if (x.value === null || x.value === undefined) {
            throw new Error('Parameter x contains a unit with undefined value');
          }
          if (y.value === null || y.value === undefined) {
            throw new Error('Parameter y contains a unit with undefined value');
          }
          if (!x.equalBase(y)) throw new Error('Units do not match');
          var res = x.clone();
          res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);
          res.fixPrefix = false;
          return res;
        })
      });
    });

    var name$d = 'matAlgo11xS0s';
    var dependencies$d = ['typed', 'equalScalar'];
    var createMatAlgo11xS0s = /* #__PURE__ */factory(name$d, dependencies$d, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;
      /**
       * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
       * Callback function invoked NZ times (number of nonzero items in S).
       *
       *
       *          ┌  f(Sij, b)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  0          ; otherwise
       *
       *
       * @param {Matrix}   s                 The SparseMatrix instance (S)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
       */
      return function matAlgo11xS0s(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype;

        // sparse matrix cannot be a Pattern matrix
        if (!avalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
        }

        // rows & columns
        var rows = asize[0];
        var columns = asize[1];

        // datatype
        var dt;
        // equal signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;
        // callback signature to use
        var cf = callback;

        // process data types
        if (typeof adt === 'string') {
          // datatype
          dt = adt;
          // find signature that matches (dt, dt)
          eq = typed.find(equalScalar, [dt, dt]);
          // convert 0 to the same datatype
          zero = typed.convert(0, dt);
          // convert b to the same datatype
          b = typed.convert(b, dt);
          // callback
          cf = typed.find(callback, [dt, dt]);
        }

        // result arrays
        var cvalues = [];
        var cindex = [];
        var cptr = [];

        // loop columns
        for (var j = 0; j < columns; j++) {
          // initialize ptr
          cptr[j] = cindex.length;
          // values in j
          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            var i = aindex[k];
            // invoke callback
            var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
            // check value is zero
            if (!eq(v, zero)) {
              // push index & value
              cindex.push(i);
              cvalues.push(v);
            }
          }
        }
        // update ptr
        cptr[columns] = cindex.length;

        // return sparse matrix
        return s.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$c = 'matAlgo14xDs';
    var dependencies$c = ['typed'];
    var createMatAlgo14xDs = /* #__PURE__ */factory(name$c, dependencies$c, _ref => {
      var {
        typed
      } = _ref;
      /**
       * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
       * Callback function invoked MxN times.
       *
       * C(i,j,...z) = f(Aij..z, b)
       *
       * @param {Matrix}   a                 The DenseMatrix instance (A)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij..z,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
       */
      return function matAlgo14xDs(a, b, callback, inverse) {
        // a arrays
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;

        // datatype
        var dt;
        // callback signature to use
        var cf = callback;

        // process data types
        if (typeof adt === 'string') {
          // datatype
          dt = adt;
          // convert b to the same datatype
          b = typed.convert(b, dt);
          // callback
          cf = typed.find(callback, [dt, dt]);
        }

        // populate cdata, iterate through dimensions
        var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];

        // c matrix
        return a.createDenseMatrix({
          data: cdata,
          size: clone$1(asize),
          datatype: dt
        });
      };

      // recursive function
      function _iterate(f, level, s, n, av, bv, inverse) {
        // initialize array for this level
        var cv = [];
        // check we reach the last level
        if (level === s.length - 1) {
          // loop arrays in last level
          for (var i = 0; i < n; i++) {
            // invoke callback and store value
            cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
          }
        } else {
          // iterate current level
          for (var j = 0; j < n; j++) {
            // iterate next level
            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
          }
        }
        return cv;
      }
    });

    var name$b = 'matAlgo01xDSid';
    var dependencies$b = ['typed'];
    var createMatAlgo01xDSid = /* #__PURE__ */factory(name$b, dependencies$b, _ref => {
      var {
        typed
      } = _ref;
      /**
       * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
       * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
       *
       *
       *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  Dij          ; otherwise
       *
       *
       * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
       * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
       * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
       */
      return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype;
        // sparse matrix arrays
        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype;

        // validate dimensions
        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        }

        // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        }

        // sparse matrix cannot be a Pattern matrix
        if (!bvalues) {
          throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
        }

        // rows & columns
        var rows = asize[0];
        var columns = asize[1];

        // process data types
        var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
        // callback function
        var cf = dt ? typed.find(callback, [dt, dt]) : callback;

        // vars
        var i, j;

        // result (DenseMatrix)
        var cdata = [];
        // initialize c
        for (i = 0; i < rows; i++) {
          cdata[i] = [];
        }

        // workspace
        var x = [];
        // marks indicating we have a value in x for a given column
        var w = [];

        // loop columns in b
        for (j = 0; j < columns; j++) {
          // column mark
          var mark = j + 1;
          // values in column j
          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = bindex[k];
            // update workspace
            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
            // mark i as updated
            w[i] = mark;
          }
          // loop rows
          for (i = 0; i < rows; i++) {
            // check row is in workspace
            if (w[i] === mark) {
              // c[i][j] was already calculated
              cdata[i][j] = x[i];
            } else {
              // item does not exist in S
              cdata[i][j] = adata[i][j];
            }
          }
        }

        // return dense matrix
        return denseMatrix.createDenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$a = 'matAlgo04xSidSid';
    var dependencies$a = ['typed', 'equalScalar'];
    var createMatAlgo04xSidSid = /* #__PURE__ */factory(name$a, dependencies$a, _ref => {
      var {
        typed,
        equalScalar
      } = _ref;
      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked MAX(NNZA, NNZB) times
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
       * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0
       *          └  B(i,j)       ; A(i,j) === 0
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function matAlgo04xSidSid(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype;
        // sparse matrix arrays
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype;

        // validate dimensions
        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        }

        // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        }

        // rows & columns
        var rows = asize[0];
        var columns = asize[1];

        // datatype
        var dt;
        // equal signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;
        // callback signature to use
        var cf = callback;

        // process data types
        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt;
          // find signature that matches (dt, dt)
          eq = typed.find(equalScalar, [dt, dt]);
          // convert 0 to the same datatype
          zero = typed.convert(0, dt);
          // callback
          cf = typed.find(callback, [dt, dt]);
        }

        // result arrays
        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = [];

        // workspace
        var xa = avalues && bvalues ? [] : undefined;
        var xb = avalues && bvalues ? [] : undefined;
        // marks indicating we have a value in x for a given column
        var wa = [];
        var wb = [];

        // vars
        var i, j, k, k0, k1;

        // loop columns
        for (j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length;
          // columns mark
          var mark = j + 1;
          // loop A(:,j)
          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = aindex[k];
            // update c
            cindex.push(i);
            // update workspace
            wa[i] = mark;
            // check we need to process values
            if (xa) {
              xa[i] = avalues[k];
            }
          }
          // loop B(:,j)
          for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = bindex[k];
            // check row exists in A
            if (wa[i] === mark) {
              // update record in xa @ i
              if (xa) {
                // invoke callback
                var v = cf(xa[i], bvalues[k]);
                // check for zero
                if (!eq(v, zero)) {
                  // update workspace
                  xa[i] = v;
                } else {
                  // remove mark (index will be removed later)
                  wa[i] = null;
                }
              }
            } else {
              // update c
              cindex.push(i);
              // update workspace
              wb[i] = mark;
              // check we need to process values
              if (xb) {
                xb[i] = bvalues[k];
              }
            }
          }
          // check we need to process values (non pattern matrix)
          if (xa && xb) {
            // initialize first index in j
            k = cptr[j];
            // loop index in j
            while (k < cindex.length) {
              // row
              i = cindex[k];
              // check workspace has value @ i
              if (wa[i] === mark) {
                // push value (Aij != 0 || (Aij != 0 && Bij != 0))
                cvalues[k] = xa[i];
                // increment pointer
                k++;
              } else if (wb[i] === mark) {
                // push value (bij != 0)
                cvalues[k] = xb[i];
                // increment pointer
                k++;
              } else {
                // remove index @ k
                cindex.splice(k, 1);
              }
            }
          }
        }
        // update cptr
        cptr[columns] = cindex.length;

        // return sparse matrix
        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$9 = 'matAlgo10xSids';
    var dependencies$9 = ['typed', 'DenseMatrix'];
    var createMatAlgo10xSids = /* #__PURE__ */factory(name$9, dependencies$9, _ref => {
      var {
        typed,
        DenseMatrix
      } = _ref;
      /**
       * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
       * Callback function invoked NZ times (number of nonzero items in S).
       *
       *
       *          ┌  f(Sij, b)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  b          ; otherwise
       *
       *
       * @param {Matrix}   s                 The SparseMatrix instance (S)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
       */
      return function matAlgo10xSids(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype;

        // sparse matrix cannot be a Pattern matrix
        if (!avalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
        }

        // rows & columns
        var rows = asize[0];
        var columns = asize[1];

        // datatype
        var dt;
        // callback signature to use
        var cf = callback;

        // process data types
        if (typeof adt === 'string') {
          // datatype
          dt = adt;
          // convert b to the same datatype
          b = typed.convert(b, dt);
          // callback
          cf = typed.find(callback, [dt, dt]);
        }

        // result arrays
        var cdata = [];

        // workspaces
        var x = [];
        // marks indicating we have a value in x for a given column
        var w = [];

        // loop columns
        for (var j = 0; j < columns; j++) {
          // columns mark
          var mark = j + 1;
          // values in j
          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            var r = aindex[k];
            // update workspace
            x[r] = avalues[k];
            w[r] = mark;
          }
          // loop rows
          for (var i = 0; i < rows; i++) {
            // initialize C on first column
            if (j === 0) {
              // create row array
              cdata[i] = [];
            }
            // check sparse matrix has a value @ i,j
            if (w[i] === mark) {
              // invoke callback, update C
              cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
            } else {
              // dense matrix value @ i, j
              cdata[i][j] = b;
            }
          }
        }

        // return dense matrix
        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$8 = 'matAlgo13xDD';
    var dependencies$8 = ['typed'];
    var createMatAlgo13xDD = /* #__PURE__ */factory(name$8, dependencies$8, _ref => {
      var {
        typed
      } = _ref;
      /**
       * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
       * Callback function invoked MxN times.
       *
       * C(i,j,...z) = f(Aij..z, Bij..z)
       *
       * @param {Matrix}   a                 The DenseMatrix instance (A)
       * @param {Matrix}   b                 The DenseMatrix instance (B)
       * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
       */
      return function matAlgo13xDD(a, b, callback) {
        // a arrays
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        // b arrays
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype;
        // c arrays
        var csize = [];

        // validate dimensions
        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        }

        // validate each one of the dimension sizes
        for (var s = 0; s < asize.length; s++) {
          // must match
          if (asize[s] !== bsize[s]) {
            throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
          }
          // update dimension in c
          csize[s] = asize[s];
        }

        // datatype
        var dt;
        // callback signature to use
        var cf = callback;

        // process data types
        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt;
          // callback
          cf = typed.find(callback, [dt, dt]);
        }

        // populate cdata, iterate through dimensions
        var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];

        // c matrix
        return a.createDenseMatrix({
          data: cdata,
          size: csize,
          datatype: dt
        });
      };

      // recursive function
      function _iterate(f, level, s, n, av, bv) {
        // initialize array for this level
        var cv = [];
        // check we reach the last level
        if (level === s.length - 1) {
          // loop arrays in last level
          for (var i = 0; i < n; i++) {
            // invoke callback and store value
            cv[i] = f(av[i], bv[i]);
          }
        } else {
          // iterate current level
          for (var j = 0; j < n; j++) {
            // iterate next level
            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
          }
        }
        return cv;
      }
    });

    var name$7 = 'matrixAlgorithmSuite';
    var dependencies$7 = ['typed', 'matrix'];
    var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name$7, dependencies$7, _ref => {
      var {
        typed,
        matrix
      } = _ref;
      var matAlgo13xDD = createMatAlgo13xDD({
        typed
      });
      var matAlgo14xDs = createMatAlgo14xDs({
        typed
      });

      /**
       * Return a signatures object with the usual boilerplate of
       * matrix algorithms, based on a plain options object with the
       * following properties:
       *   elop: function -- the elementwise operation to use, defaults to self
       *   SS: function -- the algorithm to apply for two sparse matrices
       *   DS: function -- the algorithm to apply for a dense and a sparse matrix
       *   SD: function -- algo for a sparse and a dense; defaults to SD flipped
       *   Ss: function -- the algorithm to apply for a sparse matrix and scalar
       *   sS: function -- algo for scalar and sparse; defaults to Ss flipped
       *   scalar: string -- typed-function type for scalars, defaults to 'any'
       *
       * If Ss is not specified, no matrix-scalar signatures are generated.
       *
       * @param {object} options
       * @return {Object<string, function>} signatures
       */
      return function matrixAlgorithmSuite(options) {
        var elop = options.elop;
        var SD = options.SD || options.DS;
        var matrixSignatures;
        if (elop) {
          // First the dense ones
          matrixSignatures = {
            'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(x, y, elop),
            'Array, Array': (x, y) => matAlgo13xDD(matrix(x), matrix(y), elop).valueOf(),
            'Array, DenseMatrix': (x, y) => matAlgo13xDD(matrix(x), y, elop),
            'DenseMatrix, Array': (x, y) => matAlgo13xDD(x, matrix(y), elop)
          };
          // Now incorporate sparse matrices
          if (options.SS) {
            matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(x, y, elop, false);
          }
          if (options.DS) {
            matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(x, y, elop, false);
            matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(matrix(x), y, elop, false);
          }
          if (SD) {
            matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(y, x, elop, true);
            matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(matrix(y), x, elop, true);
          }
        } else {
          // No elop, use this
          // First the dense ones
          matrixSignatures = {
            'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {
              return matAlgo13xDD(x, y, self);
            }),
            'Array, Array': typed.referToSelf(self => (x, y) => {
              return matAlgo13xDD(matrix(x), matrix(y), self).valueOf();
            }),
            'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {
              return matAlgo13xDD(matrix(x), y, self);
            }),
            'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {
              return matAlgo13xDD(x, matrix(y), self);
            })
          };
          // Now incorporate sparse matrices
          if (options.SS) {
            matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {
              return options.SS(x, y, self, false);
            });
          }
          if (options.DS) {
            matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {
              return options.DS(x, y, self, false);
            });
            matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {
              return options.DS(matrix(x), y, self, false);
            });
          }
          if (SD) {
            matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {
              return SD(y, x, self, true);
            });
            matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {
              return SD(matrix(y), x, self, true);
            });
          }
        }

        // Now add the scalars
        var scalar = options.scalar || 'any';
        var Ds = options.Ds || options.Ss;
        if (Ds) {
          if (elop) {
            matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);
            matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);
            matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();
            matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();
          } else {
            matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {
              return matAlgo14xDs(x, y, self, false);
            });
            matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {
              return matAlgo14xDs(y, x, self, true);
            });
            matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {
              return matAlgo14xDs(matrix(x), y, self, false).valueOf();
            });
            matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {
              return matAlgo14xDs(matrix(y), x, self, true).valueOf();
            });
          }
        }
        var sS = options.sS !== undefined ? options.sS : options.Ss;
        if (elop) {
          if (options.Ss) {
            matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);
          }
          if (sS) {
            matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);
          }
        } else {
          if (options.Ss) {
            matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {
              return options.Ss(x, y, self, false);
            });
          }
          if (sS) {
            matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {
              return sS(y, x, self, true);
            });
          }
        }
        // Also pull in the scalar signatures if the operator is a typed function
        if (elop && elop.signatures) {
          extend(matrixSignatures, elop.signatures);
        }
        return matrixSignatures;
      };
    });

    var name$6 = 'multiplyScalar';
    var dependencies$6 = ['typed'];
    var createMultiplyScalar = /* #__PURE__ */factory(name$6, dependencies$6, _ref => {
      var {
        typed
      } = _ref;
      /**
       * Multiply two scalar values, `x * y`.
       * This function is meant for internal use: it is used by the public function
       * `multiply`
       *
       * This function does not support collections (Array or Matrix).
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
       * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
       * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
       * @private
       */
      return typed('multiplyScalar', {
        'number, number': multiplyNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.mul(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.times(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.mul(y);
        },
        'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),
        'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)
      });
    });

    var name$5 = 'multiply';
    var dependencies$5 = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];
    var createMultiply = /* #__PURE__ */factory(name$5, dependencies$5, _ref => {
      var {
        typed,
        matrix,
        addScalar,
        multiplyScalar,
        equalScalar,
        dot
      } = _ref;
      var matAlgo11xS0s = createMatAlgo11xS0s({
        typed,
        equalScalar
      });
      var matAlgo14xDs = createMatAlgo14xDs({
        typed
      });
      function _validateMatrixDimensions(size1, size2) {
        // check left operand dimensions
        switch (size1.length) {
          case 1:
            // check size2
            switch (size2.length) {
              case 1:
                // Vector x Vector
                if (size1[0] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
                }
                break;
              case 2:
                // Vector x Matrix
                if (size1[0] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
                }
                break;
              default:
                throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
            }
            break;
          case 2:
            // check size2
            switch (size2.length) {
              case 1:
                // Matrix x Vector
                if (size1[1] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
                }
                break;
              case 2:
                // Matrix x Matrix
                if (size1[1] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
                }
                break;
              default:
                throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
            }
            break;
          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
        }
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (N)
       * @param {Matrix} b            Dense Vector   (N)
       *
       * @return {number}             Scalar value
       */
      function _multiplyVectorVector(a, b, n) {
        // check empty vector
        if (n === 0) {
          throw new Error('Cannot multiply two empty vectors');
        }
        return dot(a, b);
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (M)
       * @param {Matrix} b            Matrix         (MxN)
       *
       * @return {Matrix}             Dense Vector   (N)
       */
      function _multiplyVectorMatrix(a, b) {
        // process storage
        if (b.storage() !== 'dense') {
          throw new Error('Support for SparseMatrix not implemented');
        }
        return _multiplyVectorDenseMatrix(a, b);
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (M)
       * @param {Matrix} b            Dense Matrix   (MxN)
       *
       * @return {Matrix}             Dense Vector   (N)
       */
      function _multiplyVectorDenseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        // b dense
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype;
        // rows & columns
        var alength = asize[0];
        var bcolumns = bsize[1];

        // datatype
        var dt;
        // addScalar signature to use
        var af = addScalar;
        // multiplyScalar signature to use
        var mf = multiplyScalar;

        // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt;
          // find signatures that matches (dt, dt)
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }

        // result
        var c = [];

        // loop matrix columns
        for (var j = 0; j < bcolumns; j++) {
          // sum (do not initialize it with zero)
          var sum = mf(adata[0], bdata[0][j]);
          // loop vector
          for (var i = 1; i < alength; i++) {
            // multiply & accumulate
            sum = af(sum, mf(adata[i], bdata[i][j]));
          }
          c[j] = sum;
        }

        // return matrix
        return a.createDenseMatrix({
          data: c,
          size: [bcolumns],
          datatype: dt
        });
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            Matrix         (MxN)
       * @param {Matrix} b            Dense Vector   (N)
       *
       * @return {Matrix}             Dense Vector   (M)
       */
      var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
        'DenseMatrix, any': _multiplyDenseMatrixVector,
        'SparseMatrix, any': _multiplySparseMatrixVector
      });

      /**
       * C = A * B
       *
       * @param {Matrix} a            Matrix         (MxN)
       * @param {Matrix} b            Matrix         (NxC)
       *
       * @return {Matrix}             Matrix         (MxC)
       */
      var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
        'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
        'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
        'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
        'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
      });

      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix  (MxN)
       * @param {Matrix} b            Dense Vector (N)
       *
       * @return {Matrix}             Dense Vector (M)
       */
      function _multiplyDenseMatrixVector(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        // b dense
        var bdata = b._data;
        var bdt = b._datatype;
        // rows & columns
        var arows = asize[0];
        var acolumns = asize[1];

        // datatype
        var dt;
        // addScalar signature to use
        var af = addScalar;
        // multiplyScalar signature to use
        var mf = multiplyScalar;

        // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt;
          // find signatures that matches (dt, dt)
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }

        // result
        var c = [];

        // loop matrix a rows
        for (var i = 0; i < arows; i++) {
          // current row
          var row = adata[i];
          // sum (do not initialize it with zero)
          var sum = mf(row[0], bdata[0]);
          // loop matrix a columns
          for (var j = 1; j < acolumns; j++) {
            // multiply & accumulate
            sum = af(sum, mf(row[j], bdata[j]));
          }
          c[i] = sum;
        }

        // return matrix
        return a.createDenseMatrix({
          data: c,
          size: [arows],
          datatype: dt
        });
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix    (MxN)
       * @param {Matrix} b            DenseMatrix    (NxC)
       *
       * @return {Matrix}             DenseMatrix    (MxC)
       */
      function _multiplyDenseMatrixDenseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        // b dense
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype;
        // rows & columns
        var arows = asize[0];
        var acolumns = asize[1];
        var bcolumns = bsize[1];

        // datatype
        var dt;
        // addScalar signature to use
        var af = addScalar;
        // multiplyScalar signature to use
        var mf = multiplyScalar;

        // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt;
          // find signatures that matches (dt, dt)
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }

        // result
        var c = [];

        // loop matrix a rows
        for (var i = 0; i < arows; i++) {
          // current row
          var row = adata[i];
          // initialize row array
          c[i] = [];
          // loop matrix b columns
          for (var j = 0; j < bcolumns; j++) {
            // sum (avoid initializing sum to zero)
            var sum = mf(row[0], bdata[0][j]);
            // loop matrix a columns
            for (var x = 1; x < acolumns; x++) {
              // multiply & accumulate
              sum = af(sum, mf(row[x], bdata[x][j]));
            }
            c[i][j] = sum;
          }
        }

        // return matrix
        return a.createDenseMatrix({
          data: c,
          size: [arows, bcolumns],
          datatype: dt
        });
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix    (MxN)
       * @param {Matrix} b            SparseMatrix   (NxC)
       *
       * @return {Matrix}             SparseMatrix   (MxC)
       */
      function _multiplyDenseMatrixSparseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        // b sparse
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype;
        // validate b matrix
        if (!bvalues) {
          throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
        }
        // rows & columns
        var arows = asize[0];
        var bcolumns = bsize[1];

        // datatype
        var dt;
        // addScalar signature to use
        var af = addScalar;
        // multiplyScalar signature to use
        var mf = multiplyScalar;
        // equalScalar signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;

        // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt;
          // find signatures that matches (dt, dt)
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]);
          // convert 0 to the same datatype
          zero = typed.convert(0, dt);
        }

        // result
        var cvalues = [];
        var cindex = [];
        var cptr = [];
        // c matrix
        var c = b.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        });

        // loop b columns
        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length;
          // indeces in column jb
          var kb0 = bptr[jb];
          var kb1 = bptr[jb + 1];
          // do not process column jb if no data exists
          if (kb1 > kb0) {
            // last row mark processed
            var last = 0;
            // loop a rows
            for (var i = 0; i < arows; i++) {
              // column mark
              var mark = i + 1;
              // C[i, jb]
              var cij = void 0;
              // values in b column j
              for (var kb = kb0; kb < kb1; kb++) {
                // row
                var ib = bindex[kb];
                // check value has been initialized
                if (last !== mark) {
                  // first value in column jb
                  cij = mf(adata[i][ib], bvalues[kb]);
                  // update mark
                  last = mark;
                } else {
                  // accumulate value
                  cij = af(cij, mf(adata[i][ib], bvalues[kb]));
                }
              }
              // check column has been processed and value != 0
              if (last === mark && !eq(cij, zero)) {
                // push row & value
                cindex.push(i);
                cvalues.push(cij);
              }
            }
          }
        }
        // update ptr
        cptr[bcolumns] = cindex.length;

        // return sparse matrix
        return c;
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix    (MxN)
       * @param {Matrix} b            Dense Vector (N)
       *
       * @return {Matrix}             SparseMatrix    (M, 1)
       */
      function _multiplySparseMatrixVector(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype;
        // validate a matrix
        if (!avalues) {
          throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
        }
        // b dense
        var bdata = b._data;
        var bdt = b._datatype;
        // rows & columns
        var arows = a._size[0];
        var brows = b._size[0];
        // result
        var cvalues = [];
        var cindex = [];
        var cptr = [];

        // datatype
        var dt;
        // addScalar signature to use
        var af = addScalar;
        // multiplyScalar signature to use
        var mf = multiplyScalar;
        // equalScalar signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;

        // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt;
          // find signatures that matches (dt, dt)
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]);
          // convert 0 to the same datatype
          zero = typed.convert(0, dt);
        }

        // workspace
        var x = [];
        // vector with marks indicating a value x[i] exists in a given column
        var w = [];

        // update ptr
        cptr[0] = 0;
        // rows in b
        for (var ib = 0; ib < brows; ib++) {
          // b[ib]
          var vbi = bdata[ib];
          // check b[ib] != 0, avoid loops
          if (!eq(vbi, zero)) {
            // A values & index in ib column
            for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
              // a row
              var ia = aindex[ka];
              // check value exists in current j
              if (!w[ia]) {
                // ia is new entry in j
                w[ia] = true;
                // add i to pattern of C
                cindex.push(ia);
                // x(ia) = A
                x[ia] = mf(vbi, avalues[ka]);
              } else {
                // i exists in C already
                x[ia] = af(x[ia], mf(vbi, avalues[ka]));
              }
            }
          }
        }
        // copy values from x to column jb of c
        for (var p1 = cindex.length, p = 0; p < p1; p++) {
          // row
          var ic = cindex[p];
          // copy value
          cvalues[p] = x[ic];
        }
        // update ptr
        cptr[1] = cindex.length;

        // return sparse matrix
        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, 1],
          datatype: dt
        });
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix      (MxN)
       * @param {Matrix} b            DenseMatrix       (NxC)
       *
       * @return {Matrix}             SparseMatrix      (MxC)
       */
      function _multiplySparseMatrixDenseMatrix(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype;
        // validate a matrix
        if (!avalues) {
          throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
        }
        // b dense
        var bdata = b._data;
        var bdt = b._datatype;
        // rows & columns
        var arows = a._size[0];
        var brows = b._size[0];
        var bcolumns = b._size[1];

        // datatype
        var dt;
        // addScalar signature to use
        var af = addScalar;
        // multiplyScalar signature to use
        var mf = multiplyScalar;
        // equalScalar signature to use
        var eq = equalScalar;
        // zero value
        var zero = 0;

        // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt;
          // find signatures that matches (dt, dt)
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]);
          // convert 0 to the same datatype
          zero = typed.convert(0, dt);
        }

        // result
        var cvalues = [];
        var cindex = [];
        var cptr = [];
        // c matrix
        var c = a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        });

        // workspace
        var x = [];
        // vector with marks indicating a value x[i] exists in a given column
        var w = [];

        // loop b columns
        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length;
          // mark in workspace for current column
          var mark = jb + 1;
          // rows in jb
          for (var ib = 0; ib < brows; ib++) {
            // b[ib, jb]
            var vbij = bdata[ib][jb];
            // check b[ib, jb] != 0, avoid loops
            if (!eq(vbij, zero)) {
              // A values & index in ib column
              for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // a row
                var ia = aindex[ka];
                // check value exists in current j
                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark;
                  // add i to pattern of C
                  cindex.push(ia);
                  // x(ia) = A
                  x[ia] = mf(vbij, avalues[ka]);
                } else {
                  // i exists in C already
                  x[ia] = af(x[ia], mf(vbij, avalues[ka]));
                }
              }
            }
          }
          // copy values from x to column jb of c
          for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
            // row
            var ic = cindex[p];
            // copy value
            cvalues[p] = x[ic];
          }
        }
        // update ptr
        cptr[bcolumns] = cindex.length;

        // return sparse matrix
        return c;
      }

      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix      (MxN)
       * @param {Matrix} b            SparseMatrix      (NxC)
       *
       * @return {Matrix}             SparseMatrix      (MxC)
       */
      function _multiplySparseMatrixSparseMatrix(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype;
        // b sparse
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bdt = b._datatype;

        // rows & columns
        var arows = a._size[0];
        var bcolumns = b._size[1];
        // flag indicating both matrices (a & b) contain data
        var values = avalues && bvalues;

        // datatype
        var dt;
        // addScalar signature to use
        var af = addScalar;
        // multiplyScalar signature to use
        var mf = multiplyScalar;

        // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt;
          // find signatures that matches (dt, dt)
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }

        // result
        var cvalues = values ? [] : undefined;
        var cindex = [];
        var cptr = [];
        // c matrix
        var c = a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        });

        // workspace
        var x = values ? [] : undefined;
        // vector with marks indicating a value x[i] exists in a given column
        var w = [];
        // variables
        var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
        // loop b columns
        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length;
          // mark in workspace for current column
          var mark = jb + 1;
          // B values & index in j
          for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
            // b row
            ib = bindex[kb];
            // check we need to process values
            if (values) {
              // loop values in a[:,ib]
              for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // row
                ia = aindex[ka];
                // check value exists in current j
                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark;
                  // add i to pattern of C
                  cindex.push(ia);
                  // x(ia) = A
                  x[ia] = mf(bvalues[kb], avalues[ka]);
                } else {
                  // i exists in C already
                  x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
                }
              }
            } else {
              // loop values in a[:,ib]
              for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // row
                ia = aindex[ka];
                // check value exists in current j
                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark;
                  // add i to pattern of C
                  cindex.push(ia);
                }
              }
            }
          }
          // check we need to process matrix values (pattern matrix)
          if (values) {
            // copy values from x to column jb of c
            for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
              // row
              var ic = cindex[p];
              // copy value
              cvalues[p] = x[ic];
            }
          }
        }
        // update ptr
        cptr[bcolumns] = cindex.length;

        // return sparse matrix
        return c;
      }

      /**
       * Multiply two or more values, `x * y`.
       * For matrices, the matrix product is calculated.
       *
       * Syntax:
       *
       *    math.multiply(x, y)
       *    math.multiply(x, y, z, ...)
       *
       * Examples:
       *
       *    math.multiply(4, 5.2)        // returns number 20.8
       *    math.multiply(2, 3, 4)       // returns number 24
       *
       *    const a = math.complex(2, 3)
       *    const b = math.complex(4, 1)
       *    math.multiply(a, b)          // returns Complex 5 + 14i
       *
       *    const c = [[1, 2], [4, 3]]
       *    const d = [[1, 2, 3], [3, -4, 7]]
       *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
       *
       *    const e = math.unit('2.1 km')
       *    math.multiply(3, e)          // returns Unit 6.3 km
       *
       * See also:
       *
       *    divide, prod, cross, dot
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
       */
      return typed(name$5, multiplyScalar, {
        // we extend the signatures of multiplyScalar with signatures dealing with matrices

        'Array, Array': typed.referTo('Matrix, Matrix', selfMM => (x, y) => {
          // check dimensions
          _validateMatrixDimensions(arraySize(x), arraySize(y));

          // use dense matrix implementation
          var m = selfMM(matrix(x), matrix(y));
          // return array or scalar
          return isMatrix(m) ? m.valueOf() : m;
        }),
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          // dimensions
          var xsize = x.size();
          var ysize = y.size();

          // check dimensions
          _validateMatrixDimensions(xsize, ysize);

          // process dimensions
          if (xsize.length === 1) {
            // process y dimensions
            if (ysize.length === 1) {
              // Vector * Vector
              return _multiplyVectorVector(x, y, xsize[0]);
            }
            // Vector * Matrix
            return _multiplyVectorMatrix(x, y);
          }
          // process y dimensions
          if (ysize.length === 1) {
            // Matrix * Vector
            return _multiplyMatrixVector(x, y);
          }
          // Matrix * Matrix
          return _multiplyMatrixMatrix(x, y);
        },
        'Matrix, Array': typed.referTo('Matrix,Matrix', selfMM => (x, y) => selfMM(x, matrix(y))),
        'Array, Matrix': typed.referToSelf(self => (x, y) => {
          // use Matrix * Matrix implementation
          return self(matrix(x, y.storage()), y);
        }),
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return matAlgo11xS0s(x, y, multiplyScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return matAlgo14xDs(x, y, multiplyScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return matAlgo11xS0s(y, x, multiplyScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return matAlgo14xDs(y, x, multiplyScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return matAlgo14xDs(matrix(x), y, multiplyScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return matAlgo14xDs(matrix(y), x, multiplyScalar, true).valueOf();
        },
        'any, any': multiplyScalar,
        'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {
          var result = self(x, y);
          for (var i = 0; i < rest.length; i++) {
            result = self(result, rest[i]);
          }
          return result;
        })
      });
    });

    var name$4 = 'conj';
    var dependencies$4 = ['typed'];
    var createConj = /* #__PURE__ */factory(name$4, dependencies$4, _ref => {
      var {
        typed
      } = _ref;
      /**
       * Compute the complex conjugate of a complex value.
       * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.conj(x)
       *
       * Examples:
       *
       *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
       *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
       *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
       *
       * See also:
       *
       *    re, im, arg, abs
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            The complex conjugate of x
       */
      return typed(name$4, {
        'number | BigNumber | Fraction': x => x,
        Complex: x => x.conjugate(),
        'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))
      });
    });

    function noMatrix() {
      throw new Error('No "matrix" implementation available');
    }

    var name$3 = 'reshape';
    var dependencies$3 = ['typed', 'isInteger', 'matrix'];
    var createReshape = /* #__PURE__ */factory(name$3, dependencies$3, _ref => {
      var {
        typed,
        isInteger
      } = _ref;
      /**
       * Reshape a multi dimensional array to fit the specified dimensions
       *
       * Syntax:
       *
       *     math.reshape(x, sizes)
       *
       * Examples:
       *
       *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
       *     // returns Array  [[1, 2, 3], [4, 5, 6]]
       *
       *     math.reshape([[1, 2], [3, 4]], [1, 4])
       *     // returns Array  [[1, 2, 3, 4]]
       *
       *     math.reshape([[1, 2], [3, 4]], [4])
       *     // returns Array [1, 2, 3, 4]
       *
       *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
       *     math.reshape(x, [2, 2, 2])
       *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
       *
       *    math.reshape([1, 2, 3, 4], [-1, 2])
       *    // returns Matrix [[1, 2], [3, 4]]
       *
       * See also:
       *
       *     size, squeeze, resize
       *
       * @param {Array | Matrix | *} x  Matrix to be reshaped
       * @param {number[]} sizes        One dimensional array with integral sizes for
       *                                each dimension. One -1 is allowed as wildcard,
       *                                which calculates this dimension automatically.
       *
       * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
       *
       * @throws {TypeError}            If `sizes` does not contain solely integers
       * @throws {DimensionError}       If the product of the new dimension sizes does
       *                                not equal that of the old ones
       */
      return typed(name$3, {
        'Matrix, Array': function MatrixArray(x, sizes) {
          return x.reshape(sizes);
        },
        'Array, Array': function ArrayArray(x, sizes) {
          sizes.forEach(function (size) {
            if (!isInteger(size)) {
              throw new TypeError('Invalid size for dimension: ' + size);
            }
          });
          return reshape$1(x, sizes);
        }
      });
    });

    var name$2 = 'size';
    var dependencies$2 = ['typed', 'config', '?matrix'];
    var createSize = /* #__PURE__ */factory(name$2, dependencies$2, _ref => {
      var {
        typed,
        config,
        matrix
      } = _ref;
      /**
       * Calculate the size of a matrix or scalar.
       *
       * Syntax:
       *
       *     math.size(x)
       *
       * Examples:
       *
       *     math.size(2.3)                  // returns []
       *     math.size('hello world')        // returns [11]
       *
       *     const A = [[1, 2, 3], [4, 5, 6]]
       *     math.size(A)                    // returns [2, 3]
       *     math.size(math.range(1,6))      // returns [5]
       *
       * See also:
       *
       *     count, resize, squeeze, subset
       *
       * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
       * @return {Array | Matrix} A vector with size of `x`.
       */
      return typed(name$2, {
        Matrix: function Matrix(x) {
          return x.create(x.size());
        },
        Array: arraySize,
        string: function string(x) {
          return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
        },
        'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
          // scalar
          return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();
        }
      });
    });

    var name$1 = 'add';
    var dependencies$1 = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];
    var createAdd = /* #__PURE__ */factory(name$1, dependencies$1, _ref => {
      var {
        typed,
        matrix,
        addScalar,
        equalScalar,
        DenseMatrix,
        SparseMatrix
      } = _ref;
      var matAlgo01xDSid = createMatAlgo01xDSid({
        typed
      });
      var matAlgo04xSidSid = createMatAlgo04xSidSid({
        typed,
        equalScalar
      });
      var matAlgo10xSids = createMatAlgo10xSids({
        typed,
        DenseMatrix
      });
      var matrixAlgorithmSuite = createMatrixAlgorithmSuite({
        typed,
        matrix
      });

      /**
       * Add two or more values, `x + y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.add(x, y)
       *    math.add(x, y, z, ...)
       *
       * Examples:
       *
       *    math.add(2, 3)               // returns number 5
       *    math.add(2, 3, 4)            // returns number 9
       *
       *    const a = math.complex(2, 3)
       *    const b = math.complex(-4, 1)
       *    math.add(a, b)               // returns Complex -2 + 4i
       *
       *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
       *
       *    const c = math.unit('5 cm')
       *    const d = math.unit('2.1 mm')
       *    math.add(c, d)               // returns Unit 52.1 mm
       *
       *    math.add("2.3", "4")         // returns number 6.3
       *
       * See also:
       *
       *    subtract, sum
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
       */
      return typed(name$1, {
        'any, any': addScalar,
        'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {
          var result = self(x, y);
          for (var i = 0; i < rest.length; i++) {
            result = self(result, rest[i]);
          }
          return result;
        })
      }, matrixAlgorithmSuite({
        elop: addScalar,
        DS: matAlgo01xDSid,
        SS: matAlgo04xSidSid,
        Ss: matAlgo10xSids
      }));
    });

    var name = 'dot';
    var dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];
    var createDot = /* #__PURE__ */factory(name, dependencies, _ref => {
      var {
        typed,
        addScalar,
        multiplyScalar,
        conj,
        size
      } = _ref;
      /**
       * Calculate the dot product of two vectors. The dot product of
       * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:
       *
       *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn
       *
       * Syntax:
       *
       *    math.dot(x, y)
       *
       * Examples:
       *
       *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
       *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
       *
       * See also:
       *
       *    multiply, cross
       *
       * @param  {Array | Matrix} x     First vector
       * @param  {Array | Matrix} y     Second vector
       * @return {number}               Returns the dot product of `x` and `y`
       */
      return typed(name, {
        'Array | DenseMatrix, Array | DenseMatrix': _denseDot,
        'SparseMatrix, SparseMatrix': _sparseDot
      });
      function _validateDim(x, y) {
        var xSize = _size(x);
        var ySize = _size(y);
        var xLen, yLen;
        if (xSize.length === 1) {
          xLen = xSize[0];
        } else if (xSize.length === 2 && xSize[1] === 1) {
          xLen = xSize[0];
        } else {
          throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');
        }
        if (ySize.length === 1) {
          yLen = ySize[0];
        } else if (ySize.length === 2 && ySize[1] === 1) {
          yLen = ySize[0];
        } else {
          throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');
        }
        if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');
        if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
        return xLen;
      }
      function _denseDot(a, b) {
        var N = _validateDim(a, b);
        var adata = isMatrix(a) ? a._data : a;
        var adt = isMatrix(a) ? a._datatype : undefined;
        var bdata = isMatrix(b) ? b._data : b;
        var bdt = isMatrix(b) ? b._datatype : undefined;

        // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)
        var aIsColumn = _size(a).length === 2;
        var bIsColumn = _size(b).length === 2;
        var add = addScalar;
        var mul = multiplyScalar;

        // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          var dt = adt;
          // find signatures that matches (dt, dt)
          add = typed.find(addScalar, [dt, dt]);
          mul = typed.find(multiplyScalar, [dt, dt]);
        }

        // both vectors 1-dimensional
        if (!aIsColumn && !bIsColumn) {
          var c = mul(conj(adata[0]), bdata[0]);
          for (var i = 1; i < N; i++) {
            c = add(c, mul(conj(adata[i]), bdata[i]));
          }
          return c;
        }

        // a is 1-dim, b is column
        if (!aIsColumn && bIsColumn) {
          var _c = mul(conj(adata[0]), bdata[0][0]);
          for (var _i = 1; _i < N; _i++) {
            _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));
          }
          return _c;
        }

        // a is column, b is 1-dim
        if (aIsColumn && !bIsColumn) {
          var _c2 = mul(conj(adata[0][0]), bdata[0]);
          for (var _i2 = 1; _i2 < N; _i2++) {
            _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));
          }
          return _c2;
        }

        // both vectors are column
        if (aIsColumn && bIsColumn) {
          var _c3 = mul(conj(adata[0][0]), bdata[0][0]);
          for (var _i3 = 1; _i3 < N; _i3++) {
            _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));
          }
          return _c3;
        }
      }
      function _sparseDot(x, y) {
        _validateDim(x, y);
        var xindex = x._index;
        var xvalues = x._values;
        var yindex = y._index;
        var yvalues = y._values;

        // TODO optimize add & mul using datatype
        var c = 0;
        var add = addScalar;
        var mul = multiplyScalar;
        var i = 0;
        var j = 0;
        while (i < xindex.length && j < yindex.length) {
          var I = xindex[i];
          var J = yindex[j];
          if (I < J) {
            i++;
            continue;
          }
          if (I > J) {
            j++;
            continue;
          }
          if (I === J) {
            c = add(c, mul(xvalues[i], yvalues[j]));
            i++;
            j++;
          }
        }
        return c;
      }

      // TODO remove this once #1771 is fixed
      function _size(x) {
        return isMatrix(x) ? x.size() : size(x);
      }
    });

    /**
     * THIS FILE IS AUTO-GENERATED
     * DON'T MAKE CHANGES HERE
     */
    var BigNumber = /* #__PURE__ */createBigNumberClass({
      config: config$1
    });
    var Complex = /* #__PURE__ */createComplexClass({});
    var Fraction = /* #__PURE__ */createFractionClass({});
    var Matrix = /* #__PURE__ */createMatrixClass({});
    var DenseMatrix = /* #__PURE__ */createDenseMatrixClass({
      Matrix
    });
    var typed = /* #__PURE__ */createTyped({
      BigNumber,
      Complex,
      DenseMatrix,
      Fraction
    });
    var addScalar = /* #__PURE__ */createAddScalar({
      typed
    });
    var conj = /* #__PURE__ */createConj({
      typed
    });
    var equalScalar = /* #__PURE__ */createEqualScalar({
      config: config$1,
      typed
    });
    var isInteger = /* #__PURE__ */createIsInteger({
      typed
    });
    var multiplyScalar = /* #__PURE__ */createMultiplyScalar({
      typed
    });
    var SparseMatrix = /* #__PURE__ */createSparseMatrixClass({
      Matrix,
      equalScalar,
      typed
    });
    var matrix = /* #__PURE__ */createMatrix({
      DenseMatrix,
      Matrix,
      SparseMatrix,
      typed
    });
    var reshape = /* #__PURE__ */createReshape({
      isInteger,
      matrix,
      typed
    });
    var size = /* #__PURE__ */createSize({
      matrix,
      config: config$1,
      typed
    });
    var add = /* #__PURE__ */createAdd({
      DenseMatrix,
      SparseMatrix,
      addScalar,
      equalScalar,
      matrix,
      typed
    });
    var dot = /* #__PURE__ */createDot({
      addScalar,
      conj,
      multiplyScalar,
      size,
      typed
    });
    var multiply = /* #__PURE__ */createMultiply({
      addScalar,
      dot,
      equalScalar,
      matrix,
      multiplyScalar,
      typed
    });

    // Finds the index of the maximum
    function argMax$4(array) {
        return array.map((x, i) => [x, i]).reduce((r, a) => (a[0] > r[0] ? a : r))[1];
    }

    // Finds the index of the minimum
    function argMin(array) {
        return array.map((x, i) => [x, i]).reduce((r, a) => (a[0] < r[0] ? a : r))[1];
    }

    // Helper function to generate numbers which are normally distributed
    function gaussianRandom(mean=0, stdev=1) {
        let u = 1 - Math.random(); //Converting [0,1) to (0,1)
        let v = Math.random();
        let z = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );
        // Transform to the desired mean and standard deviation:
        return z * stdev + mean;
    }


    class MultiArmBandit{
        constructor(
            armsMeans = [2,5],
            armsStds = [1.0, 1.0],
            epsilon = 0.2,
            alpha = 0.1,
        ){
            this.armsMeans = armsMeans;
            this.armsStds = armsStds;
            this.epsilon = epsilon;
            this.alpha = alpha;
            this.qValues = new Array(this.armsMeans);
            for (let i=0; i<this.armsMeans.length; i++){
                this.qValues[i] = 0;
            }

             // Check if the dimensions of armsMean and armsStd are valid
            if (this.armsMeans.length != this.armsStds.length){
                throw "armsMeans and armsStd need to have the same length";
            }
        }

        // Reset the Q-Values to zeros
        resetQValues(){
            this.qValues = new Array(this.armsMeans);
            for (let i=0; i<this.armsMeans.length; i++){
                this.qValues[i] = 0;
            }
            // Start with agent favoring the suboptimal choice
            this.qValues[argMin(this.armsMeans)] = Math.max(...this.armsMeans);
        }

       // Update the Q-Values
       updateQValues(reward, index){
            this.qValues[index] += this.alpha* (reward - this.qValues[index]);
       }

       // Pull an arm and generate the reward
       pullBanditArm(index){
            return gaussianRandom(this.armsMeans[index], this.armsStds[index]);
       }

       // Run one trial
       runTrial(){
        let bandit_index;
        if (Math.random() < this.epsilon){
            bandit_index = Math.floor(Math.random() * this.armsMeans.length);
        } else {
            bandit_index = argMax$4(this.qValues);
        }
        let reward = this.pullBanditArm(bandit_index);
        this.updateQValues(reward, bandit_index);
        
        return this.qValues
       }
            
       // Run simulaiton over defined time steps
       runTrials(numTrials=100){
            episodicValues = new Array(this.armsMeans).fill(
                new Array(numTrials).fill(0)
            );

            for (var i=0; i<numTrials; i +=1){
                // Epsilon greedy action selection
                if (Math.random() < this.epsilon){
                    bandit_index = Math.floor(Math.random() * this.armsMeans.length);
                } else {
                    bandit_index = argMax$4(this.qValues);
                }

                reward = this.pullBanditArm(bandit_index);
                this.updateQValues(reward, bandit_index);
            }

            return episodicValues;
       }


    }

    /* src/Components/Bandit.svelte generated by Svelte v3.52.0 */
    const file$b = "src/Components/Bandit.svelte";

    function create_fragment$c(ctx) {
    	let h2;
    	let t1;
    	let p0;
    	let t3;
    	let br0;
    	let br1;
    	let t4;
    	let p1;
    	let t5;
    	let span;
    	let t7;
    	let t8;
    	let br2;
    	let br3;
    	let t9;
    	let p2;
    	let t11;
    	let br4;
    	let br5;
    	let t12;
    	let p3;
    	let t14;
    	let table;
    	let tr0;
    	let th0;
    	let t16;
    	let th1;
    	let t18;
    	let th2;
    	let t20;
    	let th3;
    	let t22;
    	let th4;
    	let t24;
    	let tr1;
    	let td0;
    	let t26;
    	let td1;
    	let t28;
    	let td2;
    	let t30;
    	let td3;
    	let t32;
    	let td4;
    	let t34;
    	let div2;
    	let div0;
    	let simulationbandit;
    	let t35;
    	let div1;
    	let scatterbandit;
    	let t36;
    	let div3;
    	let button0;
    	let t38;
    	let button1;
    	let t40;
    	let button2;
    	let current;
    	let mounted;
    	let dispose;
    	simulationbandit = new SimulationBandit({ $$inline: true });
    	scatterbandit = new ScatterBandit({ $$inline: true });

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Choosing Between Two Trees";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "In pursuit of finding bananas, the robot can pick either Tree A or Tree B.\n  Tree A produces on average 3 bananas, with a standard deviation of 1 banana,\n  and Tree B produces on average 6 bananas, with a standard deviation of 2\n  bananas. The goal is to maximize the number of bananas found, however, the\n  robot does not know which tree produces more bananas. Since the robot does not\n  know which action will lead to greater reward, it must make choices and\n  observe the outcomes directly.";
    			t3 = space();
    			br0 = element("br");
    			br1 = element("br");
    			t4 = space();
    			p1 = element("p");
    			t5 = text("This type of reinforcement learning problem resembles that of the ");
    			span = element("span");
    			span.textContent = "multi-armed bandit problem";
    			t7 = text(". The multi-armed bandit problem is named after the one-armed bandit \n  slot machine, except it has multiple levers or 'arms'. A player must \n  decide, given limited resources, which levers to pull to have the greatest \n  chance of hitting the jackpot. Here, the trees are the 'arms' and the \n  robot must decide how to choose between them.");
    			t8 = space();
    			br2 = element("br");
    			br3 = element("br");
    			t9 = space();
    			p2 = element("p");
    			p2.textContent = "Observe how the robot makes choices between the two trees and receives the\n  reward. This reward information is stored in what is called a Q-value, which\n  reflects the expected reward for each action based on the history of\n  experienced rewards. In this case, the robot maintains two Q-values: one for\n  Tree A and one for Tree B.";
    			t11 = space();
    			br4 = element("br");
    			br5 = element("br");
    			t12 = space();
    			p3 = element("p");
    			p3.textContent = "Initially, the robot prefers to select Tree A, having known it \n  yields bananas. However, upon occassionally sampling Tree B, it starts \n  reinforcing its decision to select Tree B more, as it is more fruitful. \n  This phenomenon is discussed in the next section.";
    			t14 = space();
    			table = element("table");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Agent";
    			t16 = space();
    			th1 = element("th");
    			th1.textContent = "Environment";
    			t18 = space();
    			th2 = element("th");
    			th2.textContent = "State";
    			t20 = space();
    			th3 = element("th");
    			th3.textContent = "Actions";
    			t22 = space();
    			th4 = element("th");
    			th4.textContent = "Reward";
    			t24 = space();
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "Robot";
    			t26 = space();
    			td1 = element("td");
    			td1.textContent = "Two Options";
    			t28 = space();
    			td2 = element("td");
    			td2.textContent = "None";
    			t30 = space();
    			td3 = element("td");
    			td3.textContent = "Tree A, Tree B";
    			t32 = space();
    			td4 = element("td");
    			td4.textContent = "Number of Bananas";
    			t34 = space();
    			div2 = element("div");
    			div0 = element("div");
    			create_component(simulationbandit.$$.fragment);
    			t35 = space();
    			div1 = element("div");
    			create_component(scatterbandit.$$.fragment);
    			t36 = space();
    			div3 = element("div");
    			button0 = element("button");
    			button0.textContent = "Select 5 Action";
    			t38 = space();
    			button1 = element("button");
    			button1.textContent = "Select 10 Actions";
    			t40 = space();
    			button2 = element("button");
    			button2.textContent = "Reset";
    			attr_dev(h2, "class", "body-secondary-header");
    			add_location(h2, file$b, 96, 0, 2374);
    			attr_dev(p0, "class", "body-text");
    			add_location(p0, file$b, 98, 0, 2441);
    			add_location(br0, file$b, 107, 0, 2964);
    			add_location(br1, file$b, 107, 6, 2970);
    			attr_dev(span, "class", "bold");
    			add_location(span, file$b, 109, 68, 3067);
    			attr_dev(p1, "class", "body-text");
    			add_location(p1, file$b, 108, 0, 2977);
    			add_location(br2, file$b, 117, 0, 3472);
    			add_location(br3, file$b, 117, 6, 3478);
    			attr_dev(p2, "class", "body-text");
    			add_location(p2, file$b, 118, 0, 3485);
    			add_location(br4, file$b, 125, 0, 3847);
    			add_location(br5, file$b, 125, 6, 3853);
    			attr_dev(p3, "class", "body-text");
    			add_location(p3, file$b, 126, 0, 3860);
    			attr_dev(th0, "class", "table-head svelte-7if1im");
    			add_location(th0, file$b, 136, 4, 4175);
    			attr_dev(th1, "class", "table-head svelte-7if1im");
    			add_location(th1, file$b, 137, 4, 4213);
    			attr_dev(th2, "class", "table-head svelte-7if1im");
    			add_location(th2, file$b, 138, 4, 4257);
    			attr_dev(th3, "class", "table-head svelte-7if1im");
    			add_location(th3, file$b, 139, 4, 4295);
    			attr_dev(th4, "class", "table-head svelte-7if1im");
    			add_location(th4, file$b, 140, 4, 4335);
    			add_location(tr0, file$b, 135, 2, 4166);
    			attr_dev(td0, "class", "svelte-7if1im");
    			add_location(td0, file$b, 143, 4, 4389);
    			attr_dev(td1, "class", "svelte-7if1im");
    			add_location(td1, file$b, 144, 4, 4408);
    			attr_dev(td2, "class", "svelte-7if1im");
    			add_location(td2, file$b, 145, 4, 4433);
    			attr_dev(td3, "class", "svelte-7if1im");
    			add_location(td3, file$b, 146, 4, 4451);
    			attr_dev(td4, "class", "svelte-7if1im");
    			add_location(td4, file$b, 147, 4, 4479);
    			add_location(tr1, file$b, 142, 2, 4380);
    			attr_dev(table, "class", "svelte-7if1im");
    			add_location(table, file$b, 134, 0, 4156);
    			attr_dev(div0, "id", "simulation-chart");
    			add_location(div0, file$b, 152, 2, 4553);
    			attr_dev(div1, "id", "scatter-chart");
    			add_location(div1, file$b, 155, 2, 4617);
    			attr_dev(div2, "id", "graph-container");
    			attr_dev(div2, "class", "svelte-7if1im");
    			add_location(div2, file$b, 151, 0, 4524);
    			attr_dev(button0, "class", "svelte-7if1im");
    			add_location(button0, file$b, 161, 2, 4712);
    			attr_dev(button1, "class", "svelte-7if1im");
    			add_location(button1, file$b, 162, 2, 4783);
    			attr_dev(button2, "class", "svelte-7if1im");
    			add_location(button2, file$b, 163, 2, 4857);
    			attr_dev(div3, "id", "buttons-container");
    			attr_dev(div3, "class", "svelte-7if1im");
    			add_location(div3, file$b, 160, 0, 4681);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, br0, anchor);
    			insert_dev(target, br1, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t5);
    			append_dev(p1, span);
    			append_dev(p1, t7);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, br2, anchor);
    			insert_dev(target, br3, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, p2, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, br4, anchor);
    			insert_dev(target, br5, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, p3, anchor);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t16);
    			append_dev(tr0, th1);
    			append_dev(tr0, t18);
    			append_dev(tr0, th2);
    			append_dev(tr0, t20);
    			append_dev(tr0, th3);
    			append_dev(tr0, t22);
    			append_dev(tr0, th4);
    			append_dev(table, t24);
    			append_dev(table, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t26);
    			append_dev(tr1, td1);
    			append_dev(tr1, t28);
    			append_dev(tr1, td2);
    			append_dev(tr1, t30);
    			append_dev(tr1, td3);
    			append_dev(tr1, t32);
    			append_dev(tr1, td4);
    			insert_dev(target, t34, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(simulationbandit, div0, null);
    			append_dev(div2, t35);
    			append_dev(div2, div1);
    			mount_component(scatterbandit, div1, null);
    			insert_dev(target, t36, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, button0);
    			append_dev(div3, t38);
    			append_dev(div3, button1);
    			append_dev(div3, t40);
    			append_dev(div3, button2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[2], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[3], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(simulationbandit.$$.fragment, local);
    			transition_in(scatterbandit.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(simulationbandit.$$.fragment, local);
    			transition_out(scatterbandit.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(br0);
    			if (detaching) detach_dev(br1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(br2);
    			if (detaching) detach_dev(br3);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(br4);
    			if (detaching) detach_dev(br5);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(table);
    			if (detaching) detach_dev(t34);
    			if (detaching) detach_dev(div2);
    			destroy_component(simulationbandit);
    			destroy_component(scatterbandit);
    			if (detaching) detach_dev(t36);
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const numX = 1;
    const numY$2 = 1;
    const maxEpisodes$2 = 200;

    // Finds the index of the maximum
    function argMax$3(array) {
    	return array.map((x, i) => [x, i]).reduce((r, a) => a[0] > r[0] ? a : r)[1];
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $banditQValues;
    	let $banditEpsilon;
    	validate_store(banditQValues, 'banditQValues');
    	component_subscribe($$self, banditQValues, $$value => $$invalidate(6, $banditQValues = $$value));
    	validate_store(banditEpsilon, 'banditEpsilon');
    	component_subscribe($$self, banditEpsilon, $$value => $$invalidate(7, $banditEpsilon = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Bandit', slots, []);
    	const randomInt = (max, min) => Math.round(Math.random() * (max - min)) + min;

    	// Keep records at intervals. 
    	var episodeCount = 0;

    	// Define the env
    	const env = new MultiArmBandit([2, 5], [1.0, 1.0], $banditEpsilon, 0.1); // Mean value of each arm
    	// STD of each arm
    	// Epsilon (exploration)
    	// Alpha (Q-value update step)

    	// Reset simulation
    	reset();

    	function runBanditTrials(numEpisodes) {
    		for (let ep = 0; ep < numEpisodes; ep++) {
    			// Limit simulation to maxEpisodes
    			if (episodeCount > maxEpisodes$2) {
    				break;
    			}

    			let maxDir;
    			let q_val = env.runTrial();

    			if (q_val[0] > q_val[1]) {
    				maxDir = "left";
    			} else {
    				maxDir = "right";
    			}

    			const valSum = Math.abs(q_val[0]) + Math.abs(q_val[1]);

    			const newVals = $banditQValues.map((state, index) => {
    				const vals = {
    					episodeNumber: [...Array(state["left"].length + 1).keys()],
    					left: [...state["left"], q_val[0]],
    					right: [...state["right"], q_val[1]],
    					maxDirection: [...state["maxDirection"], maxDir],
    					leftWeight: [...state["leftWeight"], q_val[0] / valSum || 0],
    					rightWeight: [...state["rightWeight"], q_val[1] / valSum || 0]
    				};

    				return vals;
    			});

    			set_store_value(banditQValues, $banditQValues = [...newVals], $banditQValues);
    			episodeCount++;
    		}
    	}

    	// Reset the environment
    	function reset() {
    		// Reset episode count
    		episodeCount = 0;

    		// Reset env
    		env.resetQValues();

    		//Reset banditQValues
    		banditQValues.set([
    			{
    				episodeNumber: [],
    				left: [],
    				right: [],
    				maxDirection: [],
    				leftWeight: [],
    				rightWeight: []
    			}
    		]);

    		banditRobot.set({ x: 0.5, y: 0.5 });
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Bandit> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => runBanditTrials(5);
    	const click_handler_1 = () => runBanditTrials(10);
    	const click_handler_2 = () => reset();

    	$$self.$capture_state = () => ({
    		ScatterBandit,
    		SimulationBandit,
    		banditRobot,
    		banditEpsilon,
    		banditQValues,
    		MultiArmBandit,
    		onMount,
    		select,
    		selectAll,
    		randomInt,
    		argMax: argMax$3,
    		numX,
    		numY: numY$2,
    		episodeCount,
    		maxEpisodes: maxEpisodes$2,
    		env,
    		runBanditTrials,
    		reset,
    		$banditQValues,
    		$banditEpsilon
    	});

    	$$self.$inject_state = $$props => {
    		if ('episodeCount' in $$props) episodeCount = $$props.episodeCount;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [runBanditTrials, reset, click_handler, click_handler_1, click_handler_2];
    }

    class Bandit extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Bandit",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* src/Components/QChartLine.svelte generated by Svelte v3.52.0 */
    const file$a = "src/Components/QChartLine.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    // (66:0) {#each xScale.ticks() as tick}
    function create_each_block_1$3(ctx) {
    	let g;
    	let text_1;

    	let t_value = (/*tick*/ ctx[15] % /*tickModulo*/ ctx[5] == 0
    	? /*formatter*/ ctx[9](/*tick*/ ctx[15])
    	: "") + "";

    	let t;
    	let g_transform_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "class", "axis-text svelte-6tk6ov");
    			attr_dev(text_1, "y", "7");
    			attr_dev(text_1, "text-anchor", "middle");
    			add_location(text_1, file$a, 69, 4, 1595);
    			attr_dev(g, "transform", g_transform_value = `translate(${/*xScale*/ ctx[3](/*tick*/ ctx[15]) + 0} ${/*height*/ ctx[0] - /*$lineMargin*/ ctx[4].bottom})`);
    			add_location(g, file$a, 66, 2, 1504);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*xScale, tickModulo*/ 40 && t_value !== (t_value = (/*tick*/ ctx[15] % /*tickModulo*/ ctx[5] == 0
    			? /*formatter*/ ctx[9](/*tick*/ ctx[15])
    			: "") + "")) set_data_dev(t, t_value);

    			if (dirty & /*xScale, height, $lineMargin*/ 25 && g_transform_value !== (g_transform_value = `translate(${/*xScale*/ ctx[3](/*tick*/ ctx[15]) + 0} ${/*height*/ ctx[0] - /*$lineMargin*/ ctx[4].bottom})`)) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(66:0) {#each xScale.ticks() as tick}",
    		ctx
    	});

    	return block;
    }

    // (77:0) {#each yScale.ticks() as tick}
    function create_each_block$5(ctx) {
    	let g;
    	let text_1;

    	let t0_value = (/*tick*/ ctx[15] % 2 == 0
    	? /*formatter*/ ctx[9](/*tick*/ ctx[15])
    	: "") + "";

    	let t0;
    	let g_transform_value;
    	let t1;
    	let line0;
    	let line0_x__value;
    	let line0_x__value_1;
    	let line0_y__value;
    	let line0_y__value_1;
    	let t2;
    	let line1;
    	let line1_x__value;
    	let line1_x__value_1;
    	let line1_y__value;
    	let line1_y__value_1;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			text_1 = svg_element("text");
    			t0 = text(t0_value);
    			t1 = space();
    			line0 = svg_element("line");
    			t2 = space();
    			line1 = svg_element("line");
    			attr_dev(text_1, "class", "axis-text svelte-6tk6ov");
    			attr_dev(text_1, "y", "0");
    			attr_dev(text_1, "dx", "1");
    			attr_dev(text_1, "text-anchor", "end");
    			attr_dev(text_1, "dominant-baseline", "middle");
    			add_location(text_1, file$a, 78, 4, 1856);
    			attr_dev(g, "transform", g_transform_value = `translate(${/*$lineMargin*/ ctx[4].left - 5} ${/*yScale*/ ctx[2](/*tick*/ ctx[15]) + 0})`);
    			add_location(g, file$a, 77, 2, 1779);
    			attr_dev(line0, "class", "axis-line");
    			attr_dev(line0, "x1", line0_x__value = /*$lineMargin*/ ctx[4].left);
    			attr_dev(line0, "x2", line0_x__value_1 = /*$lineMargin*/ ctx[4].left);
    			attr_dev(line0, "y1", line0_y__value = /*$lineMargin*/ ctx[4].top);
    			attr_dev(line0, "y2", line0_y__value_1 = /*height*/ ctx[0] - /*$lineMargin*/ ctx[4].bottom);
    			attr_dev(line0, "stroke", "black");
    			add_location(line0, file$a, 88, 2, 2100);
    			attr_dev(line1, "class", "axis-line");
    			attr_dev(line1, "x1", line1_x__value = /*$lineMargin*/ ctx[4].left);
    			attr_dev(line1, "x2", line1_x__value_1 = /*width*/ ctx[1] - /*$lineMargin*/ ctx[4].right);
    			attr_dev(line1, "y1", line1_y__value = /*height*/ ctx[0] - /*$lineMargin*/ ctx[4].bottom);
    			attr_dev(line1, "y2", line1_y__value_1 = /*height*/ ctx[0] - /*$lineMargin*/ ctx[4].bottom);
    			attr_dev(line1, "stroke", "black");
    			add_location(line1, file$a, 97, 2, 2318);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, text_1);
    			append_dev(text_1, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, line0, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, line1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*yScale*/ 4 && t0_value !== (t0_value = (/*tick*/ ctx[15] % 2 == 0
    			? /*formatter*/ ctx[9](/*tick*/ ctx[15])
    			: "") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$lineMargin, yScale*/ 20 && g_transform_value !== (g_transform_value = `translate(${/*$lineMargin*/ ctx[4].left - 5} ${/*yScale*/ ctx[2](/*tick*/ ctx[15]) + 0})`)) {
    				attr_dev(g, "transform", g_transform_value);
    			}

    			if (dirty & /*$lineMargin*/ 16 && line0_x__value !== (line0_x__value = /*$lineMargin*/ ctx[4].left)) {
    				attr_dev(line0, "x1", line0_x__value);
    			}

    			if (dirty & /*$lineMargin*/ 16 && line0_x__value_1 !== (line0_x__value_1 = /*$lineMargin*/ ctx[4].left)) {
    				attr_dev(line0, "x2", line0_x__value_1);
    			}

    			if (dirty & /*$lineMargin*/ 16 && line0_y__value !== (line0_y__value = /*$lineMargin*/ ctx[4].top)) {
    				attr_dev(line0, "y1", line0_y__value);
    			}

    			if (dirty & /*height, $lineMargin*/ 17 && line0_y__value_1 !== (line0_y__value_1 = /*height*/ ctx[0] - /*$lineMargin*/ ctx[4].bottom)) {
    				attr_dev(line0, "y2", line0_y__value_1);
    			}

    			if (dirty & /*$lineMargin*/ 16 && line1_x__value !== (line1_x__value = /*$lineMargin*/ ctx[4].left)) {
    				attr_dev(line1, "x1", line1_x__value);
    			}

    			if (dirty & /*width, $lineMargin*/ 18 && line1_x__value_1 !== (line1_x__value_1 = /*width*/ ctx[1] - /*$lineMargin*/ ctx[4].right)) {
    				attr_dev(line1, "x2", line1_x__value_1);
    			}

    			if (dirty & /*height, $lineMargin*/ 17 && line1_y__value !== (line1_y__value = /*height*/ ctx[0] - /*$lineMargin*/ ctx[4].bottom)) {
    				attr_dev(line1, "y1", line1_y__value);
    			}

    			if (dirty & /*height, $lineMargin*/ 17 && line1_y__value_1 !== (line1_y__value_1 = /*height*/ ctx[0] - /*$lineMargin*/ ctx[4].bottom)) {
    				attr_dev(line1, "y2", line1_y__value_1);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(line0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(line1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(77:0) {#each yScale.ticks() as tick}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let t0;
    	let t1;
    	let path0;
    	let path0_d_value;
    	let t2;
    	let path1;
    	let path1_d_value;
    	let each_value_1 = /*xScale*/ ctx[3].ticks();
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	let each_value = /*yScale*/ ctx[2].ticks();
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t0 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			path0 = svg_element("path");
    			t2 = space();
    			path1 = svg_element("path");
    			attr_dev(path0, "class", "q-path pathLeft-line svelte-6tk6ov");
    			attr_dev(path0, "d", path0_d_value = /*pathGenerator*/ ctx[6](/*pathLeftData*/ ctx[8]));
    			add_location(path0, file$a, 108, 0, 2545);
    			attr_dev(path1, "class", "q-path pathRight-line svelte-6tk6ov");
    			attr_dev(path1, "d", path1_d_value = /*pathGenerator*/ ctx[6](/*pathRightData*/ ctx[7]));
    			add_location(path1, file$a, 109, 0, 2615);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(target, anchor);
    			}

    			insert_dev(target, t0, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, path0, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, path1, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*xScale, height, $lineMargin, tickModulo, formatter*/ 569) {
    				each_value_1 = /*xScale*/ ctx[3].ticks();
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$3(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(t0.parentNode, t0);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*$lineMargin, width, height, yScale, formatter*/ 535) {
    				each_value = /*yScale*/ ctx[2].ticks();
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(t1.parentNode, t1);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*pathGenerator, pathLeftData*/ 320 && path0_d_value !== (path0_d_value = /*pathGenerator*/ ctx[6](/*pathLeftData*/ ctx[8]))) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (dirty & /*pathGenerator, pathRightData*/ 192 && path1_d_value !== (path1_d_value = /*pathGenerator*/ ctx[6](/*pathRightData*/ ctx[7]))) {
    				attr_dev(path1, "d", path1_d_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(path0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(path1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let xMax;
    	let xScale;
    	let yScale;
    	let pathLeftData;
    	let pathRightData;
    	let pathGenerator;
    	let tickModulo;
    	let $lineQValues;
    	let $lineRecordInterval;
    	let $lineMargin;
    	validate_store(lineQValues, 'lineQValues');
    	component_subscribe($$self, lineQValues, $$value => $$invalidate(12, $lineQValues = $$value));
    	validate_store(lineRecordInterval, 'lineRecordInterval');
    	component_subscribe($$self, lineRecordInterval, $$value => $$invalidate(13, $lineRecordInterval = $$value));
    	validate_store(lineMargin, 'lineMargin');
    	component_subscribe($$self, lineMargin, $$value => $$invalidate(4, $lineMargin = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('QChartLine', slots, []);
    	let { height = 500 } = $$props;
    	let { width = 500 } = $$props;
    	let { index = 0 } = $$props;
    	const margin = { top: 8, bottom: 12, left: 16, right: 0 };

    	// label formatter
    	const formatter = format$3(".2d");

    	const writable_props = ['height', 'width', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<QChartLine> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('index' in $$props) $$invalidate(10, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		line,
    		scaleLinear: linear,
    		format: format$3,
    		lineMargin,
    		lineQValues,
    		lineRecordInterval,
    		height,
    		width,
    		index,
    		margin,
    		formatter,
    		tickModulo,
    		yScale,
    		xScale,
    		pathGenerator,
    		pathRightData,
    		pathLeftData,
    		xMax,
    		$lineQValues,
    		$lineRecordInterval,
    		$lineMargin
    	});

    	$$self.$inject_state = $$props => {
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('index' in $$props) $$invalidate(10, index = $$props.index);
    		if ('tickModulo' in $$props) $$invalidate(5, tickModulo = $$props.tickModulo);
    		if ('yScale' in $$props) $$invalidate(2, yScale = $$props.yScale);
    		if ('xScale' in $$props) $$invalidate(3, xScale = $$props.xScale);
    		if ('pathGenerator' in $$props) $$invalidate(6, pathGenerator = $$props.pathGenerator);
    		if ('pathRightData' in $$props) $$invalidate(7, pathRightData = $$props.pathRightData);
    		if ('pathLeftData' in $$props) $$invalidate(8, pathLeftData = $$props.pathLeftData);
    		if ('xMax' in $$props) $$invalidate(11, xMax = $$props.xMax);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$lineQValues*/ 4096) {
    			//   get max value for x-axis
    			$$invalidate(11, xMax = $lineQValues[0]["episodeNumber"][$lineQValues[0]["episodeNumber"].length - 1]);
    		}

    		if ($$self.$$.dirty & /*xMax, $lineMargin, width*/ 2066) {
    			// scales
    			$$invalidate(3, xScale = linear().domain([0, xMax + 1]).range([$lineMargin.left, width - $lineMargin.right]));
    		}

    		if ($$self.$$.dirty & /*height*/ 1) {
    			$$invalidate(2, yScale = linear().domain([-0.5, 8]).range([height - margin.bottom, margin.top]));
    		}

    		if ($$self.$$.dirty & /*$lineQValues, index, $lineRecordInterval*/ 13312) {
    			$$invalidate(8, pathLeftData = $lineQValues[index]["left"].map((val, i) => {
    				return { x: $lineRecordInterval * i, y: val };
    			}));
    		}

    		if ($$self.$$.dirty & /*$lineQValues, index, $lineRecordInterval*/ 13312) {
    			$$invalidate(7, pathRightData = $lineQValues[index]["right"].map((val, i) => {
    				return { x: $lineRecordInterval * i, y: val };
    			}));
    		}

    		if ($$self.$$.dirty & /*xScale, yScale*/ 12) {
    			//   d3 line generator
    			$$invalidate(6, pathGenerator = line().x(d => xScale(d.x)).y(d => yScale(d.y)));
    		}

    		if ($$self.$$.dirty & /*$lineQValues*/ 4096) {
    			$$invalidate(5, tickModulo = $lineQValues[0]["episodeNumber"][$lineQValues[0]["episodeNumber"].length - 1] > 400
    			? 150
    			: $lineQValues[0]["episodeNumber"][$lineQValues[0]["episodeNumber"].length - 1] > 100
    				? 50
    				: 10);
    		}
    	};

    	return [
    		height,
    		width,
    		yScale,
    		xScale,
    		$lineMargin,
    		tickModulo,
    		pathGenerator,
    		pathRightData,
    		pathLeftData,
    		formatter,
    		index,
    		xMax,
    		$lineQValues,
    		$lineRecordInterval
    	];
    }

    class QChartLine extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { height: 0, width: 1, index: 10 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "QChartLine",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get height() {
    		throw new Error("<QChartLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<QChartLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<QChartLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<QChartLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<QChartLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<QChartLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/ScatterLine.svelte generated by Svelte v3.52.0 */
    const file$9 = "src/Components/ScatterLine.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    // (28:2) {#each data as d, i}
    function create_each_block$4(ctx) {
    	let g;
    	let qchartline;
    	let g_transform_value;
    	let current;

    	qchartline = new QChartLine({
    			props: {
    				index: /*i*/ ctx[12],
    				width: /*cellWidth*/ ctx[5] - 0,
    				height: /*cellHeight*/ ctx[4] - 0
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			create_component(qchartline.$$.fragment);
    			attr_dev(g, "transform", g_transform_value = "translate(" + /*xScale*/ ctx[3](/*d*/ ctx[10].x) + ", " + /*yScale*/ ctx[2](/*d*/ ctx[10].y) + ")");
    			add_location(g, file$9, 28, 4, 677);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			mount_component(qchartline, g, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const qchartline_changes = {};
    			if (dirty & /*cellWidth*/ 32) qchartline_changes.width = /*cellWidth*/ ctx[5] - 0;
    			if (dirty & /*cellHeight*/ 16) qchartline_changes.height = /*cellHeight*/ ctx[4] - 0;
    			qchartline.$set(qchartline_changes);

    			if (!current || dirty & /*xScale, yScale*/ 12 && g_transform_value !== (g_transform_value = "translate(" + /*xScale*/ ctx[3](/*d*/ ctx[10].x) + ", " + /*yScale*/ ctx[2](/*d*/ ctx[10].y) + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(qchartline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(qchartline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_component(qchartline);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(28:2) {#each data as d, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let svg;
    	let current;
    	let each_value = /*data*/ ctx[6];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(svg, "width", /*width*/ ctx[1]);
    			attr_dev(svg, "height", /*height*/ ctx[0]);
    			attr_dev(svg, "class", "svelte-18h1e5r");
    			add_location(svg, file$9, 26, 0, 627);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svg, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*xScale, data, yScale, cellWidth, cellHeight*/ 124) {
    				each_value = /*data*/ ctx[6];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(svg, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*width*/ 2) {
    				attr_dev(svg, "width", /*width*/ ctx[1]);
    			}

    			if (!current || dirty & /*height*/ 1) {
    				attr_dev(svg, "height", /*height*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let width;
    	let height;
    	let cellWidth;
    	let cellHeight;
    	let xScale;
    	let yScale;
    	let $lineWidth;
    	validate_store(lineWidth, 'lineWidth');
    	component_subscribe($$self, lineWidth, $$value => $$invalidate(9, $lineWidth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ScatterLine', slots, []);
    	let { numX = 8 } = $$props;
    	let { numY = 1 } = $$props;
    	let data = [];

    	for (let xVal = 0; xVal < numX; xVal++) {
    		for (let yVal = 0; yVal < numY; yVal++) {
    			data.push({ x: xVal, y: yVal });
    		}
    	}

    	const writable_props = ['numX', 'numY'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ScatterLine> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('numX' in $$props) $$invalidate(7, numX = $$props.numX);
    		if ('numY' in $$props) $$invalidate(8, numY = $$props.numY);
    	};

    	$$self.$capture_state = () => ({
    		scaleLinear: linear,
    		QChartLine,
    		lineWidth,
    		numX,
    		numY,
    		data,
    		height,
    		yScale,
    		width,
    		xScale,
    		cellHeight,
    		cellWidth,
    		$lineWidth
    	});

    	$$self.$inject_state = $$props => {
    		if ('numX' in $$props) $$invalidate(7, numX = $$props.numX);
    		if ('numY' in $$props) $$invalidate(8, numY = $$props.numY);
    		if ('data' in $$props) $$invalidate(6, data = $$props.data);
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('yScale' in $$props) $$invalidate(2, yScale = $$props.yScale);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('xScale' in $$props) $$invalidate(3, xScale = $$props.xScale);
    		if ('cellHeight' in $$props) $$invalidate(4, cellHeight = $$props.cellHeight);
    		if ('cellWidth' in $$props) $$invalidate(5, cellWidth = $$props.cellWidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$lineWidth*/ 512) {
    			$$invalidate(1, width = $lineWidth * 8);
    		}

    		if ($$self.$$.dirty & /*$lineWidth*/ 512) {
    			$$invalidate(0, height = $lineWidth);
    		}

    		if ($$self.$$.dirty & /*width, numX*/ 130) {
    			$$invalidate(5, cellWidth = width / numX);
    		}

    		if ($$self.$$.dirty & /*height, numY*/ 257) {
    			$$invalidate(4, cellHeight = height / numY);
    		}

    		if ($$self.$$.dirty & /*numX, width*/ 130) {
    			// // scales
    			$$invalidate(3, xScale = linear().domain([0, numX]).range([0, width]));
    		}

    		if ($$self.$$.dirty & /*numY, height*/ 257) {
    			$$invalidate(2, yScale = linear().domain([0, numY]).range([0, height]));
    		}
    	};

    	return [
    		height,
    		width,
    		yScale,
    		xScale,
    		cellHeight,
    		cellWidth,
    		data,
    		numX,
    		numY,
    		$lineWidth
    	];
    }

    class ScatterLine extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { numX: 7, numY: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ScatterLine",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get numX() {
    		throw new Error("<ScatterLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set numX(value) {
    		throw new Error("<ScatterLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get numY() {
    		throw new Error("<ScatterLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set numY(value) {
    		throw new Error("<ScatterLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/SimulationLine.svelte generated by Svelte v3.52.0 */

    const { console: console_1$5 } = globals;

    const file$8 = "src/Components/SimulationLine.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[30] = list[i];
    	child_ctx[32] = i;
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[33] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[36] = list[i];
    	return child_ctx;
    }

    function get_each_context_5$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[39] = list[i];
    	return child_ctx;
    }

    // (76:2) {#each [..."".padEnd(numX)].map((_, i) => i + 1) as tick}
    function create_each_block_5$1(ctx) {
    	let g0;
    	let line0;
    	let line0_y__value;
    	let text0;
    	let t0_value = /*tick*/ ctx[39] + "";
    	let t0;
    	let g0_transform_value;
    	let g1;
    	let line1;
    	let line1_x__value;
    	let text1;
    	let t1_value = /*tick*/ ctx[39] + "";
    	let t1;
    	let g1_transform_value;

    	const block = {
    		c: function create() {
    			g0 = svg_element("g");
    			line0 = svg_element("line");
    			text0 = svg_element("text");
    			t0 = text(t0_value);
    			g1 = svg_element("g");
    			line1 = svg_element("line");
    			text1 = svg_element("text");
    			t1 = text(t1_value);
    			attr_dev(line0, "class", "grid-line svelte-12fvhy0");
    			attr_dev(line0, "x1", "0");
    			attr_dev(line0, "x2", "0");
    			attr_dev(line0, "y1", "0");
    			attr_dev(line0, "y2", line0_y__value = -/*height*/ ctx[4] + /*$margin*/ ctx[14].bottom + /*$margin*/ ctx[14].top);
    			add_location(line0, file$8, 78, 6, 2120);
    			attr_dev(text0, "class", "auc-axis-text");
    			attr_dev(text0, "y", "15");
    			attr_dev(text0, "text-anchor", "middle");
    			add_location(text0, file$8, 85, 6, 2264);
    			attr_dev(g0, "transform", g0_transform_value = `translate(${/*xScale*/ ctx[3](/*tick*/ ctx[39]) + 0} ${/*height*/ ctx[4] - /*$margin*/ ctx[14].bottom})`);
    			add_location(g0, file$8, 76, 4, 1984);
    			attr_dev(line1, "class", "grid-line svelte-12fvhy0");
    			attr_dev(line1, "x1", "0");
    			attr_dev(line1, "x2", line1_x__value = /*width*/ ctx[5] - /*$margin*/ ctx[14].right - /*$margin*/ ctx[14].left);
    			attr_dev(line1, "y1", "0");
    			attr_dev(line1, "y2", "0");
    			add_location(line1, file$8, 89, 6, 2472);
    			attr_dev(text1, "class", "auc-axis-text");
    			attr_dev(text1, "y", "0");
    			attr_dev(text1, "text-anchor", "end");
    			attr_dev(text1, "dominant-baseline", "middle");
    			add_location(text1, file$8, 96, 6, 2614);
    			attr_dev(g1, "transform", g1_transform_value = `translate(${/*$margin*/ ctx[14].left} ${/*yScale*/ ctx[2](/*tick*/ ctx[39]) + 0})`);
    			add_location(g1, file$8, 87, 4, 2347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g0, anchor);
    			append_dev(g0, line0);
    			append_dev(g0, text0);
    			append_dev(text0, t0);
    			insert_dev(target, g1, anchor);
    			append_dev(g1, line1);
    			append_dev(g1, text1);
    			append_dev(text1, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*height, $margin*/ 16400 && line0_y__value !== (line0_y__value = -/*height*/ ctx[4] + /*$margin*/ ctx[14].bottom + /*$margin*/ ctx[14].top)) {
    				attr_dev(line0, "y2", line0_y__value);
    			}

    			if (dirty[0] & /*numX*/ 1 && t0_value !== (t0_value = /*tick*/ ctx[39] + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*xScale, numX, height, $margin*/ 16409 && g0_transform_value !== (g0_transform_value = `translate(${/*xScale*/ ctx[3](/*tick*/ ctx[39]) + 0} ${/*height*/ ctx[4] - /*$margin*/ ctx[14].bottom})`)) {
    				attr_dev(g0, "transform", g0_transform_value);
    			}

    			if (dirty[0] & /*width, $margin*/ 16416 && line1_x__value !== (line1_x__value = /*width*/ ctx[5] - /*$margin*/ ctx[14].right - /*$margin*/ ctx[14].left)) {
    				attr_dev(line1, "x2", line1_x__value);
    			}

    			if (dirty[0] & /*numX*/ 1 && t1_value !== (t1_value = /*tick*/ ctx[39] + "")) set_data_dev(t1, t1_value);

    			if (dirty[0] & /*$margin, yScale, numX*/ 16389 && g1_transform_value !== (g1_transform_value = `translate(${/*$margin*/ ctx[14].left} ${/*yScale*/ ctx[2](/*tick*/ ctx[39]) + 0})`)) {
    				attr_dev(g1, "transform", g1_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g0);
    			if (detaching) detach_dev(g1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5$1.name,
    		type: "each",
    		source: "(76:2) {#each [...\\\"\\\".padEnd(numX)].map((_, i) => i + 1) as tick}",
    		ctx
    	});

    	return block;
    }

    // (114:6) {:else}
    function create_else_block$1(ctx) {
    	let t_value = console.log("found nothing at:", [Math.floor(/*i*/ ctx[32] / /*numY*/ ctx[1]), /*i*/ ctx[32] % /*numY*/ ctx[1]]) + "";
    	let t;
    	let each_1_anchor;
    	let each_value_3 = ["left", "right"];
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < 2; i += 1) {
    		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			t = text(t_value);

    			for (let i = 0; i < 2; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < 2; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*numY*/ 2 && t_value !== (t_value = console.log("found nothing at:", [
    				Math.floor(/*i*/ ctx[32] / /*numY*/ ctx[1]),
    				/*i*/ ctx[32] % /*numY*/ ctx[1]
    			]) + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*directionOffset, directionMap, $lineQValues*/ 164096) {
    				each_value_3 = ["left", "right"];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < 2; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < 2; i += 1) {
    					each_blocks[i].d(1);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(114:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (112:6) {#if rewardArray.some((r) => r.length == [i % numY, Math.floor(i / numY)].length && r.every((value, index) => [Math.floor(i / numY), i % numY][index] == value))}
    function create_if_block$1(ctx) {
    	let t_value = console.log("found rewards at:", [Math.floor(/*i*/ ctx[32] / /*numY*/ ctx[1]), /*i*/ ctx[32] % /*numY*/ ctx[1]]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*numY*/ 2 && t_value !== (t_value = console.log("found rewards at:", [
    				Math.floor(/*i*/ ctx[32] / /*numY*/ ctx[1]),
    				/*i*/ ctx[32] % /*numY*/ ctx[1]
    			]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(112:6) {#if rewardArray.some((r) => r.length == [i % numY, Math.floor(i / numY)].length && r.every((value, index) => [Math.floor(i / numY), i % numY][index] == value))}",
    		ctx
    	});

    	return block;
    }

    // (122:12) {#each arrow as ar}
    function create_each_block_4$1(ctx) {
    	let path;
    	let path_opacity_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", /*ar*/ ctx[36]);
    			attr_dev(path, "class", "" + (null_to_empty(`arrow-${/*arrowDirection*/ ctx[33]} arrow`) + " svelte-12fvhy0"));
    			attr_dev(path, "transform", `rotate(${/*directionMap*/ ctx[17][/*arrowDirection*/ ctx[33]]}) scale(0.05)`);
    			attr_dev(path, "stroke", "black");

    			attr_dev(path, "opacity", path_opacity_value = /*d*/ ctx[30].maxDirection[/*d*/ ctx[30].maxDirection.length - 1] == /*arrowDirection*/ ctx[33]
    			? 1
    			: /*d*/ ctx[30][`${/*arrowDirection*/ ctx[33]}Weight`][/*d*/ ctx[30].maxDirection.length - 1]);

    			add_location(path, file$8, 122, 14, 3556);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$lineQValues*/ 32768 && path_opacity_value !== (path_opacity_value = /*d*/ ctx[30].maxDirection[/*d*/ ctx[30].maxDirection.length - 1] == /*arrowDirection*/ ctx[33]
    			? 1
    			: /*d*/ ctx[30][`${/*arrowDirection*/ ctx[33]}Weight`][/*d*/ ctx[30].maxDirection.length - 1])) {
    				attr_dev(path, "opacity", path_opacity_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$1.name,
    		type: "each",
    		source: "(122:12) {#each arrow as ar}",
    		ctx
    	});

    	return block;
    }

    // (116:8) {#each ["left", "right"] as arrowDirection}
    function create_each_block_3$1(ctx) {
    	let g;
    	let g_transform_value;
    	let each_value_4 = arrow;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4$1(get_each_context_4$1(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "transform", g_transform_value = "translate(" + /*directionOffset*/ ctx[8][/*arrowDirection*/ ctx[33]]['x'] + ", " + /*directionOffset*/ ctx[8][/*arrowDirection*/ ctx[33]]['y'] + ")");
    			add_location(g, file$8, 116, 10, 3353);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*directionMap, $lineQValues*/ 163840) {
    				each_value_4 = arrow;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$1(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}

    			if (dirty[0] & /*directionOffset*/ 256 && g_transform_value !== (g_transform_value = "translate(" + /*directionOffset*/ ctx[8][/*arrowDirection*/ ctx[33]]['x'] + ", " + /*directionOffset*/ ctx[8][/*arrowDirection*/ ctx[33]]['y'] + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(116:8) {#each [\\\"left\\\", \\\"right\\\"] as arrowDirection}",
    		ctx
    	});

    	return block;
    }

    // (107:2) {#each $lineQValues as d, i}
    function create_each_block_2$1(ctx) {
    	let g;
    	let show_if;
    	let g_transform_value;

    	function func(...args) {
    		return /*func*/ ctx[23](/*i*/ ctx[32], ...args);
    	}

    	function select_block_type(ctx, dirty) {
    		if (dirty[0] & /*numY*/ 2) show_if = null;
    		if (show_if == null) show_if = !!/*rewardArray*/ ctx[20].some(func);
    		if (show_if) return create_if_block$1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx, [-1, -1]);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if_block.c();
    			attr_dev(g, "transform", g_transform_value = "translate(" + (/*xScale*/ ctx[3](Math.floor(/*i*/ ctx[32] / /*numY*/ ctx[1])) + /*cellWidth*/ ctx[6] / 2) + ", " + (/*yScale*/ ctx[2](/*i*/ ctx[32] % /*numY*/ ctx[1]) + /*cellHeight*/ ctx[9] / 2) + ")");
    			add_location(g, file$8, 107, 4, 2825);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if_block.m(g, null);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(g, null);
    				}
    			}

    			if (dirty[0] & /*xScale, numY, cellWidth, yScale, cellHeight*/ 590 && g_transform_value !== (g_transform_value = "translate(" + (/*xScale*/ ctx[3](Math.floor(/*i*/ ctx[32] / /*numY*/ ctx[1])) + /*cellWidth*/ ctx[6] / 2) + ", " + (/*yScale*/ ctx[2](/*i*/ ctx[32] % /*numY*/ ctx[1]) + /*cellHeight*/ ctx[9] / 2) + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(107:2) {#each $lineQValues as d, i}",
    		ctx
    	});

    	return block;
    }

    // (149:4) {#each bananaOne as b}
    function create_each_block_1$2(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "bananaPath svelte-12fvhy0");
    			attr_dev(path, "d", /*b*/ ctx[25]);
    			attr_dev(path, "transform", "scale(0.13)");
    			add_location(path, file$8, 149, 6, 4459);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(149:4) {#each bananaOne as b}",
    		ctx
    	});

    	return block;
    }

    // (162:4) {#each bananaThree as b}
    function create_each_block$3(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "bananaPath svelte-12fvhy0");
    			attr_dev(path, "d", /*b*/ ctx[25]);
    			set_style(path, "transform", "scale(0.13)");
    			add_location(path, file$8, 162, 6, 4803);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(162:4) {#each bananaThree as b}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let svg;
    	let each0_anchor;
    	let path0;
    	let path0_d_value;
    	let path1;
    	let path1_d_value;
    	let g0;
    	let g0_transform_value;
    	let g1;
    	let g1_transform_value;
    	let g2;
    	let rect;
    	let path2;
    	let g2_transform_value;
    	let each_value_5 = [...("").padEnd(/*numX*/ ctx[0])].map(func_1$1);
    	validate_each_argument(each_value_5);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks_3[i] = create_each_block_5$1(get_each_context_5$1(ctx, each_value_5, i));
    	}

    	let each_value_2 = /*$lineQValues*/ ctx[15];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	let each_value_1 = bananaOne;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let each_value = bananaThree;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			each0_anchor = empty$1();

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			g0 = svg_element("g");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			g1 = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			g2 = svg_element("g");
    			rect = svg_element("rect");
    			path2 = svg_element("path");
    			attr_dev(path0, "class", "agent-line-outline svelte-12fvhy0");
    			attr_dev(path0, "d", path0_d_value = /*robotLine*/ ctx[7](/*$lineRobotPath*/ ctx[16]));
    			add_location(path0, file$8, 138, 2, 4057);
    			attr_dev(path1, "class", "agent-line svelte-12fvhy0");
    			attr_dev(path1, "d", path1_d_value = /*robotLine*/ ctx[7](/*$lineRobotPath*/ ctx[16]));
    			add_location(path1, file$8, 139, 2, 4125);
    			attr_dev(g0, "id", "reward-1");
    			attr_dev(g0, "transform", g0_transform_value = "translate(" + /*xScale*/ ctx[3](0) + ", " + (/*yScale*/ ctx[2](0) + /*rewardBox*/ ctx[11].height / 2 - 7.5) + ")");
    			add_location(g0, file$8, 143, 2, 4237);
    			attr_dev(g1, "id", "reward-3");
    			attr_dev(g1, "transform", g1_transform_value = "translate(" + /*xScale*/ ctx[3](7) + ", " + (/*yScale*/ ctx[2](0) + /*rewardBox3*/ ctx[10].height / 2 - 7.5) + ")");
    			add_location(g1, file$8, 154, 2, 4564);
    			attr_dev(rect, "class", "agent-rect svelte-12fvhy0");
    			attr_dev(rect, "width", /*robotWidth*/ ctx[13]);
    			attr_dev(rect, "height", /*robotHeight*/ ctx[12]);
    			add_location(rect, file$8, 173, 4, 5053);
    			attr_dev(path2, "d", mluRobot);
    			set_style(path2, "transform", "scale(0.1)");
    			attr_dev(path2, "stroke", "white");
    			attr_dev(path2, "stroke-width", "1");
    			attr_dev(path2, "fill", "black");
    			add_location(path2, file$8, 174, 4, 5125);
    			attr_dev(g2, "id", "agent-g");
    			attr_dev(g2, "transform", g2_transform_value = "translate(" + (/*xScale*/ ctx[3](/*startRobotPointX*/ ctx[18]) - /*robotWidth*/ ctx[13] / 2) + ", " + (/*yScale*/ ctx[2](/*startRobotPointY*/ ctx[19]) - /*robotHeight*/ ctx[12] / 2) + ")");
    			add_location(g2, file$8, 166, 2, 4890);
    			attr_dev(svg, "width", /*width*/ ctx[5]);
    			attr_dev(svg, "height", /*height*/ ctx[4]);
    			attr_dev(svg, "class", "svelte-12fvhy0");
    			add_location(svg, file$8, 74, 0, 1897);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(svg, null);
    			}

    			append_dev(svg, each0_anchor);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(svg, null);
    			}

    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, g0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(g0, null);
    			}

    			append_dev(svg, g1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g1, null);
    			}

    			append_dev(svg, g2);
    			append_dev(g2, rect);
    			append_dev(g2, path2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$margin, yScale, numX, width, xScale, height*/ 16445) {
    				each_value_5 = [...("").padEnd(/*numX*/ ctx[0])].map(func_1$1);
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5$1(ctx, each_value_5, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_5$1(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(svg, each0_anchor);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_5.length;
    			}

    			if (dirty[0] & /*xScale, numY, cellWidth, yScale, cellHeight, rewardArray, directionOffset, directionMap, $lineQValues*/ 1213262) {
    				each_value_2 = /*$lineQValues*/ ctx[15];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2$1(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(svg, path0);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty[0] & /*robotLine, $lineRobotPath*/ 65664 && path0_d_value !== (path0_d_value = /*robotLine*/ ctx[7](/*$lineRobotPath*/ ctx[16]))) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (dirty[0] & /*robotLine, $lineRobotPath*/ 65664 && path1_d_value !== (path1_d_value = /*robotLine*/ ctx[7](/*$lineRobotPath*/ ctx[16]))) {
    				attr_dev(path1, "d", path1_d_value);
    			}

    			if (dirty & /*bananaOne*/ 0) {
    				each_value_1 = bananaOne;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(g0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*xScale, yScale, rewardBox*/ 2060 && g0_transform_value !== (g0_transform_value = "translate(" + /*xScale*/ ctx[3](0) + ", " + (/*yScale*/ ctx[2](0) + /*rewardBox*/ ctx[11].height / 2 - 7.5) + ")")) {
    				attr_dev(g0, "transform", g0_transform_value);
    			}

    			if (dirty & /*bananaThree*/ 0) {
    				each_value = bananaThree;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*xScale, yScale, rewardBox3*/ 1036 && g1_transform_value !== (g1_transform_value = "translate(" + /*xScale*/ ctx[3](7) + ", " + (/*yScale*/ ctx[2](0) + /*rewardBox3*/ ctx[10].height / 2 - 7.5) + ")")) {
    				attr_dev(g1, "transform", g1_transform_value);
    			}

    			if (dirty[0] & /*robotWidth*/ 8192) {
    				attr_dev(rect, "width", /*robotWidth*/ ctx[13]);
    			}

    			if (dirty[0] & /*robotHeight*/ 4096) {
    				attr_dev(rect, "height", /*robotHeight*/ ctx[12]);
    			}

    			if (dirty[0] & /*xScale, robotWidth, yScale, robotHeight*/ 12300 && g2_transform_value !== (g2_transform_value = "translate(" + (/*xScale*/ ctx[3](/*startRobotPointX*/ ctx[18]) - /*robotWidth*/ ctx[13] / 2) + ", " + (/*yScale*/ ctx[2](/*startRobotPointY*/ ctx[19]) - /*robotHeight*/ ctx[12] / 2) + ")")) {
    				attr_dev(g2, "transform", g2_transform_value);
    			}

    			if (dirty[0] & /*width*/ 32) {
    				attr_dev(svg, "width", /*width*/ ctx[5]);
    			}

    			if (dirty[0] & /*height*/ 16) {
    				attr_dev(svg, "height", /*height*/ ctx[4]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func_1$1 = (_, i) => i + 1;

    function instance$9($$self, $$props, $$invalidate) {
    	let robotWidth;
    	let robotHeight;
    	let arrowBox;
    	let rewardBox;
    	let rewardBox3;
    	let width;
    	let height;
    	let cellWidth;
    	let cellHeight;
    	let directionOffset;
    	let xScale;
    	let yScale;
    	let robotLine;
    	let $lineRobot;
    	let $lineWidth;
    	let $margin;
    	let $lineQValues;
    	let $lineRobotPath;
    	validate_store(lineRobot, 'lineRobot');
    	component_subscribe($$self, lineRobot, $$value => $$invalidate(24, $lineRobot = $$value));
    	validate_store(lineWidth, 'lineWidth');
    	component_subscribe($$self, lineWidth, $$value => $$invalidate(22, $lineWidth = $$value));
    	validate_store(margin, 'margin');
    	component_subscribe($$self, margin, $$value => $$invalidate(14, $margin = $$value));
    	validate_store(lineQValues, 'lineQValues');
    	component_subscribe($$self, lineQValues, $$value => $$invalidate(15, $lineQValues = $$value));
    	validate_store(lineRobotPath, 'lineRobotPath');
    	component_subscribe($$self, lineRobotPath, $$value => $$invalidate(16, $lineRobotPath = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimulationLine', slots, []);
    	let { numX = 7 } = $$props;
    	let { numY = 1 } = $$props;

    	onMount(() => {
    		const robotBGSize = select("#agent-g").node().getBoundingClientRect();
    		$$invalidate(13, robotWidth = robotBGSize.width);
    		$$invalidate(12, robotHeight = robotBGSize.height);
    		$$invalidate(11, rewardBox = select("#reward-1").node().getBoundingClientRect());
    		$$invalidate(10, rewardBox3 = select("#reward-3").node().getBoundingClientRect());
    		$$invalidate(21, arrowBox = select("path.arrow-up").node().getBoundingClientRect());
    	});

    	const directionMap = { left: 90, right: 270 };
    	const startRobotPointX = $lineRobot.x;
    	const startRobotPointY = $lineRobot.y;
    	const rewardArray = [[0, 0], [7, 0]];
    	const writable_props = ['numX', 'numY'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<SimulationLine> was created with unknown prop '${key}'`);
    	});

    	const func = (i, r) => r.length == [i % numY, Math.floor(i / numY)].length && r.every((value, index) => [Math.floor(i / numY), i % numY][index] == value);

    	$$self.$$set = $$props => {
    		if ('numX' in $$props) $$invalidate(0, numX = $$props.numX);
    		if ('numY' in $$props) $$invalidate(1, numY = $$props.numY);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		extent,
    		scaleLinear: linear,
    		line,
    		curveBasis,
    		select,
    		arrow,
    		arrows,
    		mluRobot,
    		bananaOne,
    		bananaThree,
    		margin,
    		lineRobot,
    		lineRobotPath,
    		lineQValues,
    		lineWidth,
    		lineHeight,
    		numX,
    		numY,
    		directionMap,
    		startRobotPointX,
    		startRobotPointY,
    		rewardArray,
    		yScale,
    		xScale,
    		robotLine,
    		height,
    		width,
    		arrowBox,
    		cellWidth,
    		directionOffset,
    		cellHeight,
    		rewardBox3,
    		rewardBox,
    		robotHeight,
    		robotWidth,
    		$lineRobot,
    		$lineWidth,
    		$margin,
    		$lineQValues,
    		$lineRobotPath
    	});

    	$$self.$inject_state = $$props => {
    		if ('numX' in $$props) $$invalidate(0, numX = $$props.numX);
    		if ('numY' in $$props) $$invalidate(1, numY = $$props.numY);
    		if ('yScale' in $$props) $$invalidate(2, yScale = $$props.yScale);
    		if ('xScale' in $$props) $$invalidate(3, xScale = $$props.xScale);
    		if ('robotLine' in $$props) $$invalidate(7, robotLine = $$props.robotLine);
    		if ('height' in $$props) $$invalidate(4, height = $$props.height);
    		if ('width' in $$props) $$invalidate(5, width = $$props.width);
    		if ('arrowBox' in $$props) $$invalidate(21, arrowBox = $$props.arrowBox);
    		if ('cellWidth' in $$props) $$invalidate(6, cellWidth = $$props.cellWidth);
    		if ('directionOffset' in $$props) $$invalidate(8, directionOffset = $$props.directionOffset);
    		if ('cellHeight' in $$props) $$invalidate(9, cellHeight = $$props.cellHeight);
    		if ('rewardBox3' in $$props) $$invalidate(10, rewardBox3 = $$props.rewardBox3);
    		if ('rewardBox' in $$props) $$invalidate(11, rewardBox = $$props.rewardBox);
    		if ('robotHeight' in $$props) $$invalidate(12, robotHeight = $$props.robotHeight);
    		if ('robotWidth' in $$props) $$invalidate(13, robotWidth = $$props.robotWidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$lineWidth*/ 4194304) {
    			$$invalidate(5, width = $lineWidth * 8);
    		}

    		if ($$self.$$.dirty[0] & /*$lineWidth*/ 4194304) {
    			$$invalidate(4, height = $lineWidth);
    		}

    		if ($$self.$$.dirty[0] & /*$lineWidth*/ 4194304) {
    			{
    				console.log("lw", $lineWidth);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*width, numX*/ 33) {
    			$$invalidate(6, cellWidth = width / numX);
    		}

    		if ($$self.$$.dirty[0] & /*height, numY*/ 18) {
    			$$invalidate(9, cellHeight = height / numY);
    		}

    		if ($$self.$$.dirty[0] & /*cellWidth, arrowBox*/ 2097216) {
    			// offset directions for rotated arrows
    			$$invalidate(8, directionOffset = {
    				right: {
    					x: cellWidth / 6,
    					y: arrowBox.width / 2 + 5
    				},
    				left: {
    					x: -cellWidth / 6,
    					y: -arrowBox.width / 2 - 5
    				}
    			});
    		}

    		if ($$self.$$.dirty[0] & /*numX, width*/ 33) {
    			// scales
    			$$invalidate(3, xScale = linear().domain([0, numX]).range([0, width]));
    		}

    		if ($$self.$$.dirty[0] & /*numY, height*/ 18) {
    			$$invalidate(2, yScale = linear().domain([0, numY]).range([0, height]));
    		}

    		if ($$self.$$.dirty[0] & /*xScale, yScale*/ 12) {
    			// line generator
    			$$invalidate(7, robotLine = line().x(d => xScale(d.x)).y(d => yScale(d.y)));
    		}
    	};

    	$$invalidate(13, robotWidth = 20);
    	$$invalidate(12, robotHeight = 20);
    	$$invalidate(21, arrowBox = { height: 560, width: 490, x: 105, y: 0 });
    	$$invalidate(11, rewardBox = { height: 0, width: 0, x: 0, y: 0 });
    	$$invalidate(10, rewardBox3 = { height: 30, width: 0, x: 0, y: 0 });

    	return [
    		numX,
    		numY,
    		yScale,
    		xScale,
    		height,
    		width,
    		cellWidth,
    		robotLine,
    		directionOffset,
    		cellHeight,
    		rewardBox3,
    		rewardBox,
    		robotHeight,
    		robotWidth,
    		$margin,
    		$lineQValues,
    		$lineRobotPath,
    		directionMap,
    		startRobotPointX,
    		startRobotPointY,
    		rewardArray,
    		arrowBox,
    		$lineWidth,
    		func
    	];
    }

    class SimulationLine extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { numX: 0, numY: 1 }, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimulationLine",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get numX() {
    		throw new Error("<SimulationLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set numX(value) {
    		throw new Error("<SimulationLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get numY() {
    		throw new Error("<SimulationLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set numY(value) {
    		throw new Error("<SimulationLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    class Env {
      constructor(
        start = [1, 3],
        rows = 4,
        columns = 4,
        wins = {
          [[3, 2]]: 2,
          [[0, 0]]: 3,
        },
        losses = {
          [[2, 2]]: -5,
        },
        obstacles = {},
        deterministic = true,
        exploringStarts = false,
        exploringStartsProb = 0.4
      ) {
        this.start = start;
        this.state = start;
        this.rows = rows;
        this.columns = columns;
        this.board = Array(this.rows)
          .fill(0)
          .map((x) => Array(this.columns).fill(0));
        this.exploringStarts = exploringStarts;
        this.exploringStartsProb = exploringStartsProb;
        this.deterministic = deterministic;
        this.wins = wins;
        this.losses = losses;

        if (this.exploringStarts) {
          this.availableStarts = [];

          for (let row =0; row<this.rows; row++) {
            for (let col=0; col<this.columns; col++) {
              var temp = [row, col];
              if (temp in this.wins || temp in this.losses){
                continue
              }
              this.availableStarts.push([row, col]);
            }
          }
        } else {
          this.availableStarts = this.start;
        }
      }

      giveReward() {
        if (this.state in this.wins) {
          return this.wins[this.state];
        } else {
          if (this.state in this.losses) {
            return this.losses[this.state];
          } else {
            return 0;
          }
        }
      }

      isEndFunc() {
        if (
          this.state in this.wins || this.state in this.losses
        ) {
          return true;
        } else {
          return false;
        }
      }

      reset(default_position = false) {
        // Set new position to preset start position. Usually performed at the end of simulation
        if (default_position){
          this.state = this.start;
          return [this.state, this.giveReward(), this.isEndFunc()];
        }

        if ((this.exploringStarts && Math.random() < this.exploringStartsProb)){
          this.state =
            this.availableStarts[
              Math.floor(Math.random() * this.availableStarts.length)
            ];
            return [this.state, this.giveReward(), this.isEndFunc()]
        } else {
          this.state = this.start;
          return [this.state, this.giveReward(), this.isEndFunc()];
        }
      }

      step(action) {
        /*
        action: up, down, left, right
        -------------
        0 | 1 | 2| 3|
        1 |
        2 |
        return next position
        */
        var nxtState;
        if (this.deterministic) {
          if (action === "up") {
            nxtState = [this.state[0] - 1, this.state[1]];
          } else {
            if (action === "down") {
              nxtState = [this.state[0] + 1, this.state[1]];
            } else {
              if (action === "left") {
                nxtState = [this.state[0], this.state[1] - 1];
              } else {
                nxtState = [this.state[0], this.state[1] + 1];
              }
            }
          }

          if (nxtState[0] >= 0 && nxtState[0] <= this.rows - 1) {
            if (nxtState[1] >= 0 && nxtState[1] <= this.columns - 1) {
              this.state = nxtState;
            }
          }

          return [this.state, this.giveReward(), this.isEndFunc()];
        }
      }

      render() {
        var out, token;
        this.board[this.state] = 1;

        for (var i = 0, rows = this.rows; i < rows; i += 1) {
          console.log("-----------------");
          out = "| ";

          for (var j = 0, cols = this.columns; j < cols; j += 1) {
            if (this.board[[i, j]] === 1) {
              token = "*";
            }

            if (this.board[[i, j]] === -1) {
              token = "z";
            }

            if (this.board[[i, j]] === 0) {
              token = "0";
            }

            out += token + " | ";
          }

          console.log(out);
        }

        console.log("-----------------");
      }
    }

    // Finds the index of the maximum
    function argMax$2(array) {
      return array.map((x, i) => [x, i]).reduce((r, a) => (a[0] > r[0] ? a : r))[1];
    }

    class Agent {
      constructor(
        rows,
        columns,
        wins,
        losses,
        tdUpdate = "sarsa",
        epsilon = 0.1,
        alpha = 0.1,
        gamma = 0.9,
        lambda = 0.7
      ) {
        this.actions =
          rows > 1 ? ["up", "down", "left", "right"] : ["left", "right"];
        this.epsilon = epsilon;
        this.rows = rows;
        this.columns = columns;
        this.wins = wins;
        this.losses = losses;
        this.tdUpdate = tdUpdate;
        this.alpha = alpha;
        this.gamma = gamma;
        this.lambda = lambda;
        this.qValues = Array();
        this.resetQValues();
        this.traceMatrix = Array();
        this.resetTraceMatrix();
      }

      //   Resets the Q-values to 0
      resetQValues() {
        this.qValues = new Array(this.rows).fill(
          new Array(this.columns).fill(new Array(this.actions.length).fill(0))
        );

        // Set the q_values to favor the suboptimal state in lineEnv
        if(this.rows == 1){
          for(let i=0; i<this.columns; i++){
            this.qValues[0][i][0] = 1.5;
          }
        }
        
      }

      //   Resets the trace matrix to 0
      resetTraceMatrix() {
        this.traceMatrix = new Array(this.rows).fill(
          new Array(this.columns).fill(new Array(this.actions.length).fill(0))
        );
      }

      //   Choose actions according to epsilon-greedy action selection
      chooseAction(state, greedy = false) {
        var actionIndex;
        if (Math.random() <= this.epsilon && !greedy) {
          // Exploratory action
          actionIndex = Math.floor(Math.random() * this.actions.length);
        } else {
          // Greedy action
          actionIndex = argMax$2(this.qValues[state[0]][state[1]]);
        }
        return [this.actions[actionIndex], actionIndex];
      }

      //   Run episodes
      runEpisodes(env, episodes = 10, maxSteps = 2000) {
        var done, reward, state, tdError;
        var episodicValues = Array();

        for (var ep = 0; ep < episodes; ep += 1) {
          if (episodicValues.length == 0) {
            episodicValues = reshape(this.qValues, [1, this.rows, this.columns, this.actions.length]);
          } else {
            episodicValues = [...episodicValues, this.qValues];
          }

          [state, reward, done] = env.reset();

          for (var step = 0; step < maxSteps; step += 1) {
            const [action, actionIndex] = this.chooseAction(state);
            const qOld = this.qValues[state[0]][state[1]][actionIndex];

            const [nextState, reward, done] = env.step(action);
            this.chooseAction(nextState);

            if (this.tdUpdate == "q-learning") {
              // Q-Learning
              tdError =
                reward +
                this.gamma *
                  Math.max.apply(null, this.qValues[nextState[0]][nextState[1]]) -
                qOld;
            } else if (this.tdUpdate == "sarsa") {
              // SARSA
              tdError =
                reward +
                this.gamma *
                  this.qValues[nextState[0]][nextState[1]][actionIndex] -
                qOld;
            } else {
              print("Please set 'tdUpdate' to either 'sarsa' or 'q-learning'.");
            }

            //  Increment the trace matrix
            this.traceMatrix[state[0]][state[1]][actionIndex] += 1;

            //  TD(lambda) Update
            const multiplier1 = this.alpha * tdError;
            this.qValues = add(
              this.qValues,
              multiply(multiplier1, this.traceMatrix)
            );

            //  Decay the trace matrix values
            const multiplier2 = this.gamma * this.lambda;
            this.traceMatrix = multiply(multiplier2, this.traceMatrix);

            state = nextState;

            if (done == true) {
              var reset_stats = env.reset();
              state = reset_stats[0];
              break;
            }
          }

          // If simulation ended, set robot's position to start position
          if (ep == episodes-1){
            var reset_stats = env.reset(true);
            state = reset_stats[0];
          }

        }

        return episodicValues;
      }
    }

    /* src/Components/LineWorld.svelte generated by Svelte v3.52.0 */

    const { console: console_1$4 } = globals;
    const file$7 = "src/Components/LineWorld.svelte";

    function create_fragment$8(ctx) {
    	let h2;
    	let t1;
    	let p0;
    	let t3;
    	let br0;
    	let br1;
    	let t4;
    	let p1;
    	let t5;
    	let span0;
    	let t7;
    	let t8;
    	let br2;
    	let br3;
    	let t9;
    	let p2;
    	let t10;
    	let span1;
    	let t12;
    	let span2;
    	let t14;
    	let t15;
    	let br4;
    	let br5;
    	let t16;
    	let p3;
    	let t18;
    	let section;
    	let div16;
    	let div7;
    	let div1;
    	let div0;
    	let p4;
    	let t20;
    	let div3;
    	let div2;
    	let p5;
    	let t22;
    	let div5;
    	let div4;
    	let p6;
    	let t24;
    	let div6;
    	let t25;
    	let div15;
    	let div14;
    	let div13;
    	let table;
    	let tr0;
    	let th0;
    	let t27;
    	let th1;
    	let t29;
    	let th2;
    	let t31;
    	let th3;
    	let t33;
    	let th4;
    	let t35;
    	let tr1;
    	let td0;
    	let t37;
    	let td1;
    	let t39;
    	let td2;
    	let t41;
    	let td3;
    	let t43;
    	let td4;
    	let t45;
    	let div10;
    	let div8;
    	let simulationline;
    	let t46;
    	let div9;
    	let scatterline;
    	let t47;
    	let div11;
    	let p7;
    	let t48;
    	let t49;
    	let t50;
    	let input;
    	let t51;
    	let div12;
    	let button0;
    	let t53;
    	let button1;
    	let t55;
    	let button2;
    	let t57;
    	let button3;
    	let t59;
    	let button4;
    	let t61;
    	let br6;
    	let br7;
    	let t62;
    	let p8;
    	let t63;
    	let span3;
    	let t65;
    	let a;
    	let current;
    	let mounted;
    	let dispose;

    	simulationline = new SimulationLine({
    			props: { numX: /*numX*/ ctx[2], numY: numY$1 },
    			$$inline: true
    		});

    	scatterline = new ScatterLine({ $$inline: true });

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Navigating in a Line World";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "Let’s progress to a slightly more complex environment. Now, the robot and\n  trees are located on a line. The robot has to decide which action to take:\n  move left or move right. Each action moves the robot one step in that direction. \n  The main difference from the previous scenario is that the robot’s actions affect \n  its state in the environment, reflected by its location. The robot must now learn \n  how valuable each action is depending on its state. \n  This defines a policy that the robot can follow, by learning which action \n  it should take in each state. This is reflected by the arrow in each state, \n  corresponding to the action with the greater Q-value for that particular state.";
    			t3 = space();
    			br0 = element("br");
    			br1 = element("br");
    			t4 = space();
    			p1 = element("p");
    			t5 = text("The robot currently follows a policy where it moves to the tree on the left,\n  having previously discovered that the tree yields bananas. Though the\n  tree on the left is closer to the robot's initial position, \n  the right tree actually generates much higher rewards, making it\n  more fruitful. If the robot strictly follows its current policy, it will\n  always move to the left tree. This is called exploitation, as the robot\n  exploits its knowledge when deciding how to pursue rewards. The robot needs to\n  explore in order to reduce the uncertainty about the tree on the right, in\n  order to learn that it actually yields greater rewards. This introduces an\n  important concept in reinforcement learning:  ");
    			span0 = element("span");
    			span0.textContent = "the explore-exploit dilemma";
    			t7 = text(". Agents must balance exploiting \n  known rewards with exploring the environment, and potentially \n  discovering more rewarding actions.");
    			t8 = space();
    			br2 = element("br");
    			br3 = element("br");
    			t9 = space();
    			p2 = element("p");
    			t10 = text("Constantly performing the action that the robot believes yields the greatest\n  reward is called being ");
    			span1 = element("span");
    			span1.textContent = "greedy";
    			t12 = text(". This does not allow the robot to explore at\n  all, and the robot will never discover that the other tree yields greater\n  rewards. To allow for some exploration, the robot can select actions according\n  to ");
    			span2 = element("span");
    			span2.textContent = "epsilon-greedy policy";
    			t14 = text(". This is a simple\n  way to balance exploration and exploitation, by exploring (i.e. choosing action\n  randomly) with probability epsilon and exploiting by greedily following the\n  policy with probability 1-epsilon. Increasing epsilon increases exploration.");
    			t15 = space();
    			br4 = element("br");
    			br5 = element("br");
    			t16 = space();
    			p3 = element("p");
    			p3.textContent = "See for yourself how increasing epsilon can change the robot's behavior,\n  leading to updating the Q-values and policy. Setting epsilon to zero \n  will result in a greedy polcy.";
    			t18 = space();
    			section = element("section");
    			div16 = element("div");
    			div7 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			p4 = element("p");
    			p4.textContent = "Let's observe the explore-exploit dilemma in the following\n            simulation. The robot's initial policy suggests perpetually \n            going left towards the tree that has already been\n            discovered.";
    			t20 = space();
    			div3 = element("div");
    			div2 = element("div");
    			p5 = element("p");
    			p5.textContent = "The robot has sampled 15 episodes or trials following the\n            epsilon-greedy policy discussed before. You can see the robot still\n            prefers stepping towards the tree on the left for all the states\n            despite the one on the right producing higher rewards. Let's allow \n            the robot to explore the environment further...";
    			t22 = space();
    			div5 = element("div");
    			div4 = element("div");
    			p6 = element("p");
    			p6.textContent = "The robot has now sampled 2500 episodes following the epsilon-greedy\n            policy. You can observe how the robot has updated its policy to\n            prefer stepping towards the tree on the right instead. The plots\n            indicate moving towards the right is more fruitful in each state.";
    			t24 = space();
    			div6 = element("div");
    			t25 = space();
    			div15 = element("div");
    			div14 = element("div");
    			div13 = element("div");
    			table = element("table");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Agent";
    			t27 = space();
    			th1 = element("th");
    			th1.textContent = "Environment";
    			t29 = space();
    			th2 = element("th");
    			th2.textContent = "State";
    			t31 = space();
    			th3 = element("th");
    			th3.textContent = "Actions";
    			t33 = space();
    			th4 = element("th");
    			th4.textContent = "Reward";
    			t35 = space();
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "Robot";
    			t37 = space();
    			td1 = element("td");
    			td1.textContent = "Line World";
    			t39 = space();
    			td2 = element("td");
    			td2.textContent = "X-Position";
    			t41 = space();
    			td3 = element("td");
    			td3.textContent = "Move Left, Move Right";
    			t43 = space();
    			td4 = element("td");
    			td4.textContent = "Number of Bananas";
    			t45 = space();
    			div10 = element("div");
    			div8 = element("div");
    			create_component(simulationline.$$.fragment);
    			t46 = space();
    			div9 = element("div");
    			create_component(scatterline.$$.fragment);
    			t47 = space();
    			div11 = element("div");
    			p7 = element("p");
    			t48 = text("Epsilon: ");
    			t49 = text(/*$lineEpsilon*/ ctx[1]);
    			t50 = space();
    			input = element("input");
    			t51 = space();
    			div12 = element("div");
    			button0 = element("button");
    			button0.textContent = "Simulate Episode";
    			t53 = space();
    			button1 = element("button");
    			button1.textContent = "Run 15 Episodes";
    			t55 = space();
    			button2 = element("button");
    			button2.textContent = "Run 50 Episodes";
    			t57 = space();
    			button3 = element("button");
    			button3.textContent = "Optimal Policy";
    			t59 = space();
    			button4 = element("button");
    			button4.textContent = "Reset";
    			t61 = space();
    			br6 = element("br");
    			br7 = element("br");
    			t62 = space();
    			p8 = element("p");
    			t63 = text("Humans often balance short-term gratification and long-term consequences in their decision-making. \n    We are predisposed to value rewards received now more than those received in the future. This makes\n    sense as the distant future is more uncertain than the present. \n    Similarly, the agent needs to find a balance between acquiring immediate rewards and considering \n    long-term gain. The Q-values for the Line World and the upcoming Grid World environment are estimated to be\n    the expected ");
    			span3 = element("span");
    			span3.textContent = "discounted";
    			t65 = text(" cummulative rewards. This simply means rewards \n    received later are worth less than those recieved immediately. For more information, refer this \n    ");
    			a = element("a");
    			a.textContent = "book.";
    			attr_dev(h2, "class", "body-secondary-header");
    			add_location(h2, file$7, 386, 0, 9801);
    			attr_dev(p0, "class", "body-text");
    			add_location(p0, file$7, 388, 0, 9868);
    			add_location(br0, file$7, 399, 0, 10595);
    			add_location(br1, file$7, 399, 6, 10601);
    			attr_dev(span0, "class", "bold");
    			add_location(span0, file$7, 410, 48, 11343);
    			attr_dev(p1, "class", "body-text");
    			add_location(p1, file$7, 400, 0, 10608);
    			add_location(br2, file$7, 415, 0, 11541);
    			add_location(br3, file$7, 415, 6, 11547);
    			attr_dev(span1, "class", "bold");
    			add_location(span1, file$7, 418, 25, 11680);
    			attr_dev(span2, "class", "bold");
    			add_location(span2, file$7, 421, 5, 11920);
    			attr_dev(p2, "class", "body-text");
    			add_location(p2, file$7, 416, 0, 11554);
    			add_location(br4, file$7, 426, 0, 12230);
    			add_location(br5, file$7, 426, 6, 12236);
    			attr_dev(p3, "class", "body-text");
    			add_location(p3, file$7, 427, 0, 12243);
    			attr_dev(p4, "class", "svelte-1aqu2db");
    			add_location(p4, file$7, 438, 10, 12637);
    			attr_dev(div0, "class", "step-content svelte-1aqu2db");
    			add_location(div0, file$7, 437, 8, 12600);
    			attr_dev(div1, "class", "step-lineworld svelte-1aqu2db");
    			attr_dev(div1, "data-index", "0");
    			add_location(div1, file$7, 436, 6, 12548);
    			attr_dev(p5, "class", "svelte-1aqu2db");
    			add_location(p5, file$7, 448, 10, 13009);
    			attr_dev(div2, "class", "step-content svelte-1aqu2db");
    			add_location(div2, file$7, 447, 8, 12972);
    			attr_dev(div3, "class", "step-lineworld svelte-1aqu2db");
    			attr_dev(div3, "data-index", "1");
    			add_location(div3, file$7, 446, 6, 12920);
    			attr_dev(p6, "class", "svelte-1aqu2db");
    			add_location(p6, file$7, 459, 10, 13518);
    			attr_dev(div4, "class", "step-content svelte-1aqu2db");
    			add_location(div4, file$7, 458, 8, 13481);
    			attr_dev(div5, "class", "step-lineworld svelte-1aqu2db");
    			attr_dev(div5, "data-index", "2");
    			add_location(div5, file$7, 457, 6, 13429);
    			attr_dev(div6, "class", "spacer svelte-1aqu2db");
    			add_location(div6, file$7, 467, 6, 13883);
    			attr_dev(div7, "class", "steps-container svelte-1aqu2db");
    			add_location(div7, file$7, 435, 4, 12512);
    			attr_dev(th0, "class", "table-head svelte-1aqu2db");
    			add_location(th0, file$7, 475, 14, 14103);
    			attr_dev(th1, "class", "table-head svelte-1aqu2db");
    			add_location(th1, file$7, 476, 14, 14151);
    			attr_dev(th2, "class", "table-head svelte-1aqu2db");
    			add_location(th2, file$7, 477, 14, 14205);
    			attr_dev(th3, "class", "table-head svelte-1aqu2db");
    			add_location(th3, file$7, 478, 14, 14253);
    			attr_dev(th4, "class", "table-head svelte-1aqu2db");
    			add_location(th4, file$7, 479, 14, 14303);
    			add_location(tr0, file$7, 474, 12, 14084);
    			attr_dev(td0, "class", "svelte-1aqu2db");
    			add_location(td0, file$7, 482, 14, 14387);
    			attr_dev(td1, "class", "svelte-1aqu2db");
    			add_location(td1, file$7, 483, 14, 14416);
    			attr_dev(td2, "class", "svelte-1aqu2db");
    			add_location(td2, file$7, 484, 14, 14450);
    			attr_dev(td3, "class", "svelte-1aqu2db");
    			add_location(td3, file$7, 485, 14, 14484);
    			attr_dev(td4, "class", "svelte-1aqu2db");
    			add_location(td4, file$7, 486, 14, 14529);
    			add_location(tr1, file$7, 481, 12, 14368);
    			attr_dev(table, "class", "svelte-1aqu2db");
    			add_location(table, file$7, 473, 10, 14064);
    			attr_dev(div8, "id", "simulation-chart");
    			attr_dev(div8, "class", "svelte-1aqu2db");
    			add_location(div8, file$7, 491, 12, 14643);
    			attr_dev(div9, "id", "scatter-chart");
    			attr_dev(div9, "class", "svelte-1aqu2db");
    			add_location(div9, file$7, 494, 12, 14749);
    			attr_dev(div10, "id", "graph-container");
    			attr_dev(div10, "class", "svelte-1aqu2db");
    			add_location(div10, file$7, 490, 10, 14604);
    			add_location(p7, file$7, 501, 12, 14934);
    			attr_dev(input, "type", "range");
    			attr_dev(input, "min", "0.0");
    			attr_dev(input, "max", "1.0");
    			attr_dev(input, "step", "0.1");
    			attr_dev(input, "maxlength", "20");
    			attr_dev(input, "class", "slider");
    			attr_dev(input, "id", "epsilonslider");
    			add_location(input, file$7, 502, 12, 14977);
    			attr_dev(div11, "id", "input-container");
    			attr_dev(div11, "class", "svelte-1aqu2db");
    			add_location(div11, file$7, 500, 10, 14895);
    			attr_dev(button0, "class", "svelte-1aqu2db");
    			add_location(button0, file$7, 516, 12, 15338);
    			attr_dev(button1, "class", "svelte-1aqu2db");
    			add_location(button1, file$7, 517, 12, 15419);
    			attr_dev(button2, "class", "svelte-1aqu2db");
    			add_location(button2, file$7, 520, 12, 15544);
    			attr_dev(button3, "class", "svelte-1aqu2db");
    			add_location(button3, file$7, 523, 12, 15669);
    			attr_dev(button4, "class", "svelte-1aqu2db");
    			add_location(button4, file$7, 524, 12, 15749);
    			attr_dev(div12, "id", "buttons-container");
    			attr_dev(div12, "class", "svelte-1aqu2db");
    			add_location(div12, file$7, 515, 10, 15297);
    			add_location(div13, file$7, 472, 8, 14048);
    			attr_dev(div14, "class", "chart-one svelte-1aqu2db");
    			add_location(div14, file$7, 470, 6, 13958);
    			attr_dev(div15, "class", "charts-container svelte-1aqu2db");
    			add_location(div15, file$7, 469, 4, 13921);
    			attr_dev(div16, "class", "scrolly-container svelte-1aqu2db");
    			add_location(div16, file$7, 434, 2, 12476);
    			add_location(br6, file$7, 531, 2, 15865);
    			add_location(br7, file$7, 531, 8, 15871);
    			attr_dev(span3, "class", "bold");
    			add_location(span3, file$7, 539, 17, 16411);
    			attr_dev(a, "href", "http://incompleteideas.net/book/the-book.html");
    			add_location(a, file$7, 541, 4, 16601);
    			attr_dev(p8, "class", "body-text");
    			add_location(p8, file$7, 533, 2, 15881);
    			attr_dev(section, "id", "scrolly");
    			attr_dev(section, "class", "svelte-1aqu2db");
    			add_location(section, file$7, 433, 0, 12451);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, br0, anchor);
    			insert_dev(target, br1, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t5);
    			append_dev(p1, span0);
    			append_dev(p1, t7);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, br2, anchor);
    			insert_dev(target, br3, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, p2, anchor);
    			append_dev(p2, t10);
    			append_dev(p2, span1);
    			append_dev(p2, t12);
    			append_dev(p2, span2);
    			append_dev(p2, t14);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, br4, anchor);
    			insert_dev(target, br5, anchor);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, p3, anchor);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, section, anchor);
    			append_dev(section, div16);
    			append_dev(div16, div7);
    			append_dev(div7, div1);
    			append_dev(div1, div0);
    			append_dev(div0, p4);
    			append_dev(div7, t20);
    			append_dev(div7, div3);
    			append_dev(div3, div2);
    			append_dev(div2, p5);
    			append_dev(div7, t22);
    			append_dev(div7, div5);
    			append_dev(div5, div4);
    			append_dev(div4, p6);
    			append_dev(div7, t24);
    			append_dev(div7, div6);
    			append_dev(div16, t25);
    			append_dev(div16, div15);
    			append_dev(div15, div14);
    			append_dev(div14, div13);
    			append_dev(div13, table);
    			append_dev(table, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t27);
    			append_dev(tr0, th1);
    			append_dev(tr0, t29);
    			append_dev(tr0, th2);
    			append_dev(tr0, t31);
    			append_dev(tr0, th3);
    			append_dev(tr0, t33);
    			append_dev(tr0, th4);
    			append_dev(table, t35);
    			append_dev(table, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t37);
    			append_dev(tr1, td1);
    			append_dev(tr1, t39);
    			append_dev(tr1, td2);
    			append_dev(tr1, t41);
    			append_dev(tr1, td3);
    			append_dev(tr1, t43);
    			append_dev(tr1, td4);
    			append_dev(div13, t45);
    			append_dev(div13, div10);
    			append_dev(div10, div8);
    			mount_component(simulationline, div8, null);
    			append_dev(div10, t46);
    			append_dev(div10, div9);
    			mount_component(scatterline, div9, null);
    			append_dev(div13, t47);
    			append_dev(div13, div11);
    			append_dev(div11, p7);
    			append_dev(p7, t48);
    			append_dev(p7, t49);
    			append_dev(div11, t50);
    			append_dev(div11, input);
    			set_input_value(input, /*$lineEpsilon*/ ctx[1]);
    			append_dev(div13, t51);
    			append_dev(div13, div12);
    			append_dev(div12, button0);
    			append_dev(div12, t53);
    			append_dev(div12, button1);
    			append_dev(div12, t55);
    			append_dev(div12, button2);
    			append_dev(div12, t57);
    			append_dev(div12, button3);
    			append_dev(div12, t59);
    			append_dev(div12, button4);
    			append_dev(section, t61);
    			append_dev(section, br6);
    			append_dev(section, br7);
    			append_dev(section, t62);
    			append_dev(section, p8);
    			append_dev(p8, t63);
    			append_dev(p8, span3);
    			append_dev(p8, t65);
    			append_dev(p8, a);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_input_handler*/ ctx[7]),
    					listen_dev(input, "input", /*input_change_input_handler*/ ctx[7]),
    					listen_dev(input, "input", /*input_handler*/ ctx[8], false, false, false),
    					listen_dev(button0, "click", /*click_handler*/ ctx[9], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[10], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[11], false, false, false),
    					listen_dev(button3, "click", /*click_handler_3*/ ctx[12], false, false, false),
    					listen_dev(button4, "click", /*click_handler_4*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*$lineEpsilon*/ 2) set_data_dev(t49, /*$lineEpsilon*/ ctx[1]);

    			if (dirty & /*$lineEpsilon*/ 2) {
    				set_input_value(input, /*$lineEpsilon*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(simulationline.$$.fragment, local);
    			transition_in(scatterline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(simulationline.$$.fragment, local);
    			transition_out(scatterline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(br0);
    			if (detaching) detach_dev(br1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(br2);
    			if (detaching) detach_dev(br3);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(br4);
    			if (detaching) detach_dev(br5);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(section);
    			destroy_component(simulationline);
    			destroy_component(scatterline);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const numCells$1 = 8;
    const numY$1 = 1;

    // Agent's starting position
    const startX = 3.5;

    const startY = 0.5;
    const maxEpisodes$1 = 2500;

    // Finds the index of the maximum
    function argMax$1(array) {
    	return array.map((x, i) => [x, i]).reduce((r, a) => a[0] > r[0] ? a : r)[1];
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $lineQValues;
    	let $lineEpsilon;
    	let $lineRobotPath;
    	let $lineRecordInterval;
    	validate_store(lineQValues, 'lineQValues');
    	component_subscribe($$self, lineQValues, $$value => $$invalidate(19, $lineQValues = $$value));
    	validate_store(lineEpsilon, 'lineEpsilon');
    	component_subscribe($$self, lineEpsilon, $$value => $$invalidate(1, $lineEpsilon = $$value));
    	validate_store(lineRobotPath, 'lineRobotPath');
    	component_subscribe($$self, lineRobotPath, $$value => $$invalidate(20, $lineRobotPath = $$value));
    	validate_store(lineRecordInterval, 'lineRecordInterval');
    	component_subscribe($$self, lineRecordInterval, $$value => $$invalidate(21, $lineRecordInterval = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LineWorld', slots, []);
    	const randomInt = (max, min) => Math.round(Math.random() * (max - min)) + min;

    	// 	change for 1 dim
    	const numX = numCells$1;

    	var xVal;
    	var yVal;
    	xVal = $lineRobotPath[0]["x"];
    	yVal = $lineRobotPath[0]["y"];
    	const actions = ["left", "right"];

    	//  Define the environment
    	const env = new Env([0, 3],
    	numY$1,
    	numX,
    	{
    			[[0, 0]]: 1, // start
    			// rows
    			// columns
    			[[0, 7]]: 7
    		},
    	{},
    	// Map of states and the corresponding reward
    		true,
    	true,
    	0.0); // Map of states and the corresponding reward
    	// [[2, 2]]: -5,
    	// deterministic: Stochastic env not implemented yet
    	// exploring_starts: Initializa agent at a random state in subsequent episodes.
    	// exploring_starts_prob: Probability of selecting a random initial state instead of specified one

    	// set lambda to 0 for TD(0) update and lamdba to 1 for MC
    	var lineAgent = new Agent(env.rows, env.columns, env.wins, env.losses, "q-learning", $lineEpsilon, 0.1, 0.8, 0.5); // for plotting
    	// for plotting
    	// 'q-learning' or 'sarsa'
    	// Control exploration
    	// Learning rate
    	// Discount factor
    	// Decay parameter for eligibility trace

    	// Episodic Q Values retrieved from simulation
    	var episodicValues = Array();

    	// Keep records at intervals. 
    	var episodeCount = 0;

    	var episodeIntervalArray = [];
    	reset();

    	// Run episodic trials and update Q-values
    	function runAgentTrials(numEpisodes, episodicValues) {
    		// Reduce the burden 
    		if (episodeCount > maxEpisodes$1) {
    			return;
    		}

    		let trialStats = lineAgent.runEpisodes(env, numEpisodes);

    		for (let ep = 0; ep < numEpisodes; ep++) {
    			episodeCount++;

    			if (episodeCount % $lineRecordInterval == $lineRecordInterval - 1) {
    				console.log(episodeCount, ep);
    				episodicValues.push(trialStats[ep]);
    				episodeIntervalArray.push(episodeCount + 1);
    			}
    		}

    		// Update LineQValues
    		updateLineQVals();

    		// Reset robot position to starting position
    		lineRobot.set({ x: startX, y: startY });

    		lineRobotPath.set([{ x: startX, y: startY }]);

    		// Reset episodicValues once lineQValues are updated
    		episodicValues = Array();
    	}

    	function simulateEpisode(maxSteps = 15) {
    		// Reset the robot to the starting position
    		lineRobot.set({ x: startX, y: startY });

    		lineRobotPath.set([{ x: startX, y: startY }]);

    		// Variables to keep track of robot
    		let currX = startX - 0.5;

    		let currY = startY - 0.5;
    		let nextX;
    		let nextY;

    		for (let i = 0; i < maxSteps; i++) {
    			if ([currY, currX] in env.wins || [currY, currX] in env.losses) {
    				break;
    			}

    			let index = currX;
    			let state = $lineQValues[index];

    			// Set default maxDirection incase Q values aren't learnt
    			var maxDirection = "left";

    			if (state["maxDirection"].length) {
    				maxDirection = state["maxDirection"][state["maxDirection"].length - 1];
    			}

    			// Take action in direction of highest Q-value
    			if (maxDirection == "left") {
    				nextX = currX - 1;
    				nextY = currY;
    			} else {
    				if (maxDirection == "right") {
    					nextX = currX + 1;
    					nextY = currY;
    				}
    			}

    			// Check validity of the transition
    			if (nextX >= 0 && nextX <= env.columns - 1) {
    				currX = nextX;
    				currY = nextY;
    			}

    			lineRobot.set({ x: currX + 0.5, y: currY + 0.5 });
    			const newRobotPath = [...$lineRobotPath, { x: currX + 0.5, y: currY + 0.5 }];
    			lineRobotPath.set(newRobotPath);
    		}
    	}

    	// Generate optimal policy regardless of the epsilon value
    	function getOptimalPolicy() {
    		reset(true);
    		runAgentTrials(maxEpisodes$1, episodicValues);
    	}

    	function reset(forOptimal = false) {
    		// Reset episode count
    		episodeCount = 0;

    		episodeIntervalArray = [];
    		var epsilon = forOptimal ? 0.5 : $lineEpsilon; // Produce optimal policy even when epsilon is too low

    		lineAgent = new Agent(env.rows, env.columns, env.wins, env.losses, "q-learning", epsilon, 0.1, 0.8, 0.5); // for plotting
    		// for plotting
    		// 'q-learning' or 'sarsa'
    		// Control exploration
    		// Learning rate
    		// Discount factor
    		// Decay parameter for eligibility trace

    		lineRobot.set({ x: startX, y: startY });

    		// Reset lineAgent stats
    		lineAgent.resetQValues();

    		lineAgent.resetTraceMatrix();
    		lineRobotPath.set([{ x: startX, y: startY }]);

    		lineQValues.set([
    			{
    				episodeNumber: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				leftWeight: [0],
    				rightWeight: [0]
    			}
    		]);

    		// Reset episodicValues
    		$$invalidate(0, episodicValues = Array());

    		// Update lineQValues (not needed)
    		updateLineQVals();
    	}

    	function updateLineQVals() {
    		if (episodicValues.length == 0) {
    			return;
    		}

    		// Maintain index to update the episodic count
    		var episodeIntervalArrayIndex = episodeIntervalArray.length - episodicValues.length;

    		for (let ep = 0; ep < episodicValues.length; ep++) {
    			// Mapping combination of row and col onto row of gridQvalues
    			// state is row in gridQValues
    			// (0,0), (1,0), (2,0), (3,0)
    			// (0,1), (1,1), (2,1), (3,1)
    			// (0,2), (1,2), (2,2), (3,2)
    			// (0,3), (1,3), (2,3), (3,3)
    			const newVals = $lineQValues.map((state, index) => {
    				const leftVal = episodicValues[ep][0][index][0];
    				const rightVal = episodicValues[ep][0][index][1];
    				const allVals = [leftVal, rightVal];
    				const maxIndex = argMax$1(allVals);
    				let maxDir;

    				if (maxIndex == 0) {
    					maxDir = "left";
    				} else if (maxIndex == 1) {
    					maxDir = "right";
    				}

    				const valSum = Math.abs(leftVal) + Math.abs(rightVal);

    				const vals = {
    					episodeNumber: [
    						...state["episodeNumber"],
    						episodeIntervalArray[episodeIntervalArrayIndex + ep]
    					],
    					// up: [...state["up"], episodicValues[ep][r][c][0]],
    					// down: [...state["down"], episodicValues[ep][r][c][1]],
    					left: [...state["left"], episodicValues[ep][0][index][0]],
    					right: [...state["right"], episodicValues[ep][0][index][1]],
    					maxDirection: [...state["maxDirection"], maxDir],
    					leftWeight: [...state["leftWeight"], leftVal / valSum || 0],
    					rightWeight: [...state["rightWeight"], rightVal / valSum || 0]
    				};

    				return vals;
    			});

    			set_store_value(lineQValues, $lineQValues = [...newVals], $lineQValues);
    		}

    		// Reset episodicValues
    		$$invalidate(0, episodicValues = Array());

    		console.log($lineQValues);
    	}

    	// trigger scroll events
    	// let sections;
    	const target2event = {
    		0: () => {
    			reset(true);
    			console.log("step 0");
    		},
    		1: () => {
    			reset(true);
    			runAgentTrials(15, episodicValues);
    			console.log("step 1");
    		},
    		2: () => {
    			reset(true);
    			console.log("step 2");
    			runAgentTrials(2500, episodicValues);
    		},
    		3: () => {
    			console.log("step");
    		},
    		4: () => {
    			console.log("step");
    		},
    		5: () => {
    			
    		}
    	};

    	function fireEvent(entryIndex) {
    		if (entryIndex in target2event) {
    			target2event[entryIndex]();
    		}
    	}

    	onMount(() => {
    		// store elements to track
    		let sections = selectAll(".step-lineworld").nodes();

    		// observe elements to track
    		sections.forEach(section => {
    			observer.observe(section);
    		});
    	});

    	// options for intersection observer
    	const options = { threshold: 0.7 };

    	let observer = new IntersectionObserver(entries => {
    			entries.forEach(entry => {
    				// check if visible or not
    				if (entry.isIntersecting) {
    					// resolve stage in graph
    					const entryIndex = entry.target.getAttribute("data-index");

    					if (entryIndex in target2event) {
    						fireEvent(entryIndex);
    					}
    				}
    			});
    		},
    	options);

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<LineWorld> was created with unknown prop '${key}'`);
    	});

    	function input_change_input_handler() {
    		$lineEpsilon = to_number(this.value);
    		lineEpsilon.set($lineEpsilon);
    	}

    	const input_handler = () => reset();
    	const click_handler = () => simulateEpisode();
    	const click_handler_1 = () => runAgentTrials(15, episodicValues);
    	const click_handler_2 = () => runAgentTrials(50, episodicValues);
    	const click_handler_3 = () => getOptimalPolicy();
    	const click_handler_4 = () => reset();

    	$$self.$capture_state = () => ({
    		ScatterLine,
    		SimulationLine,
    		lineRobot,
    		lineRobotPath,
    		lineEpsilon,
    		lineQValues,
    		lineRecordInterval,
    		Env,
    		Agent,
    		onMount,
    		select,
    		selectAll,
    		randomInt,
    		argMax: argMax$1,
    		numCells: numCells$1,
    		numX,
    		numY: numY$1,
    		xVal,
    		yVal,
    		actions,
    		env,
    		lineAgent,
    		startX,
    		startY,
    		episodicValues,
    		episodeCount,
    		episodeIntervalArray,
    		maxEpisodes: maxEpisodes$1,
    		runAgentTrials,
    		simulateEpisode,
    		getOptimalPolicy,
    		reset,
    		updateLineQVals,
    		target2event,
    		fireEvent,
    		options,
    		observer,
    		$lineQValues,
    		$lineEpsilon,
    		$lineRobotPath,
    		$lineRecordInterval
    	});

    	$$self.$inject_state = $$props => {
    		if ('xVal' in $$props) xVal = $$props.xVal;
    		if ('yVal' in $$props) yVal = $$props.yVal;
    		if ('lineAgent' in $$props) lineAgent = $$props.lineAgent;
    		if ('episodicValues' in $$props) $$invalidate(0, episodicValues = $$props.episodicValues);
    		if ('episodeCount' in $$props) episodeCount = $$props.episodeCount;
    		if ('episodeIntervalArray' in $$props) episodeIntervalArray = $$props.episodeIntervalArray;
    		if ('observer' in $$props) observer = $$props.observer;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		episodicValues,
    		$lineEpsilon,
    		numX,
    		runAgentTrials,
    		simulateEpisode,
    		getOptimalPolicy,
    		reset,
    		input_change_input_handler,
    		input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4
    	];
    }

    class LineWorld extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LineWorld",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    function draw$1(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {
        let len = node.getTotalLength();
        const style = getComputedStyle(node);
        if (style.strokeLinecap !== 'butt') {
            len += parseInt(style.strokeWidth);
        }
        if (duration === undefined) {
            if (speed === undefined) {
                duration = 800;
            }
            else {
                duration = len / speed;
            }
        }
        else if (typeof duration === 'function') {
            duration = duration(len);
        }
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`
        };
    }

    /* src/Components/QChartGrid.svelte generated by Svelte v3.52.0 */

    const { console: console_1$3 } = globals;
    const file$6 = "src/Components/QChartGrid.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    // (94:0) {#each xScale.ticks() as tick}
    function create_each_block_1$1(ctx) {
    	let g;
    	let text_1;

    	let t_value = (/*tick*/ ctx[16] % /*tickModulo*/ ctx[5] == 0
    	? /*formatter*/ ctx[11](/*tick*/ ctx[16])
    	: "") + "";

    	let t;
    	let g_transform_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "class", "axis-text svelte-tk1l0e");
    			attr_dev(text_1, "y", "7");
    			attr_dev(text_1, "text-anchor", "middle");
    			add_location(text_1, file$6, 97, 4, 2346);
    			attr_dev(g, "transform", g_transform_value = `translate(${/*xScale*/ ctx[3](/*tick*/ ctx[16]) + 0} ${/*height*/ ctx[0] - /*$gridMargin*/ ctx[4].bottom})`);
    			add_location(g, file$6, 94, 2, 2255);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*xScale, tickModulo*/ 40 && t_value !== (t_value = (/*tick*/ ctx[16] % /*tickModulo*/ ctx[5] == 0
    			? /*formatter*/ ctx[11](/*tick*/ ctx[16])
    			: "") + "")) set_data_dev(t, t_value);

    			if (dirty & /*xScale, height, $gridMargin*/ 25 && g_transform_value !== (g_transform_value = `translate(${/*xScale*/ ctx[3](/*tick*/ ctx[16]) + 0} ${/*height*/ ctx[0] - /*$gridMargin*/ ctx[4].bottom})`)) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(94:0) {#each xScale.ticks() as tick}",
    		ctx
    	});

    	return block;
    }

    // (104:0) {#each yScale.ticks() as tick}
    function create_each_block$2(ctx) {
    	let g;
    	let text_1;

    	let t0_value = (/*tick*/ ctx[16] % 2 == 0
    	? /*formatter*/ ctx[11](/*tick*/ ctx[16])
    	: "") + "";

    	let t0;
    	let g_transform_value;
    	let t1;
    	let line0;
    	let line0_x__value;
    	let line0_x__value_1;
    	let line0_y__value;
    	let line0_y__value_1;
    	let t2;
    	let line1;
    	let line1_x__value;
    	let line1_x__value_1;
    	let line1_y__value;
    	let line1_y__value_1;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			text_1 = svg_element("text");
    			t0 = text(t0_value);
    			t1 = space();
    			line0 = svg_element("line");
    			t2 = space();
    			line1 = svg_element("line");
    			attr_dev(text_1, "class", "axis-text svelte-tk1l0e");
    			attr_dev(text_1, "y", "0");
    			attr_dev(text_1, "dx", "1");
    			attr_dev(text_1, "text-anchor", "end");
    			attr_dev(text_1, "dominant-baseline", "middle");
    			add_location(text_1, file$6, 105, 4, 2606);
    			attr_dev(g, "transform", g_transform_value = `translate(${/*$gridMargin*/ ctx[4].left - 5} ${/*yScale*/ ctx[2](/*tick*/ ctx[16]) + 0})`);
    			add_location(g, file$6, 104, 2, 2529);
    			attr_dev(line0, "class", "axis-line");
    			attr_dev(line0, "x1", line0_x__value = /*$gridMargin*/ ctx[4].left);
    			attr_dev(line0, "x2", line0_x__value_1 = /*$gridMargin*/ ctx[4].left);
    			attr_dev(line0, "y1", line0_y__value = /*$gridMargin*/ ctx[4].top);
    			attr_dev(line0, "y2", line0_y__value_1 = /*height*/ ctx[0] - /*$gridMargin*/ ctx[4].bottom);
    			attr_dev(line0, "stroke", "black");
    			add_location(line0, file$6, 115, 2, 2850);
    			attr_dev(line1, "class", "axis-line");
    			attr_dev(line1, "x1", line1_x__value = /*$gridMargin*/ ctx[4].left);
    			attr_dev(line1, "x2", line1_x__value_1 = /*width*/ ctx[1] - /*$gridMargin*/ ctx[4].right);
    			attr_dev(line1, "y1", line1_y__value = /*height*/ ctx[0] - /*$gridMargin*/ ctx[4].bottom);
    			attr_dev(line1, "y2", line1_y__value_1 = /*height*/ ctx[0] - /*$gridMargin*/ ctx[4].bottom);
    			attr_dev(line1, "stroke", "black");
    			add_location(line1, file$6, 124, 2, 3068);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, text_1);
    			append_dev(text_1, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, line0, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, line1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*yScale*/ 4 && t0_value !== (t0_value = (/*tick*/ ctx[16] % 2 == 0
    			? /*formatter*/ ctx[11](/*tick*/ ctx[16])
    			: "") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$gridMargin, yScale*/ 20 && g_transform_value !== (g_transform_value = `translate(${/*$gridMargin*/ ctx[4].left - 5} ${/*yScale*/ ctx[2](/*tick*/ ctx[16]) + 0})`)) {
    				attr_dev(g, "transform", g_transform_value);
    			}

    			if (dirty & /*$gridMargin*/ 16 && line0_x__value !== (line0_x__value = /*$gridMargin*/ ctx[4].left)) {
    				attr_dev(line0, "x1", line0_x__value);
    			}

    			if (dirty & /*$gridMargin*/ 16 && line0_x__value_1 !== (line0_x__value_1 = /*$gridMargin*/ ctx[4].left)) {
    				attr_dev(line0, "x2", line0_x__value_1);
    			}

    			if (dirty & /*$gridMargin*/ 16 && line0_y__value !== (line0_y__value = /*$gridMargin*/ ctx[4].top)) {
    				attr_dev(line0, "y1", line0_y__value);
    			}

    			if (dirty & /*height, $gridMargin*/ 17 && line0_y__value_1 !== (line0_y__value_1 = /*height*/ ctx[0] - /*$gridMargin*/ ctx[4].bottom)) {
    				attr_dev(line0, "y2", line0_y__value_1);
    			}

    			if (dirty & /*$gridMargin*/ 16 && line1_x__value !== (line1_x__value = /*$gridMargin*/ ctx[4].left)) {
    				attr_dev(line1, "x1", line1_x__value);
    			}

    			if (dirty & /*width, $gridMargin*/ 18 && line1_x__value_1 !== (line1_x__value_1 = /*width*/ ctx[1] - /*$gridMargin*/ ctx[4].right)) {
    				attr_dev(line1, "x2", line1_x__value_1);
    			}

    			if (dirty & /*height, $gridMargin*/ 17 && line1_y__value !== (line1_y__value = /*height*/ ctx[0] - /*$gridMargin*/ ctx[4].bottom)) {
    				attr_dev(line1, "y1", line1_y__value);
    			}

    			if (dirty & /*height, $gridMargin*/ 17 && line1_y__value_1 !== (line1_y__value_1 = /*height*/ ctx[0] - /*$gridMargin*/ ctx[4].bottom)) {
    				attr_dev(line1, "y2", line1_y__value_1);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(line0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(line1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(104:0) {#each yScale.ticks() as tick}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let path0;
    	let path0_d_value;
    	let path0_transition;
    	let t0;
    	let path1;
    	let path1_d_value;
    	let path1_transition;
    	let t1;
    	let path2;
    	let path2_d_value;
    	let path2_transition;
    	let t2;
    	let path3;
    	let path3_d_value;
    	let path3_transition;
    	let t3;
    	let t4;
    	let each1_anchor;
    	let current;
    	let each_value_1 = /*xScale*/ ctx[3].ticks();
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = /*yScale*/ ctx[2].ticks();
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			path0 = svg_element("path");
    			t0 = space();
    			path1 = svg_element("path");
    			t1 = space();
    			path2 = svg_element("path");
    			t2 = space();
    			path3 = svg_element("path");
    			t3 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t4 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each1_anchor = empty$1();
    			attr_dev(path0, "class", "q-path pathUp-line svelte-tk1l0e");
    			attr_dev(path0, "d", path0_d_value = /*pathGenerator*/ ctx[6](/*pathUpData*/ ctx[10]));
    			add_location(path0, file$6, 71, 0, 1754);
    			attr_dev(path1, "class", "q-path pathDown-line svelte-tk1l0e");
    			attr_dev(path1, "d", path1_d_value = /*pathGenerator*/ ctx[6](/*pathDownData*/ ctx[9]));
    			add_location(path1, file$6, 76, 0, 1863);
    			attr_dev(path2, "class", "q-path pathLeft-line svelte-tk1l0e");
    			attr_dev(path2, "d", path2_d_value = /*pathGenerator*/ ctx[6](/*pathLeftData*/ ctx[8]));
    			add_location(path2, file$6, 81, 0, 1976);
    			attr_dev(path3, "class", "q-path pathRight-line svelte-tk1l0e");
    			attr_dev(path3, "d", path3_d_value = /*pathGenerator*/ ctx[6](/*pathRightData*/ ctx[7]));
    			add_location(path3, file$6, 86, 0, 2089);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, path1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, path2, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, path3, anchor);
    			insert_dev(target, t3, anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(target, anchor);
    			}

    			insert_dev(target, t4, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*pathGenerator, pathUpData*/ 1088 && path0_d_value !== (path0_d_value = /*pathGenerator*/ ctx[6](/*pathUpData*/ ctx[10]))) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (!current || dirty & /*pathGenerator, pathDownData*/ 576 && path1_d_value !== (path1_d_value = /*pathGenerator*/ ctx[6](/*pathDownData*/ ctx[9]))) {
    				attr_dev(path1, "d", path1_d_value);
    			}

    			if (!current || dirty & /*pathGenerator, pathLeftData*/ 320 && path2_d_value !== (path2_d_value = /*pathGenerator*/ ctx[6](/*pathLeftData*/ ctx[8]))) {
    				attr_dev(path2, "d", path2_d_value);
    			}

    			if (!current || dirty & /*pathGenerator, pathRightData*/ 192 && path3_d_value !== (path3_d_value = /*pathGenerator*/ ctx[6](/*pathRightData*/ ctx[7]))) {
    				attr_dev(path3, "d", path3_d_value);
    			}

    			if (dirty & /*xScale, height, $gridMargin, tickModulo, formatter*/ 2105) {
    				each_value_1 = /*xScale*/ ctx[3].ticks();
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(t4.parentNode, t4);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*$gridMargin, width, height, yScale, formatter*/ 2071) {
    				each_value = /*yScale*/ ctx[2].ticks();
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each1_anchor.parentNode, each1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!path0_transition) path0_transition = create_bidirectional_transition(path0, draw$1, { duration: 2000 }, true);
    				path0_transition.run(1);
    			});

    			add_render_callback(() => {
    				if (!path1_transition) path1_transition = create_bidirectional_transition(path1, draw$1, { duration: 2000 }, true);
    				path1_transition.run(1);
    			});

    			add_render_callback(() => {
    				if (!path2_transition) path2_transition = create_bidirectional_transition(path2, draw$1, { duration: 2000 }, true);
    				path2_transition.run(1);
    			});

    			add_render_callback(() => {
    				if (!path3_transition) path3_transition = create_bidirectional_transition(path3, draw$1, { duration: 2000 }, true);
    				path3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!path0_transition) path0_transition = create_bidirectional_transition(path0, draw$1, { duration: 2000 }, false);
    			path0_transition.run(0);
    			if (!path1_transition) path1_transition = create_bidirectional_transition(path1, draw$1, { duration: 2000 }, false);
    			path1_transition.run(0);
    			if (!path2_transition) path2_transition = create_bidirectional_transition(path2, draw$1, { duration: 2000 }, false);
    			path2_transition.run(0);
    			if (!path3_transition) path3_transition = create_bidirectional_transition(path3, draw$1, { duration: 2000 }, false);
    			path3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path0);
    			if (detaching && path0_transition) path0_transition.end();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(path1);
    			if (detaching && path1_transition) path1_transition.end();
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(path2);
    			if (detaching && path2_transition) path2_transition.end();
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(path3);
    			if (detaching && path3_transition) path3_transition.end();
    			if (detaching) detach_dev(t3);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let xMax;
    	let xScale;
    	let yScale;
    	let pathUpData;
    	let pathDownData;
    	let pathLeftData;
    	let pathRightData;
    	let pathGenerator;
    	let tickModulo;
    	let $gridQValues;
    	let $gridMargin;
    	let $gridRecordInterval;
    	validate_store(gridQValues, 'gridQValues');
    	component_subscribe($$self, gridQValues, $$value => $$invalidate(14, $gridQValues = $$value));
    	validate_store(gridMargin, 'gridMargin');
    	component_subscribe($$self, gridMargin, $$value => $$invalidate(4, $gridMargin = $$value));
    	validate_store(gridRecordInterval, 'gridRecordInterval');
    	component_subscribe($$self, gridRecordInterval, $$value => $$invalidate(15, $gridRecordInterval = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('QChartGrid', slots, []);
    	let { height = 500 } = $$props;
    	let { width = 500 } = $$props;
    	let { index = 0 } = $$props;

    	// label formatter
    	const formatter = format$3(".2d");

    	const writable_props = ['height', 'width', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<QChartGrid> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('index' in $$props) $$invalidate(12, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		line,
    		draw: draw$1,
    		scaleLinear: linear,
    		format: format$3,
    		gridMargin,
    		gridQValues,
    		gridRecordInterval,
    		height,
    		width,
    		index,
    		formatter,
    		tickModulo,
    		yScale,
    		xScale,
    		pathGenerator,
    		pathRightData,
    		pathLeftData,
    		pathDownData,
    		pathUpData,
    		xMax,
    		$gridQValues,
    		$gridMargin,
    		$gridRecordInterval
    	});

    	$$self.$inject_state = $$props => {
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('index' in $$props) $$invalidate(12, index = $$props.index);
    		if ('tickModulo' in $$props) $$invalidate(5, tickModulo = $$props.tickModulo);
    		if ('yScale' in $$props) $$invalidate(2, yScale = $$props.yScale);
    		if ('xScale' in $$props) $$invalidate(3, xScale = $$props.xScale);
    		if ('pathGenerator' in $$props) $$invalidate(6, pathGenerator = $$props.pathGenerator);
    		if ('pathRightData' in $$props) $$invalidate(7, pathRightData = $$props.pathRightData);
    		if ('pathLeftData' in $$props) $$invalidate(8, pathLeftData = $$props.pathLeftData);
    		if ('pathDownData' in $$props) $$invalidate(9, pathDownData = $$props.pathDownData);
    		if ('pathUpData' in $$props) $$invalidate(10, pathUpData = $$props.pathUpData);
    		if ('xMax' in $$props) $$invalidate(13, xMax = $$props.xMax);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$gridQValues*/ 16384) {
    			//   get max value for x-axis
    			$$invalidate(13, xMax = $gridQValues[0]["episodeNumber"][$gridQValues[0]["episodeNumber"].length - 1]);
    		}

    		if ($$self.$$.dirty & /*xMax, $gridMargin, width*/ 8210) {
    			// scales
    			$$invalidate(3, xScale = linear().domain([0, xMax + 1]).range([$gridMargin.left, width - $gridMargin.right]));
    		}

    		if ($$self.$$.dirty & /*height, $gridMargin*/ 17) {
    			$$invalidate(2, yScale = linear().domain([-5.1, 8]).range([height - $gridMargin.bottom, $gridMargin.top]));
    		}

    		if ($$self.$$.dirty & /*$gridQValues, index, $gridRecordInterval*/ 53248) {
    			$$invalidate(10, pathUpData = $gridQValues[index]["up"].map((val, i) => {
    				return { x: $gridRecordInterval * i, y: val };
    			}));
    		}

    		if ($$self.$$.dirty & /*$gridQValues, index, $gridRecordInterval*/ 53248) {
    			$$invalidate(9, pathDownData = $gridQValues[index]["down"].map((val, i) => {
    				return { x: $gridRecordInterval * i, y: val };
    			}));
    		}

    		if ($$self.$$.dirty & /*$gridQValues, index, $gridRecordInterval*/ 53248) {
    			$$invalidate(8, pathLeftData = $gridQValues[index]["left"].map((val, i) => {
    				return { x: $gridRecordInterval * i, y: val };
    			}));
    		}

    		if ($$self.$$.dirty & /*$gridQValues, index, $gridRecordInterval*/ 53248) {
    			$$invalidate(7, pathRightData = $gridQValues[index]["right"].map((val, i) => {
    				return { x: $gridRecordInterval * i, y: val };
    			}));
    		}

    		if ($$self.$$.dirty & /*$gridMargin*/ 16) {
    			{
    				console.log("gm", $gridMargin.top);
    			}
    		}

    		if ($$self.$$.dirty & /*xScale, yScale*/ 12) {
    			//   d3 line generator
    			$$invalidate(6, pathGenerator = line().x(d => xScale(d.x)).y(d => yScale(d.y)));
    		}

    		if ($$self.$$.dirty & /*$gridQValues*/ 16384) {
    			$$invalidate(5, tickModulo = $gridQValues[0]["episodeNumber"][$gridQValues[0]["episodeNumber"].length - 1] > 400
    			? 150
    			: $gridQValues[0]["episodeNumber"][$gridQValues[0]["episodeNumber"].length - 1] > 100
    				? 50
    				: 10);
    		}
    	};

    	return [
    		height,
    		width,
    		yScale,
    		xScale,
    		$gridMargin,
    		tickModulo,
    		pathGenerator,
    		pathRightData,
    		pathLeftData,
    		pathDownData,
    		pathUpData,
    		formatter,
    		index,
    		xMax,
    		$gridQValues,
    		$gridRecordInterval
    	];
    }

    class QChartGrid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { height: 0, width: 1, index: 12 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "QChartGrid",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get height() {
    		throw new Error("<QChartGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<QChartGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<QChartGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<QChartGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<QChartGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<QChartGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/ScatterGrid.svelte generated by Svelte v3.52.0 */
    const file$5 = "src/Components/ScatterGrid.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    // (26:2) {#each data as d, i}
    function create_each_block$1(ctx) {
    	let g;
    	let qchartgrid;
    	let g_transform_value;
    	let current;

    	qchartgrid = new QChartGrid({
    			props: {
    				index: /*i*/ ctx[11],
    				width: /*cellWidth*/ ctx[5],
    				height: /*cellHeight*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			create_component(qchartgrid.$$.fragment);
    			attr_dev(g, "transform", g_transform_value = "translate(" + /*xScale*/ ctx[3](/*d*/ ctx[9].x) + ", " + /*yScale*/ ctx[2](/*d*/ ctx[9].y) + ")");
    			add_location(g, file$5, 26, 4, 677);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			mount_component(qchartgrid, g, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const qchartgrid_changes = {};
    			if (dirty & /*cellWidth*/ 32) qchartgrid_changes.width = /*cellWidth*/ ctx[5];
    			if (dirty & /*cellHeight*/ 16) qchartgrid_changes.height = /*cellHeight*/ ctx[4];
    			qchartgrid.$set(qchartgrid_changes);

    			if (!current || dirty & /*xScale, yScale*/ 12 && g_transform_value !== (g_transform_value = "translate(" + /*xScale*/ ctx[3](/*d*/ ctx[9].x) + ", " + /*yScale*/ ctx[2](/*d*/ ctx[9].y) + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(qchartgrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(qchartgrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_component(qchartgrid);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(26:2) {#each data as d, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let svg;
    	let current;
    	let each_value = /*data*/ ctx[6];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(svg, "width", /*$gridWidth*/ ctx[1]);
    			attr_dev(svg, "height", /*$gridHeight*/ ctx[0]);
    			attr_dev(svg, "class", "svelte-1w0xqs8");
    			add_location(svg, file$5, 24, 0, 604);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svg, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*xScale, data, yScale, cellWidth, cellHeight*/ 124) {
    				each_value = /*data*/ ctx[6];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(svg, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*$gridWidth*/ 2) {
    				attr_dev(svg, "width", /*$gridWidth*/ ctx[1]);
    			}

    			if (!current || dirty & /*$gridHeight*/ 1) {
    				attr_dev(svg, "height", /*$gridHeight*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let cellWidth;
    	let cellHeight;
    	let xScale;
    	let yScale;
    	let $gridHeight;
    	let $gridWidth;
    	validate_store(gridHeight, 'gridHeight');
    	component_subscribe($$self, gridHeight, $$value => $$invalidate(0, $gridHeight = $$value));
    	validate_store(gridWidth, 'gridWidth');
    	component_subscribe($$self, gridWidth, $$value => $$invalidate(1, $gridWidth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ScatterGrid', slots, []);
    	let { numX = 4 } = $$props;
    	let { numY = 4 } = $$props;
    	let data = [];

    	for (let xVal = 0; xVal < numX; xVal++) {
    		for (let yVal = 0; yVal < numY; yVal++) {
    			data.push({ x: xVal, y: yVal });
    		}
    	}

    	const writable_props = ['numX', 'numY'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ScatterGrid> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('numX' in $$props) $$invalidate(7, numX = $$props.numX);
    		if ('numY' in $$props) $$invalidate(8, numY = $$props.numY);
    	};

    	$$self.$capture_state = () => ({
    		scaleLinear: linear,
    		QChartGrid,
    		gridHeight,
    		gridWidth,
    		numX,
    		numY,
    		data,
    		yScale,
    		xScale,
    		cellHeight,
    		cellWidth,
    		$gridHeight,
    		$gridWidth
    	});

    	$$self.$inject_state = $$props => {
    		if ('numX' in $$props) $$invalidate(7, numX = $$props.numX);
    		if ('numY' in $$props) $$invalidate(8, numY = $$props.numY);
    		if ('data' in $$props) $$invalidate(6, data = $$props.data);
    		if ('yScale' in $$props) $$invalidate(2, yScale = $$props.yScale);
    		if ('xScale' in $$props) $$invalidate(3, xScale = $$props.xScale);
    		if ('cellHeight' in $$props) $$invalidate(4, cellHeight = $$props.cellHeight);
    		if ('cellWidth' in $$props) $$invalidate(5, cellWidth = $$props.cellWidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$gridWidth, numX*/ 130) {
    			$$invalidate(5, cellWidth = $gridWidth / numX);
    		}

    		if ($$self.$$.dirty & /*$gridHeight, numY*/ 257) {
    			$$invalidate(4, cellHeight = $gridHeight / numY);
    		}

    		if ($$self.$$.dirty & /*numX, $gridWidth*/ 130) {
    			// // scales
    			$$invalidate(3, xScale = linear().domain([0, numX]).range([0, $gridWidth]));
    		}

    		if ($$self.$$.dirty & /*numY, $gridHeight*/ 257) {
    			$$invalidate(2, yScale = linear().domain([0, numY]).range([0, $gridHeight]));
    		}
    	};

    	return [
    		$gridHeight,
    		$gridWidth,
    		yScale,
    		xScale,
    		cellHeight,
    		cellWidth,
    		data,
    		numX,
    		numY
    	];
    }

    class ScatterGrid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { numX: 7, numY: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ScatterGrid",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get numX() {
    		throw new Error("<ScatterGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set numX(value) {
    		throw new Error("<ScatterGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get numY() {
    		throw new Error("<ScatterGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set numY(value) {
    		throw new Error("<ScatterGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/SimulationGrid.svelte generated by Svelte v3.52.0 */

    const { console: console_1$2 } = globals;

    const file$4 = "src/Components/SimulationGrid.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[28] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[36] = list[i];
    	child_ctx[38] = i;
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[39] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[42] = list[i];
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[45] = list[i];
    	return child_ctx;
    }

    // (93:2) {#each [..."".padEnd(numX)].map((_, i) => i + 1) as tick}
    function create_each_block_6(ctx) {
    	let g0;
    	let line0;
    	let line0_y__value;
    	let text0;
    	let t0_value = /*tick*/ ctx[45] + "";
    	let t0;
    	let g0_transform_value;
    	let g1;
    	let line1;
    	let line1_x__value;
    	let text1;
    	let t1_value = /*tick*/ ctx[45] + "";
    	let t1;
    	let g1_transform_value;

    	const block = {
    		c: function create() {
    			g0 = svg_element("g");
    			line0 = svg_element("line");
    			text0 = svg_element("text");
    			t0 = text(t0_value);
    			g1 = svg_element("g");
    			line1 = svg_element("line");
    			text1 = svg_element("text");
    			t1 = text(t1_value);
    			attr_dev(line0, "class", "grid-line svelte-md1ugn");
    			attr_dev(line0, "x1", "0");
    			attr_dev(line0, "x2", "0");
    			attr_dev(line0, "y1", "0");
    			attr_dev(line0, "y2", line0_y__value = -/*$gridHeight*/ ctx[7] + /*$margin*/ ctx[18].bottom + /*$margin*/ ctx[18].top);
    			add_location(line0, file$4, 99, 6, 2737);
    			attr_dev(text0, "class", "auc-axis-text");
    			attr_dev(text0, "y", "15");
    			attr_dev(text0, "text-anchor", "middle");
    			add_location(text0, file$4, 106, 6, 2886);
    			attr_dev(g0, "transform", g0_transform_value = `translate(${/*xScale*/ ctx[1](/*tick*/ ctx[45]) + 0} ${/*$gridHeight*/ ctx[7] - /*$margin*/ ctx[18].bottom})`);
    			add_location(g0, file$4, 93, 4, 2569);
    			attr_dev(line1, "class", "grid-line svelte-md1ugn");
    			attr_dev(line1, "x1", "0");
    			attr_dev(line1, "x2", line1_x__value = /*$gridWidth*/ ctx[8] - /*$margin*/ ctx[18].right - /*$margin*/ ctx[18].left);
    			attr_dev(line1, "y1", "0");
    			attr_dev(line1, "y2", "0");
    			add_location(line1, file$4, 110, 6, 3094);
    			attr_dev(text1, "class", "auc-axis-text");
    			attr_dev(text1, "y", "0");
    			attr_dev(text1, "text-anchor", "end");
    			attr_dev(text1, "dominant-baseline", "middle");
    			add_location(text1, file$4, 117, 6, 3241);
    			attr_dev(g1, "transform", g1_transform_value = `translate(${/*$margin*/ ctx[18].left} ${/*yScale*/ ctx[0](/*tick*/ ctx[45]) + 0})`);
    			add_location(g1, file$4, 108, 4, 2969);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g0, anchor);
    			append_dev(g0, line0);
    			append_dev(g0, text0);
    			append_dev(text0, t0);
    			insert_dev(target, g1, anchor);
    			append_dev(g1, line1);
    			append_dev(g1, text1);
    			append_dev(text1, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$gridHeight, $margin*/ 262272 && line0_y__value !== (line0_y__value = -/*$gridHeight*/ ctx[7] + /*$margin*/ ctx[18].bottom + /*$margin*/ ctx[18].top)) {
    				attr_dev(line0, "y2", line0_y__value);
    			}

    			if (dirty[0] & /*xScale, $gridHeight, $margin*/ 262274 && g0_transform_value !== (g0_transform_value = `translate(${/*xScale*/ ctx[1](/*tick*/ ctx[45]) + 0} ${/*$gridHeight*/ ctx[7] - /*$margin*/ ctx[18].bottom})`)) {
    				attr_dev(g0, "transform", g0_transform_value);
    			}

    			if (dirty[0] & /*$gridWidth, $margin*/ 262400 && line1_x__value !== (line1_x__value = /*$gridWidth*/ ctx[8] - /*$margin*/ ctx[18].right - /*$margin*/ ctx[18].left)) {
    				attr_dev(line1, "x2", line1_x__value);
    			}

    			if (dirty[0] & /*$margin, yScale*/ 262145 && g1_transform_value !== (g1_transform_value = `translate(${/*$margin*/ ctx[18].left} ${/*yScale*/ ctx[0](/*tick*/ ctx[45]) + 0})`)) {
    				attr_dev(g1, "transform", g1_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g0);
    			if (detaching) detach_dev(g1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(93:2) {#each [...\\\"\\\".padEnd(numX)].map((_, i) => i + 1) as tick}",
    		ctx
    	});

    	return block;
    }

    // (136:6) {:else}
    function create_else_block(ctx) {
    	let each_1_anchor;
    	let each_value_4 = ["up", "down", "left", "right"];
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*directionOffset, directionMap, $gridQValues*/ 17303552) {
    				each_value_4 = ["up", "down", "left", "right"];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < 4; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < 4; i += 1) {
    					each_blocks[i].d(1);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(136:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (134:6) {#if rewardArray.some((r) => r.length == [Math.floor(i / numY), i % numY].length && r.every((value, index) => [Math.floor(i / numY), i % numY][index] == value))}
    function create_if_block(ctx) {
    	let t_value = console.log("skip") + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(134:6) {#if rewardArray.some((r) => r.length == [Math.floor(i / numY), i % numY].length && r.every((value, index) => [Math.floor(i / numY), i % numY][index] == value))}",
    		ctx
    	});

    	return block;
    }

    // (144:12) {#each arrow as ar}
    function create_each_block_5(ctx) {
    	let path;
    	let path_opacity_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", /*ar*/ ctx[42]);
    			attr_dev(path, "class", "" + (null_to_empty(`arrow-${/*arrowDirection*/ ctx[39]} arrow`) + " svelte-md1ugn"));
    			attr_dev(path, "stroke-width", 0);
    			attr_dev(path, "transform", `rotate(${/*directionMap*/ ctx[24][/*arrowDirection*/ ctx[39]]}) scale(0.05)`);

    			attr_dev(path, "opacity", path_opacity_value = /*d*/ ctx[36].maxDirection[/*d*/ ctx[36].maxDirection.length - 1] == /*arrowDirection*/ ctx[39]
    			? 1
    			: /*d*/ ctx[36][`${/*arrowDirection*/ ctx[39]}Weight`][/*d*/ ctx[36].maxDirection.length - 1]);

    			add_location(path, file$4, 144, 14, 4151);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$gridQValues*/ 524288 && path_opacity_value !== (path_opacity_value = /*d*/ ctx[36].maxDirection[/*d*/ ctx[36].maxDirection.length - 1] == /*arrowDirection*/ ctx[39]
    			? 1
    			: /*d*/ ctx[36][`${/*arrowDirection*/ ctx[39]}Weight`][/*d*/ ctx[36].maxDirection.length - 1])) {
    				attr_dev(path, "opacity", path_opacity_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(144:12) {#each arrow as ar}",
    		ctx
    	});

    	return block;
    }

    // (137:8) {#each ["up", "down", "left", "right"] as arrowDirection}
    function create_each_block_4(ctx) {
    	let g;
    	let g_transform_value;
    	let each_value_5 = arrow;
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "transform", g_transform_value = "translate(" + /*directionOffset*/ ctx[11][/*arrowDirection*/ ctx[39]]['x'] + ", " + /*directionOffset*/ ctx[11][/*arrowDirection*/ ctx[39]]['y'] + ")");
    			add_location(g, file$4, 137, 10, 3920);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*directionMap, $gridQValues*/ 17301504) {
    				each_value_5 = arrow;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}

    			if (dirty[0] & /*directionOffset*/ 2048 && g_transform_value !== (g_transform_value = "translate(" + /*directionOffset*/ ctx[11][/*arrowDirection*/ ctx[39]]['x'] + ", " + /*directionOffset*/ ctx[11][/*arrowDirection*/ ctx[39]]['y'] + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(137:8) {#each [\\\"up\\\", \\\"down\\\", \\\"left\\\", \\\"right\\\"] as arrowDirection}",
    		ctx
    	});

    	return block;
    }

    // (128:2) {#each $gridQValues as d, i}
    function create_each_block_3(ctx) {
    	let g;
    	let show_if;
    	let g_transform_value;

    	function func(...args) {
    		return /*func*/ ctx[26](/*i*/ ctx[38], ...args);
    	}

    	function select_block_type(ctx, dirty) {
    		if (dirty[0] & /*rewardArray*/ 512) show_if = null;
    		if (show_if == null) show_if = !!/*rewardArray*/ ctx[9].some(func);
    		if (show_if) return create_if_block;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx, [-1, -1]);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if_block.c();
    			attr_dev(g, "transform", g_transform_value = "translate(" + (/*xScale*/ ctx[1](Math.floor(/*i*/ ctx[38] / /*numY*/ ctx[23])) + /*cellWidth*/ ctx[2] / 2) + ", " + (/*yScale*/ ctx[0](/*i*/ ctx[38] % /*numY*/ ctx[23]) + /*cellHeight*/ ctx[12] / 2) + ")");
    			add_location(g, file$4, 129, 4, 3502);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if_block.m(g, null);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(g, null);
    				}
    			}

    			if (dirty[0] & /*xScale, cellWidth, yScale, cellHeight*/ 4103 && g_transform_value !== (g_transform_value = "translate(" + (/*xScale*/ ctx[1](Math.floor(/*i*/ ctx[38] / /*numY*/ ctx[23])) + /*cellWidth*/ ctx[2] / 2) + ", " + (/*yScale*/ ctx[0](/*i*/ ctx[38] % /*numY*/ ctx[23]) + /*cellHeight*/ ctx[12] / 2) + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(128:2) {#each $gridQValues as d, i}",
    		ctx
    	});

    	return block;
    }

    // (176:4) {#each bananaOne as b}
    function create_each_block_2(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "bananaPath svelte-md1ugn");
    			attr_dev(path, "d", /*b*/ ctx[31]);
    			attr_dev(path, "transform", "scale(0.13)");
    			add_location(path, file$4, 176, 6, 5086);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(176:4) {#each bananaOne as b}",
    		ctx
    	});

    	return block;
    }

    // (190:4) {#each bananaThree as b}
    function create_each_block_1(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "bananaPath svelte-md1ugn");
    			attr_dev(path, "d", /*b*/ ctx[31]);
    			set_style(path, "transform", "scale(0.13)");
    			add_location(path, file$4, 190, 6, 5423);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(190:4) {#each bananaThree as b}",
    		ctx
    	});

    	return block;
    }

    // (203:4) {#each cactus as c}
    function create_each_block(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "cactusPath svelte-md1ugn");
    			attr_dev(path, "d", /*c*/ ctx[28]);
    			set_style(path, "transform", "scale(0.13)");
    			add_location(path, file$4, 203, 6, 5758);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(203:4) {#each cactus as c}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let svg;
    	let each0_anchor;
    	let path0;
    	let path0_d_value;
    	let path1;
    	let path1_d_value;
    	let g0;
    	let g0_transform_value;
    	let g1;
    	let g1_transform_value;
    	let g2;
    	let g2_transform_value;
    	let g3;
    	let rect;
    	let path2;
    	let g3_transform_value;
    	let each_value_6 = [...("").padEnd(/*numX*/ ctx[22])].map(func_1);
    	validate_each_argument(each_value_6);
    	let each_blocks_4 = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks_4[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	let each_value_3 = /*$gridQValues*/ ctx[19];
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	let each_value_2 = bananaOne;
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let each_value_1 = bananaThree;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = cactus;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].c();
    			}

    			each0_anchor = empty$1();

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			g0 = svg_element("g");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			g1 = svg_element("g");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			g2 = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			g3 = svg_element("g");
    			rect = svg_element("rect");
    			path2 = svg_element("path");
    			attr_dev(path0, "class", "agent-line-outline svelte-md1ugn");
    			attr_dev(path0, "d", path0_d_value = /*agentLine*/ ctx[10](/*$gridRobotPath*/ ctx[20]));
    			add_location(path0, file$4, 162, 2, 4679);
    			attr_dev(path1, "class", "agent-line svelte-md1ugn");
    			attr_dev(path1, "d", path1_d_value = /*agentLine*/ ctx[10](/*$gridRobotPath*/ ctx[20]));
    			add_location(path1, file$4, 163, 2, 4747);
    			attr_dev(g0, "id", "reward-1");
    			attr_dev(g0, "transform", g0_transform_value = "translate(" + /*xScale*/ ctx[1](/*$lowRewardGrid*/ ctx[6][/*$gridStatIndex*/ ctx[3]][0]) + ", " + (/*yScale*/ ctx[0](/*$lowRewardGrid*/ ctx[6][/*$gridStatIndex*/ ctx[3]][1]) + /*rewardBox*/ ctx[15].height / 2 - 7.5) + ")");
    			add_location(g0, file$4, 167, 2, 4859);
    			attr_dev(g1, "id", "reward-3");
    			attr_dev(g1, "transform", g1_transform_value = "translate(" + /*xScale*/ ctx[1](/*$highRewardGrid*/ ctx[5][/*$gridStatIndex*/ ctx[3]][0]) + ", " + (/*yScale*/ ctx[0](/*$highRewardGrid*/ ctx[5][/*$gridStatIndex*/ ctx[3]][1]) + /*rewardBox3*/ ctx[14].height / 2 - 7.5) + ")");
    			add_location(g1, file$4, 181, 2, 5191);
    			attr_dev(g2, "id", "cactus");
    			attr_dev(g2, "transform", g2_transform_value = "translate(" + (/*xScale*/ ctx[1](/*$negRewardGrid*/ ctx[4][/*$gridStatIndex*/ ctx[3]][0]) + 10) + ", " + (/*yScale*/ ctx[0](/*$negRewardGrid*/ ctx[4][/*$gridStatIndex*/ ctx[3]][1]) + /*cactusBox*/ ctx[13].height / 2 - 12.5) + ")");
    			add_location(g2, file$4, 195, 2, 5536);
    			attr_dev(rect, "class", "agent-rect svelte-md1ugn");
    			attr_dev(rect, "width", /*robotWidth*/ ctx[17]);
    			attr_dev(rect, "height", /*robotHeight*/ ctx[16]);
    			add_location(rect, file$4, 214, 4, 6000);
    			attr_dev(path2, "d", mluRobot);
    			set_style(path2, "transform", "scale(0.1)");
    			attr_dev(path2, "stroke", "white");
    			attr_dev(path2, "stroke-width", "1");
    			attr_dev(path2, "fill", "black");
    			add_location(path2, file$4, 215, 4, 6072);
    			attr_dev(g3, "id", "agent-g");
    			attr_dev(g3, "transform", g3_transform_value = "translate(" + (/*xScale*/ ctx[1](/*$gridRobot*/ ctx[21].x) - /*robotWidth*/ ctx[17] / 2) + ", " + (/*yScale*/ ctx[0](/*$gridRobot*/ ctx[21].y) - /*robotHeight*/ ctx[16] / 2) + ")");
    			add_location(g3, file$4, 207, 2, 5845);
    			attr_dev(svg, "width", /*$gridWidth*/ ctx[8]);
    			attr_dev(svg, "height", /*$gridHeight*/ ctx[7]);
    			attr_dev(svg, "class", "svelte-md1ugn");
    			add_location(svg, file$4, 91, 0, 2459);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].m(svg, null);
    			}

    			append_dev(svg, each0_anchor);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(svg, null);
    			}

    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, g0);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(g0, null);
    			}

    			append_dev(svg, g1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(g1, null);
    			}

    			append_dev(svg, g2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g2, null);
    			}

    			append_dev(svg, g3);
    			append_dev(g3, rect);
    			append_dev(g3, path2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$margin, yScale, numX, $gridWidth, xScale, $gridHeight*/ 4456835) {
    				each_value_6 = [...("").padEnd(/*numX*/ ctx[22])].map(func_1);
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks_4[i]) {
    						each_blocks_4[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_4[i] = create_each_block_6(child_ctx);
    						each_blocks_4[i].c();
    						each_blocks_4[i].m(svg, each0_anchor);
    					}
    				}

    				for (; i < each_blocks_4.length; i += 1) {
    					each_blocks_4[i].d(1);
    				}

    				each_blocks_4.length = each_value_6.length;
    			}

    			if (dirty[0] & /*xScale, numY, cellWidth, yScale, cellHeight, rewardArray, directionOffset, directionMap, $gridQValues*/ 25696775) {
    				each_value_3 = /*$gridQValues*/ ctx[19];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_3(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(svg, path0);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_3.length;
    			}

    			if (dirty[0] & /*agentLine, $gridRobotPath*/ 1049600 && path0_d_value !== (path0_d_value = /*agentLine*/ ctx[10](/*$gridRobotPath*/ ctx[20]))) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (dirty[0] & /*agentLine, $gridRobotPath*/ 1049600 && path1_d_value !== (path1_d_value = /*agentLine*/ ctx[10](/*$gridRobotPath*/ ctx[20]))) {
    				attr_dev(path1, "d", path1_d_value);
    			}

    			if (dirty & /*bananaOne*/ 0) {
    				each_value_2 = bananaOne;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(g0, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty[0] & /*xScale, $lowRewardGrid, $gridStatIndex, yScale, rewardBox*/ 32843 && g0_transform_value !== (g0_transform_value = "translate(" + /*xScale*/ ctx[1](/*$lowRewardGrid*/ ctx[6][/*$gridStatIndex*/ ctx[3]][0]) + ", " + (/*yScale*/ ctx[0](/*$lowRewardGrid*/ ctx[6][/*$gridStatIndex*/ ctx[3]][1]) + /*rewardBox*/ ctx[15].height / 2 - 7.5) + ")")) {
    				attr_dev(g0, "transform", g0_transform_value);
    			}

    			if (dirty & /*bananaThree*/ 0) {
    				each_value_1 = bananaThree;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(g1, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*xScale, $highRewardGrid, $gridStatIndex, yScale, rewardBox3*/ 16427 && g1_transform_value !== (g1_transform_value = "translate(" + /*xScale*/ ctx[1](/*$highRewardGrid*/ ctx[5][/*$gridStatIndex*/ ctx[3]][0]) + ", " + (/*yScale*/ ctx[0](/*$highRewardGrid*/ ctx[5][/*$gridStatIndex*/ ctx[3]][1]) + /*rewardBox3*/ ctx[14].height / 2 - 7.5) + ")")) {
    				attr_dev(g1, "transform", g1_transform_value);
    			}

    			if (dirty & /*cactus*/ 0) {
    				each_value = cactus;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*xScale, $negRewardGrid, $gridStatIndex, yScale, cactusBox*/ 8219 && g2_transform_value !== (g2_transform_value = "translate(" + (/*xScale*/ ctx[1](/*$negRewardGrid*/ ctx[4][/*$gridStatIndex*/ ctx[3]][0]) + 10) + ", " + (/*yScale*/ ctx[0](/*$negRewardGrid*/ ctx[4][/*$gridStatIndex*/ ctx[3]][1]) + /*cactusBox*/ ctx[13].height / 2 - 12.5) + ")")) {
    				attr_dev(g2, "transform", g2_transform_value);
    			}

    			if (dirty[0] & /*robotWidth*/ 131072) {
    				attr_dev(rect, "width", /*robotWidth*/ ctx[17]);
    			}

    			if (dirty[0] & /*robotHeight*/ 65536) {
    				attr_dev(rect, "height", /*robotHeight*/ ctx[16]);
    			}

    			if (dirty[0] & /*xScale, $gridRobot, robotWidth, yScale, robotHeight*/ 2293763 && g3_transform_value !== (g3_transform_value = "translate(" + (/*xScale*/ ctx[1](/*$gridRobot*/ ctx[21].x) - /*robotWidth*/ ctx[17] / 2) + ", " + (/*yScale*/ ctx[0](/*$gridRobot*/ ctx[21].y) - /*robotHeight*/ ctx[16] / 2) + ")")) {
    				attr_dev(g3, "transform", g3_transform_value);
    			}

    			if (dirty[0] & /*$gridWidth*/ 256) {
    				attr_dev(svg, "width", /*$gridWidth*/ ctx[8]);
    			}

    			if (dirty[0] & /*$gridHeight*/ 128) {
    				attr_dev(svg, "height", /*$gridHeight*/ ctx[7]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks_4, detaching);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func_1 = (_, i) => i + 1;

    function instance$5($$self, $$props, $$invalidate) {
    	let robotWidth;
    	let robotHeight;
    	let arrowBox;
    	let rewardBox;
    	let rewardBox3;
    	let cactusBox;
    	let cellWidth;
    	let cellHeight;
    	let directionOffset;
    	let xScale;
    	let yScale;
    	let agentLine;
    	let rewardArray;
    	let $gridStatIndex;
    	let $negRewardGrid;
    	let $highRewardGrid;
    	let $lowRewardGrid;
    	let $gridHeight;
    	let $gridWidth;
    	let $margin;
    	let $gridQValues;
    	let $gridRobotPath;
    	let $gridRobot;
    	validate_store(gridStatIndex, 'gridStatIndex');
    	component_subscribe($$self, gridStatIndex, $$value => $$invalidate(3, $gridStatIndex = $$value));
    	validate_store(negRewardGrid, 'negRewardGrid');
    	component_subscribe($$self, negRewardGrid, $$value => $$invalidate(4, $negRewardGrid = $$value));
    	validate_store(highRewardGrid, 'highRewardGrid');
    	component_subscribe($$self, highRewardGrid, $$value => $$invalidate(5, $highRewardGrid = $$value));
    	validate_store(lowRewardGrid, 'lowRewardGrid');
    	component_subscribe($$self, lowRewardGrid, $$value => $$invalidate(6, $lowRewardGrid = $$value));
    	validate_store(gridHeight, 'gridHeight');
    	component_subscribe($$self, gridHeight, $$value => $$invalidate(7, $gridHeight = $$value));
    	validate_store(gridWidth, 'gridWidth');
    	component_subscribe($$self, gridWidth, $$value => $$invalidate(8, $gridWidth = $$value));
    	validate_store(margin, 'margin');
    	component_subscribe($$self, margin, $$value => $$invalidate(18, $margin = $$value));
    	validate_store(gridQValues, 'gridQValues');
    	component_subscribe($$self, gridQValues, $$value => $$invalidate(19, $gridQValues = $$value));
    	validate_store(gridRobotPath, 'gridRobotPath');
    	component_subscribe($$self, gridRobotPath, $$value => $$invalidate(20, $gridRobotPath = $$value));
    	validate_store(gridRobot, 'gridRobot');
    	component_subscribe($$self, gridRobot, $$value => $$invalidate(21, $gridRobot = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimulationGrid', slots, []);
    	let numX = 4;
    	let numY = 4;

    	onMount(() => {
    		const robotBGSize = select("#agent-g").node().getBoundingClientRect();
    		$$invalidate(17, robotWidth = robotBGSize.width);
    		$$invalidate(16, robotHeight = robotBGSize.height);
    		$$invalidate(15, rewardBox = select("#reward-1").node().getBoundingClientRect());
    		$$invalidate(14, rewardBox3 = select("#reward-3").node().getBoundingClientRect());
    		$$invalidate(13, cactusBox = select("#cactus").node().getBoundingClientRect());
    		$$invalidate(25, arrowBox = select("path.arrow-up").node().getBoundingClientRect());
    	});

    	const directionMap = { up: 180, down: 0, left: 90, right: 270 };
    	let data = [];

    	// make dataset of [{x: 0, y: 0}, {x: 0, y: 1}, ..., {x: 3, y: 3}]
    	for (let xVal = 0; xVal < numX; xVal++) {
    		for (let yVal = 0; yVal < numY; yVal++) {
    			data.push({ x: xVal, y: yVal });
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<SimulationGrid> was created with unknown prop '${key}'`);
    	});

    	const func = (i, r) => r.length == [Math.floor(i / numY), i % numY].length && r.every((value, index) => [Math.floor(i / numY), i % numY][index] == value);

    	$$self.$capture_state = () => ({
    		onMount,
    		extent,
    		scaleLinear: linear,
    		line,
    		curveBasis,
    		select,
    		arrow,
    		mluRobot,
    		bananaOne,
    		bananaThree,
    		cactus,
    		margin,
    		gridWidth,
    		gridHeight,
    		gridRobot,
    		gridRobotPath,
    		gridQValues,
    		lowRewardGrid,
    		highRewardGrid,
    		negRewardGrid,
    		gridStatIndex,
    		numX,
    		numY,
    		directionMap,
    		data,
    		rewardArray,
    		yScale,
    		xScale,
    		agentLine,
    		arrowBox,
    		cellWidth,
    		directionOffset,
    		cellHeight,
    		cactusBox,
    		rewardBox3,
    		rewardBox,
    		robotHeight,
    		robotWidth,
    		$gridStatIndex,
    		$negRewardGrid,
    		$highRewardGrid,
    		$lowRewardGrid,
    		$gridHeight,
    		$gridWidth,
    		$margin,
    		$gridQValues,
    		$gridRobotPath,
    		$gridRobot
    	});

    	$$self.$inject_state = $$props => {
    		if ('numX' in $$props) $$invalidate(22, numX = $$props.numX);
    		if ('numY' in $$props) $$invalidate(23, numY = $$props.numY);
    		if ('data' in $$props) data = $$props.data;
    		if ('rewardArray' in $$props) $$invalidate(9, rewardArray = $$props.rewardArray);
    		if ('yScale' in $$props) $$invalidate(0, yScale = $$props.yScale);
    		if ('xScale' in $$props) $$invalidate(1, xScale = $$props.xScale);
    		if ('agentLine' in $$props) $$invalidate(10, agentLine = $$props.agentLine);
    		if ('arrowBox' in $$props) $$invalidate(25, arrowBox = $$props.arrowBox);
    		if ('cellWidth' in $$props) $$invalidate(2, cellWidth = $$props.cellWidth);
    		if ('directionOffset' in $$props) $$invalidate(11, directionOffset = $$props.directionOffset);
    		if ('cellHeight' in $$props) $$invalidate(12, cellHeight = $$props.cellHeight);
    		if ('cactusBox' in $$props) $$invalidate(13, cactusBox = $$props.cactusBox);
    		if ('rewardBox3' in $$props) $$invalidate(14, rewardBox3 = $$props.rewardBox3);
    		if ('rewardBox' in $$props) $$invalidate(15, rewardBox = $$props.rewardBox);
    		if ('robotHeight' in $$props) $$invalidate(16, robotHeight = $$props.robotHeight);
    		if ('robotWidth' in $$props) $$invalidate(17, robotWidth = $$props.robotWidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$gridWidth*/ 256) {
    			$$invalidate(2, cellWidth = $gridWidth / numX);
    		}

    		if ($$self.$$.dirty[0] & /*$gridHeight*/ 128) {
    			$$invalidate(12, cellHeight = $gridHeight / numY);
    		}

    		if ($$self.$$.dirty[0] & /*arrowBox, cellWidth*/ 33554436) {
    			// const startRobotPointX = $gridRobot.x;
    			// const startRobotPointY = $gridRobot.y;
    			// offset directions for rotated arrows
    			$$invalidate(11, directionOffset = {
    				up: {
    					x: arrowBox.width / 2 + 5,
    					y: -cellWidth / 6
    				},
    				down: {
    					x: -arrowBox.width / 2 - 5,
    					y: cellWidth / 6
    				},
    				right: {
    					x: cellWidth / 6,
    					y: arrowBox.width / 2 + 5
    				},
    				left: {
    					x: -cellWidth / 6,
    					y: -arrowBox.width / 2 - 5
    				}
    			});
    		}

    		if ($$self.$$.dirty[0] & /*$gridWidth*/ 256) {
    			// scales
    			$$invalidate(1, xScale = linear().domain([0, numX]).range([0, $gridWidth]));
    		}

    		if ($$self.$$.dirty[0] & /*$gridHeight*/ 128) {
    			$$invalidate(0, yScale = linear().domain([0, numY]).range([0, $gridHeight]));
    		}

    		if ($$self.$$.dirty[0] & /*xScale, yScale*/ 3) {
    			// line generator
    			$$invalidate(10, agentLine = line().x(d => xScale(d.x)).y(d => yScale(d.y)));
    		}

    		if ($$self.$$.dirty[0] & /*$lowRewardGrid, $gridStatIndex, $highRewardGrid, $negRewardGrid*/ 120) {
    			$$invalidate(9, rewardArray = [
    				$lowRewardGrid[$gridStatIndex],
    				$highRewardGrid[$gridStatIndex],
    				$negRewardGrid[$gridStatIndex]
    			]);
    		}
    	};

    	$$invalidate(17, robotWidth = 20);
    	$$invalidate(16, robotHeight = 20);
    	$$invalidate(25, arrowBox = { height: 0, width: 0, x: 105, y: 0 });
    	$$invalidate(15, rewardBox = { height: 0, width: 0, x: 0, y: 0 });
    	$$invalidate(14, rewardBox3 = { height: 30, width: 0, x: 0, y: 0 });
    	$$invalidate(13, cactusBox = { height: 0, width: 0, x: 0, y: 0 });

    	return [
    		yScale,
    		xScale,
    		cellWidth,
    		$gridStatIndex,
    		$negRewardGrid,
    		$highRewardGrid,
    		$lowRewardGrid,
    		$gridHeight,
    		$gridWidth,
    		rewardArray,
    		agentLine,
    		directionOffset,
    		cellHeight,
    		cactusBox,
    		rewardBox3,
    		rewardBox,
    		robotHeight,
    		robotWidth,
    		$margin,
    		$gridQValues,
    		$gridRobotPath,
    		$gridRobot,
    		numX,
    		numY,
    		directionMap,
    		arrowBox,
    		func
    	];
    }

    class SimulationGrid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimulationGrid",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src/Components/GridWorld.svelte generated by Svelte v3.52.0 */

    const { console: console_1$1 } = globals;
    const file$3 = "src/Components/GridWorld.svelte";

    function create_fragment$4(ctx) {
    	let h2;
    	let t1;
    	let p0;
    	let t3;
    	let br0;
    	let br1;
    	let t4;
    	let p1;
    	let t5;
    	let span0;
    	let t7;
    	let span1;
    	let t9;
    	let t10;
    	let br2;
    	let br3;
    	let t11;
    	let p2;
    	let t13;
    	let section;
    	let div6;
    	let div5;
    	let div4;
    	let div3;
    	let table;
    	let tr0;
    	let th0;
    	let t15;
    	let th1;
    	let t17;
    	let th2;
    	let t19;
    	let th3;
    	let t21;
    	let th4;
    	let t23;
    	let tr1;
    	let td0;
    	let t25;
    	let td1;
    	let t27;
    	let td2;
    	let t29;
    	let td3;
    	let t31;
    	let td4;
    	let t33;
    	let div0;
    	let simulationgrid;
    	let t34;
    	let scattergrid;
    	let t35;
    	let div1;
    	let p3;
    	let t36;
    	let t37;
    	let t38;
    	let input;
    	let t39;
    	let div2;
    	let button0;
    	let t41;
    	let button1;
    	let t43;
    	let button2;
    	let t45;
    	let button3;
    	let t47;
    	let button4;
    	let current;
    	let mounted;
    	let dispose;
    	simulationgrid = new SimulationGrid({ $$inline: true });
    	scattergrid = new ScatterGrid({ $$inline: true });

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Navigating in a Grid World";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "Now the robot is in a commonly used environment in reinforcement learning: the\n  gridworld. The robot can now move left, right, up, and down. Again, the\n  robot’s actions affect the environment by changing its state in the grid.";
    			t3 = space();
    			br0 = element("br");
    			br1 = element("br");
    			t4 = space();
    			p1 = element("p");
    			t5 = text("There is an obstacle in the gridworld: a ");
    			span0 = element("span");
    			span0.textContent = "cactus";
    			t7 = text(". If\n  the robot steps onto the cactus, it will receive a\n  ");
    			span1 = element("span");
    			span1.textContent = "negative reward";
    			t9 = text(" and will result in the termination of\n  the episode. Therefore, the robot should learn to avoid the cactus. Instead of\n  learning to move left or right as in the line world, now the robot must learn the\n  path to take.");
    			t10 = space();
    			br2 = element("br");
    			br3 = element("br");
    			t11 = space();
    			p2 = element("p");
    			p2.textContent = "See for yourself how increasing epsilon can change the robot's behavior in\n  this 2-dimensional environment.";
    			t13 = space();
    			section = element("section");
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			table = element("table");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Agent";
    			t15 = space();
    			th1 = element("th");
    			th1.textContent = "Environment";
    			t17 = space();
    			th2 = element("th");
    			th2.textContent = "State";
    			t19 = space();
    			th3 = element("th");
    			th3.textContent = "Actions";
    			t21 = space();
    			th4 = element("th");
    			th4.textContent = "Reward";
    			t23 = space();
    			tr1 = element("tr");
    			td0 = element("td");
    			td0.textContent = "Robot";
    			t25 = space();
    			td1 = element("td");
    			td1.textContent = "Grid World";
    			t27 = space();
    			td2 = element("td");
    			td2.textContent = "X,Y-Position";
    			t29 = space();
    			td3 = element("td");
    			td3.textContent = "Move Left, Move Right, Move Up, Move Down";
    			t31 = space();
    			td4 = element("td");
    			td4.textContent = "Number of Bananas, Cactus";
    			t33 = space();
    			div0 = element("div");
    			create_component(simulationgrid.$$.fragment);
    			t34 = space();
    			create_component(scattergrid.$$.fragment);
    			t35 = space();
    			div1 = element("div");
    			p3 = element("p");
    			t36 = text("Epsilon: ");
    			t37 = text(/*$gridEpsilon*/ ctx[1]);
    			t38 = space();
    			input = element("input");
    			t39 = space();
    			div2 = element("div");
    			button0 = element("button");
    			button0.textContent = "Current Route";
    			t41 = space();
    			button1 = element("button");
    			button1.textContent = "Run 25 Episodes";
    			t43 = space();
    			button2 = element("button");
    			button2.textContent = "Run 150 Episodes";
    			t45 = space();
    			button3 = element("button");
    			button3.textContent = "Optimal Solution";
    			t47 = space();
    			button4 = element("button");
    			button4.textContent = "Reset";
    			attr_dev(h2, "class", "body-secondary-header");
    			add_location(h2, file$3, 570, 0, 13885);
    			attr_dev(p0, "class", "body-text");
    			add_location(p0, file$3, 572, 0, 13952);
    			add_location(br0, file$3, 577, 0, 14210);
    			add_location(br1, file$3, 577, 6, 14216);
    			attr_dev(span0, "class", "bold");
    			add_location(span0, file$3, 579, 43, 14288);
    			attr_dev(span1, "class", "bold");
    			add_location(span1, file$3, 581, 2, 14380);
    			attr_dev(p1, "class", "body-text");
    			add_location(p1, file$3, 578, 0, 14223);
    			add_location(br2, file$3, 586, 0, 14646);
    			add_location(br3, file$3, 586, 6, 14652);
    			attr_dev(p2, "class", "body-text");
    			add_location(p2, file$3, 587, 0, 14659);
    			attr_dev(th0, "class", "table-head svelte-oc1shd");
    			add_location(th0, file$3, 599, 14, 14983);
    			attr_dev(th1, "class", "table-head svelte-oc1shd");
    			add_location(th1, file$3, 600, 14, 15031);
    			attr_dev(th2, "class", "table-head svelte-oc1shd");
    			add_location(th2, file$3, 601, 14, 15085);
    			attr_dev(th3, "class", "table-head svelte-oc1shd");
    			add_location(th3, file$3, 602, 14, 15133);
    			attr_dev(th4, "class", "table-head svelte-oc1shd");
    			add_location(th4, file$3, 603, 14, 15183);
    			add_location(tr0, file$3, 598, 12, 14964);
    			attr_dev(td0, "class", "svelte-oc1shd");
    			add_location(td0, file$3, 606, 14, 15267);
    			attr_dev(td1, "class", "svelte-oc1shd");
    			add_location(td1, file$3, 607, 14, 15296);
    			attr_dev(td2, "class", "svelte-oc1shd");
    			add_location(td2, file$3, 608, 14, 15330);
    			attr_dev(td3, "class", "svelte-oc1shd");
    			add_location(td3, file$3, 609, 14, 15366);
    			attr_dev(td4, "class", "svelte-oc1shd");
    			add_location(td4, file$3, 610, 14, 15431);
    			add_location(tr1, file$3, 605, 12, 15248);
    			attr_dev(table, "class", "svelte-oc1shd");
    			add_location(table, file$3, 597, 10, 14944);
    			attr_dev(div0, "id", "graph-container");
    			attr_dev(div0, "class", "svelte-oc1shd");
    			add_location(div0, file$3, 614, 10, 15514);
    			add_location(p3, file$3, 621, 12, 15701);
    			attr_dev(input, "type", "range");
    			attr_dev(input, "min", "0.0");
    			attr_dev(input, "max", "1.0");
    			attr_dev(input, "step", "0.1");
    			attr_dev(input, "maxlength", "20");
    			attr_dev(input, "class", "slider");
    			attr_dev(input, "id", "epsilonslider");
    			add_location(input, file$3, 622, 12, 15744);
    			attr_dev(div1, "id", "input-container");
    			add_location(div1, file$3, 620, 10, 15662);
    			attr_dev(button0, "class", "svelte-oc1shd");
    			add_location(button0, file$3, 636, 12, 16117);
    			attr_dev(button1, "class", "svelte-oc1shd");
    			add_location(button1, file$3, 637, 12, 16195);
    			attr_dev(button2, "class", "svelte-oc1shd");
    			add_location(button2, file$3, 640, 12, 16320);
    			attr_dev(button3, "class", "svelte-oc1shd");
    			add_location(button3, file$3, 643, 12, 16447);
    			attr_dev(button4, "class", "svelte-oc1shd");
    			add_location(button4, file$3, 645, 12, 16542);
    			attr_dev(div2, "id", "buttons-container");
    			attr_dev(div2, "class", "svelte-oc1shd");
    			add_location(div2, file$3, 635, 10, 16076);
    			add_location(div3, file$3, 596, 8, 14928);
    			attr_dev(div4, "class", "chart-one svelte-oc1shd");
    			add_location(div4, file$3, 595, 6, 14896);
    			attr_dev(div5, "class", "charts-container svelte-oc1shd");
    			add_location(div5, file$3, 594, 4, 14859);
    			attr_dev(div6, "class", "scrolly-container svelte-oc1shd");
    			add_location(div6, file$3, 593, 2, 14823);
    			attr_dev(section, "id", "scrolly");
    			attr_dev(section, "class", "svelte-oc1shd");
    			add_location(section, file$3, 592, 0, 14798);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, br0, anchor);
    			insert_dev(target, br1, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t5);
    			append_dev(p1, span0);
    			append_dev(p1, t7);
    			append_dev(p1, span1);
    			append_dev(p1, t9);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, br2, anchor);
    			insert_dev(target, br3, anchor);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, p2, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, section, anchor);
    			append_dev(section, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, table);
    			append_dev(table, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t15);
    			append_dev(tr0, th1);
    			append_dev(tr0, t17);
    			append_dev(tr0, th2);
    			append_dev(tr0, t19);
    			append_dev(tr0, th3);
    			append_dev(tr0, t21);
    			append_dev(tr0, th4);
    			append_dev(table, t23);
    			append_dev(table, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t25);
    			append_dev(tr1, td1);
    			append_dev(tr1, t27);
    			append_dev(tr1, td2);
    			append_dev(tr1, t29);
    			append_dev(tr1, td3);
    			append_dev(tr1, t31);
    			append_dev(tr1, td4);
    			append_dev(div3, t33);
    			append_dev(div3, div0);
    			mount_component(simulationgrid, div0, null);
    			append_dev(div0, t34);
    			mount_component(scattergrid, div0, null);
    			append_dev(div3, t35);
    			append_dev(div3, div1);
    			append_dev(div1, p3);
    			append_dev(p3, t36);
    			append_dev(p3, t37);
    			append_dev(div1, t38);
    			append_dev(div1, input);
    			set_input_value(input, /*$gridEpsilon*/ ctx[1]);
    			append_dev(div3, t39);
    			append_dev(div3, div2);
    			append_dev(div2, button0);
    			append_dev(div2, t41);
    			append_dev(div2, button1);
    			append_dev(div2, t43);
    			append_dev(div2, button2);
    			append_dev(div2, t45);
    			append_dev(div2, button3);
    			append_dev(div2, t47);
    			append_dev(div2, button4);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_input_handler*/ ctx[6]),
    					listen_dev(input, "input", /*input_change_input_handler*/ ctx[6]),
    					listen_dev(input, "input", /*input_handler*/ ctx[7], false, false, false),
    					listen_dev(button0, "click", /*click_handler*/ ctx[8], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[9], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[10], false, false, false),
    					listen_dev(button3, "click", /*click_handler_3*/ ctx[11], false, false, false),
    					listen_dev(button4, "click", /*click_handler_4*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*$gridEpsilon*/ 2) set_data_dev(t37, /*$gridEpsilon*/ ctx[1]);

    			if (dirty[0] & /*$gridEpsilon*/ 2) {
    				set_input_value(input, /*$gridEpsilon*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(simulationgrid.$$.fragment, local);
    			transition_in(scattergrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(simulationgrid.$$.fragment, local);
    			transition_out(scattergrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(br0);
    			if (detaching) detach_dev(br1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(br2);
    			if (detaching) detach_dev(br3);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(section);
    			destroy_component(simulationgrid);
    			destroy_component(scattergrid);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const numCells = 4;
    const numY = 4;
    const maxEpisodes = 3000; // Limit how many episodes can be run

    // Finds the index of the maximum
    function argMax(array) {
    	return array.map((x, i) => [x, i]).reduce((r, a) => a[0] > r[0] ? a : r)[1];
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $gridQValues;
    	let $negRewardGrid;
    	let $lowRewardGrid;
    	let $highRewardGrid;
    	let $startPosGrid;
    	let $gridEpsilon;
    	let $gridRobotPath;
    	let $gridRecordInterval;
    	validate_store(gridQValues, 'gridQValues');
    	component_subscribe($$self, gridQValues, $$value => $$invalidate(20, $gridQValues = $$value));
    	validate_store(negRewardGrid, 'negRewardGrid');
    	component_subscribe($$self, negRewardGrid, $$value => $$invalidate(21, $negRewardGrid = $$value));
    	validate_store(lowRewardGrid, 'lowRewardGrid');
    	component_subscribe($$self, lowRewardGrid, $$value => $$invalidate(22, $lowRewardGrid = $$value));
    	validate_store(highRewardGrid, 'highRewardGrid');
    	component_subscribe($$self, highRewardGrid, $$value => $$invalidate(23, $highRewardGrid = $$value));
    	validate_store(startPosGrid, 'startPosGrid');
    	component_subscribe($$self, startPosGrid, $$value => $$invalidate(24, $startPosGrid = $$value));
    	validate_store(gridEpsilon, 'gridEpsilon');
    	component_subscribe($$self, gridEpsilon, $$value => $$invalidate(1, $gridEpsilon = $$value));
    	validate_store(gridRobotPath, 'gridRobotPath');
    	component_subscribe($$self, gridRobotPath, $$value => $$invalidate(25, $gridRobotPath = $$value));
    	validate_store(gridRecordInterval, 'gridRecordInterval');
    	component_subscribe($$self, gridRecordInterval, $$value => $$invalidate(26, $gridRecordInterval = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('GridWorld', slots, []);
    	const numX = numCells;
    	let width;
    	let height;
    	var xVal;
    	var yVal;

    	// xVal = $gridRobotPath[0]["x"];
    	// yVal = $gridRobotPath[0]["y"];
    	const actions = ["up", "down", "left", "right"];

    	// Episodic Q Values retrieved from simulation
    	var episodicValues = Array();

    	// Keep records at intervals.
    	var episodeCount = 0;

    	var episodeIntervalArray = [];

    	// Define the starting position
    	var startX = 0.5;

    	var startY = 0.5;

    	//  Define the environment
    	var env = new Env();

    	// Define the agent
    	var gridAgent = new Agent(env.rows, env.columns, env.wins, env.losses); // for plotting
    	// for plotting

    	// Set the env arrangement index
    	var randomIndex = 0;

    	// Start with a reset
    	reset();

    	// Run episodic trials and update Q-values
    	function runAgentTrials(numEpisodes, episodicValues) {
    		// Reduce the burden
    		if (episodeCount > maxEpisodes) {
    			return;
    		}

    		let trialStats = gridAgent.runEpisodes(env, numEpisodes);

    		for (let ep = 0; ep < numEpisodes; ep++) {
    			if (episodeCount % $gridRecordInterval == $gridRecordInterval - 1) {
    				episodicValues.push(trialStats[ep]);
    				episodeIntervalArray.push(episodeCount + 1);
    			}

    			episodeCount++;
    		}

    		// Update gridQValues
    		updateGridQVals();

    		// Reset robot position to starting position
    		gridRobot.set({ x: startX, y: startY });

    		gridRobotPath.set([{ x: startX, y: startY }]);

    		// Reset episodicValues once gridQValues are updated
    		episodicValues = Array();
    	}

    	function simulateEpisode(maxSteps = 15) {
    		// Reset the robot to the starting position
    		gridRobot.set({ x: startX, y: startY });

    		gridRobotPath.set([{ x: startX, y: startY }]);

    		// Variables to keep track of robot
    		let currX = startX - 0.5;

    		let currY = startY - 0.5;
    		let nextX;
    		let nextY;

    		for (let i = 0; i < maxSteps; i++) {
    			if ([currY, currX] in env.wins || [currY, currX] in env.losses) {
    				break;
    			}

    			let index = currY + numX * currX;
    			let state = $gridQValues[index];

    			// Set default maxDirection incase Q values aren't learnt
    			var maxDirection = "up";

    			if (state["maxDirection"].length) {
    				maxDirection = state["maxDirection"][state["maxDirection"].length - 1];
    			}

    			// Take action in direction of highest Q-value
    			if (maxDirection == "up") {
    				nextX = currX;
    				nextY = currY - 1;
    			} else {
    				if (maxDirection == "down") {
    					nextX = currX;
    					nextY = currY + 1;
    				} else {
    					if (maxDirection == "left") {
    						nextX = currX - 1;
    						nextY = currY;
    					} else {
    						nextX = currX + 1;
    						nextY = currY;
    					}
    				}
    			}

    			// Check validity of the transition
    			if (nextX >= 0 && nextX <= env.rows - 1) {
    				if (nextY >= 0 && nextY <= env.columns - 1) {
    					currX = nextX;
    					currY = nextY;
    				}
    			}

    			gridRobot.set({ x: currX + 0.5, y: currY + 0.5 });
    			const newRobotPath = [...$gridRobotPath, { x: currX + 0.5, y: currY + 0.5 }];
    			gridRobotPath.set(newRobotPath);
    		}
    	}

    	// Generate optimal policy regardless of the epsilon value
    	function getOptimalPolicy() {
    		reset(true, false);
    		runAgentTrials(maxEpisodes, episodicValues);
    	}

    	function reset(forOptimal = false, resetPosition = true) {
    		// Reset episode count
    		episodeCount = 0;

    		episodeIntervalArray = [];
    		var epsilon = forOptimal ? 0.7 : $gridEpsilon; // Produce optimal policy even when epsilon is too low

    		// Randomly select environment stats only when reset button is clicked.
    		if (resetPosition) {
    			randomIndex = Math.floor(Math.random() * $startPosGrid.length);
    		}

    		gridStatIndex.set(randomIndex);

    		// Set starting position
    		startX = $startPosGrid[randomIndex][0] + 0.5;

    		startY = $startPosGrid[randomIndex][1] + 0.5;

    		// Set the agent's starting position
    		gridRobot.set({ x: startX, y: startY });

    		// Set the wins and losses stats
    		var wins = {};

    		wins[[$highRewardGrid[randomIndex][1], $highRewardGrid[randomIndex][0]]] = 10;
    		wins[[$lowRewardGrid[randomIndex][1], $lowRewardGrid[randomIndex][0]]] = 2;
    		var losses = {};
    		losses[[$negRewardGrid[randomIndex][1], $negRewardGrid[randomIndex][0]]] = -5;

    		//  Define the environment
    		env = new Env([startY - 0.5, startX - 0.5], numY, numX, wins, losses, {}, true, true, 0.0); // start
    		// rows
    		// columns
    		// Map of states and the corresponding reward
    		// Map of states and the corresponding reward
    		// deterministic: Stochastic env not implemented yet
    		// exploring_starts: Initializa agent at a random state in subsequent episodes.
    		// exploring_starts_prob: Probability of selecting a random initial state instead of specified one

    		// set lambda to 0 for TD(0) update and lamdba to 1 for MC
    		gridAgent = new Agent(env.rows, env.columns, env.wins, env.losses, "q-learning", epsilon, 0.1, 0.8, 0.5); // for plotting
    		// for plotting
    		// 'q-learning' or 'sarsa'
    		// Control exploration
    		// Learning rate
    		// Discount factor
    		// Decay parameter for eligibility trace

    		gridRobot.set({ x: startX, y: startY });

    		// Reset GridAgent stats
    		gridAgent.resetQValues();

    		gridAgent.resetTraceMatrix();
    		gridRobotPath.set([{ x: startX, y: startY }]);

    		gridQValues.set([
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			},
    			{
    				episodeNumber: [0],
    				up: [0],
    				down: [0],
    				left: [0],
    				right: [0],
    				maxDirection: [],
    				upWeight: [0],
    				downWeight: [0],
    				leftWeight: [0],
    				rightWeight: [0]
    			}
    		]);

    		// Reset episodicValues
    		$$invalidate(0, episodicValues = Array());

    		// Update gridQValues (not needed)
    		updateGridQVals();
    	}

    	function updateGridQVals() {
    		if (episodicValues.length == 0) {
    			return;
    		}

    		// Maintain index to update the episodic count
    		var episodeIntervalArrayIndex = episodeIntervalArray.length - episodicValues.length;

    		for (let ep = 0; ep < episodicValues.length; ep++) {
    			// Mapping combination of row and col onto row of gridQvalues
    			// state is row in gridQValues
    			// (0,0), (1,0), (2,0), (3,0)
    			// (0,1), (1,1), (2,1), (3,1)
    			// (0,2), (1,2), (2,2), (3,2)
    			// (0,3), (1,3), (2,3), (3,3)
    			const newVals = $gridQValues.map((state, index) => {
    				const r = index % numY;
    				const c = Math.floor(index / numY);
    				const upVal = episodicValues[ep][r][c][0];
    				const downVal = episodicValues[ep][r][c][1];
    				const leftVal = episodicValues[ep][r][c][2];
    				const rightVal = episodicValues[ep][r][c][3];
    				const allVals = [upVal, downVal, leftVal, rightVal];
    				const maxIndex = argMax(allVals);
    				let maxDir;

    				if (maxIndex == 0) {
    					maxDir = "up";
    				} else if (maxIndex == 1) {
    					maxDir = "down";
    				} else if (maxIndex == 2) {
    					maxDir = "left";
    				} else if (maxIndex == 3) {
    					maxDir = "right";
    				}

    				const valSum = Math.abs(upVal) + Math.abs(downVal) + Math.abs(leftVal) + Math.abs(rightVal);

    				const vals = {
    					episodeNumber: [
    						...state["episodeNumber"],
    						episodeIntervalArray[episodeIntervalArrayIndex + ep]
    					],
    					up: [...state["up"], upVal],
    					down: [...state["down"], downVal],
    					left: [...state["left"], leftVal],
    					right: [...state["right"], rightVal],
    					maxDirection: [...state["maxDirection"], maxDir],
    					upWeight: [...state["upWeight"], upVal / valSum || 0],
    					downWeight: [...state["downWeight"], downVal / valSum || 0],
    					leftWeight: [...state["leftWeight"], leftVal / valSum || 0],
    					rightWeight: [...state["rightWeight"], rightVal / valSum || 0]
    				};

    				return vals;
    			});

    			set_store_value(gridQValues, $gridQValues = [...newVals], $gridQValues);
    		}

    		// Reset episodicValues
    		$$invalidate(0, episodicValues = Array());

    		console.log($gridQValues);
    	}

    	// let sections;
    	const target2event = {
    		0: () => {
    			console.log("step");
    		},
    		1: () => {
    			console.log("step");
    		},
    		2: () => {
    			console.log("step");
    		},
    		3: () => {
    			console.log("step");
    		},
    		4: () => {
    			console.log("step");
    		},
    		5: () => {
    			
    		}
    	};

    	function fireEvent(entryIndex) {
    		if (entryIndex in target2event) {
    			target2event[entryIndex]();
    		}
    	}

    	onMount(() => {
    		// store elements to track
    		let sections = selectAll(".step-gridworld").nodes();

    		// observe elements to track
    		sections.forEach(section => {
    			observer.observe(section);
    		});
    	});

    	// options for intersection observer
    	const options = { threshold: 0.7 };

    	let observer = new IntersectionObserver(entries => {
    			entries.forEach(entry => {
    				// check if visible or not
    				if (entry.isIntersecting) {
    					// resolve stage in graph
    					const entryIndex = entry.target.getAttribute("data-index");

    					if (entryIndex in target2event) {
    						fireEvent(entryIndex);
    					}
    				}
    			});
    		},
    	options);

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<GridWorld> was created with unknown prop '${key}'`);
    	});

    	function input_change_input_handler() {
    		$gridEpsilon = to_number(this.value);
    		gridEpsilon.set($gridEpsilon);
    	}

    	const input_handler = () => reset(false, false);
    	const click_handler = () => simulateEpisode();
    	const click_handler_1 = () => runAgentTrials(25, episodicValues);
    	const click_handler_2 = () => runAgentTrials(150, episodicValues);
    	const click_handler_3 = () => getOptimalPolicy();
    	const click_handler_4 = () => reset();

    	$$self.$capture_state = () => ({
    		ScatterGrid,
    		SimulationGrid,
    		gridRobot,
    		gridRobotPath,
    		gridEpsilon,
    		gridQValues,
    		lowRewardGrid,
    		highRewardGrid,
    		negRewardGrid,
    		startPosGrid,
    		gridStatIndex,
    		gridRecordInterval,
    		Env,
    		Agent,
    		onMount,
    		select,
    		selectAll,
    		argMax,
    		numCells,
    		numX,
    		numY,
    		width,
    		height,
    		xVal,
    		yVal,
    		actions,
    		episodicValues,
    		episodeCount,
    		episodeIntervalArray,
    		maxEpisodes,
    		startX,
    		startY,
    		env,
    		gridAgent,
    		randomIndex,
    		runAgentTrials,
    		simulateEpisode,
    		getOptimalPolicy,
    		reset,
    		updateGridQVals,
    		target2event,
    		fireEvent,
    		options,
    		observer,
    		$gridQValues,
    		$negRewardGrid,
    		$lowRewardGrid,
    		$highRewardGrid,
    		$startPosGrid,
    		$gridEpsilon,
    		$gridRobotPath,
    		$gridRecordInterval
    	});

    	$$self.$inject_state = $$props => {
    		if ('width' in $$props) width = $$props.width;
    		if ('height' in $$props) height = $$props.height;
    		if ('xVal' in $$props) xVal = $$props.xVal;
    		if ('yVal' in $$props) yVal = $$props.yVal;
    		if ('episodicValues' in $$props) $$invalidate(0, episodicValues = $$props.episodicValues);
    		if ('episodeCount' in $$props) episodeCount = $$props.episodeCount;
    		if ('episodeIntervalArray' in $$props) episodeIntervalArray = $$props.episodeIntervalArray;
    		if ('startX' in $$props) startX = $$props.startX;
    		if ('startY' in $$props) startY = $$props.startY;
    		if ('env' in $$props) env = $$props.env;
    		if ('gridAgent' in $$props) gridAgent = $$props.gridAgent;
    		if ('randomIndex' in $$props) randomIndex = $$props.randomIndex;
    		if ('observer' in $$props) observer = $$props.observer;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		episodicValues,
    		$gridEpsilon,
    		runAgentTrials,
    		simulateEpisode,
    		getOptimalPolicy,
    		reset,
    		input_change_input_handler,
    		input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4
    	];
    }

    class GridWorld extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "GridWorld",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/Components/Simulation.svelte generated by Svelte v3.52.0 */
    const file$2 = "src/Components/Simulation.svelte";

    function create_fragment$3(ctx) {
    	let h1;
    	let t1;
    	let p;
    	let t3;
    	let bandit;
    	let t4;
    	let lineworld;
    	let t5;
    	let gridworld;
    	let current;
    	bandit = new Bandit({ $$inline: true });
    	lineworld = new LineWorld({ $$inline: true });
    	gridworld = new GridWorld({ $$inline: true });

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Simulation";
    			t1 = space();
    			p = element("p");
    			p.textContent = "Let’s see reinforcement learning in action! We’ll walk through a scenario with\n  a robot learning to find bananas.";
    			t3 = space();
    			create_component(bandit.$$.fragment);
    			t4 = space();
    			create_component(lineworld.$$.fragment);
    			t5 = space();
    			create_component(gridworld.$$.fragment);
    			attr_dev(h1, "class", "body-header");
    			add_location(h1, file$2, 6, 0, 152);
    			attr_dev(p, "class", "body-text");
    			add_location(p, file$2, 8, 0, 193);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(bandit, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(lineworld, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(gridworld, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bandit.$$.fragment, local);
    			transition_in(lineworld.$$.fragment, local);
    			transition_in(gridworld.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bandit.$$.fragment, local);
    			transition_out(lineworld.$$.fragment, local);
    			transition_out(gridworld.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t3);
    			destroy_component(bandit, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(lineworld, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(gridworld, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Simulation', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Simulation> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Bandit, LineWorld, GridWorld });
    	return [];
    }

    class Simulation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Simulation",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src/Components/Conclusion.svelte generated by Svelte v3.52.0 */

    const file$1 = "src/Components/Conclusion.svelte";

    function create_fragment$2(ctx) {
    	let h1;
    	let t1;
    	let p0;
    	let t3;
    	let br0;
    	let t4;
    	let p1;
    	let t5;
    	let br1;
    	let br2;
    	let t6;
    	let a0;
    	let t8;
    	let a1;
    	let t10;
    	let a2;
    	let t12;
    	let a3;
    	let t14;
    	let a4;
    	let t16;
    	let a5;
    	let t18;
    	let a6;
    	let t20;
    	let a7;
    	let t22;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Conclusion";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "In this article, we introduced some of the major concepts in reinforcement\n  learning. We demonstrated how an agent learns from taking actions and\n  observing rewards in a multi-armed bandit problem, as well as when navigating\n  in multi-dimensional environments.";
    			t3 = space();
    			br0 = element("br");
    			t4 = space();
    			p1 = element("p");
    			t5 = text("Thanks for reading. We hope that the article is insightful no matter where you\n  are along your Machine Learning journey, and that you came away with a better\n  understanding of some of the difficulties of evaluating classification models.\n  ");
    			br1 = element("br");
    			br2 = element("br");
    			t6 = text("\n  To learn more about Machine Learning, check out our\n  ");
    			a0 = element("a");
    			a0.textContent = "self-paced courses";
    			t8 = text(", our\n  ");
    			a1 = element("a");
    			a1.textContent = "YouTube videos";
    			t10 = text(", and the\n  ");
    			a2 = element("a");
    			a2.textContent = "Dive into Deep Learning";
    			t12 = text("\n  textbook. If you have any comments or ideas related to\n  ");
    			a3 = element("a");
    			a3.textContent = "MLU-Explain articles";
    			t14 = text(", feel free to reach out\n  ");
    			a4 = element("a");
    			a4.textContent = "directly";
    			t16 = text(". The code for\n  this article is available\n  ");
    			a5 = element("a");
    			a5.textContent = "here";
    			t18 = text(". Banana icons provided by leo-graph.com from\n  ");
    			a6 = element("a");
    			a6.textContent = "Noun Project";
    			t20 = text(". Cactus icon provided by anam from \n  ");
    			a7 = element("a");
    			a7.textContent = "Noun Project";
    			t22 = text(".");
    			attr_dev(h1, "class", "body-header");
    			add_location(h1, file$1, 2, 0, 19);
    			attr_dev(p0, "class", "body-text");
    			add_location(p0, file$1, 3, 0, 59);
    			add_location(br0, file$1, 9, 0, 352);
    			add_location(br1, file$1, 14, 2, 625);
    			add_location(br2, file$1, 14, 8, 631);
    			attr_dev(a0, "class", "on-end");
    			attr_dev(a0, "href", "https://aws.amazon.com/machine-learning/mlu/");
    			add_location(a0, file$1, 16, 2, 694);
    			attr_dev(a1, "class", "on-end");
    			attr_dev(a1, "href", "https://www.youtube.com/channel/UC12LqyqTQYbXatYS9AA7Nuw");
    			add_location(a1, file$1, 19, 2, 802);
    			attr_dev(a2, "class", "on-end");
    			attr_dev(a2, "href", "https://d2l.ai/");
    			add_location(a2, file$1, 24, 2, 930);
    			attr_dev(a3, "class", "on-end");
    			attr_dev(a3, "href", "https://mlu-explain.github.io/");
    			add_location(a3, file$1, 26, 2, 1058);
    			attr_dev(a4, "class", "on-end");
    			attr_dev(a4, "href", "https://twitter.com/jdwlbr");
    			add_location(a4, file$1, 29, 2, 1173);
    			attr_dev(a5, "class", "on-end");
    			attr_dev(a5, "href", "https://github.com/aws-samples/aws-mlu-explain");
    			add_location(a5, file$1, 31, 2, 1282);
    			attr_dev(a6, "href", "https://thenounproject.com/browse/icons/term/bananas/");
    			attr_dev(a6, "target", "_blank");
    			attr_dev(a6, "title", "Bananas Icons");
    			add_location(a6, file$1, 34, 2, 1418);
    			attr_dev(a7, "href", "https://thenounproject.com/icon/cactus-1466024/");
    			attr_dev(a7, "target", "_blank");
    			attr_dev(a7, "title", "Cactus Icon");
    			add_location(a7, file$1, 39, 2, 1590);
    			attr_dev(p1, "class", "body-text");
    			add_location(p1, file$1, 10, 0, 359);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, br0, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t5);
    			append_dev(p1, br1);
    			append_dev(p1, br2);
    			append_dev(p1, t6);
    			append_dev(p1, a0);
    			append_dev(p1, t8);
    			append_dev(p1, a1);
    			append_dev(p1, t10);
    			append_dev(p1, a2);
    			append_dev(p1, t12);
    			append_dev(p1, a3);
    			append_dev(p1, t14);
    			append_dev(p1, a4);
    			append_dev(p1, t16);
    			append_dev(p1, a5);
    			append_dev(p1, t18);
    			append_dev(p1, a6);
    			append_dev(p1, t20);
    			append_dev(p1, a7);
    			append_dev(p1, t22);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(br0);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(p1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Conclusion', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Conclusion> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Conclusion extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Conclusion",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/Components/Resources.svelte generated by Svelte v3.52.0 */

    const file = "src/Components/Resources.svelte";

    function create_fragment$1(ctx) {
    	let br0;
    	let t0;
    	let br1;
    	let t1;
    	let br2;
    	let t2;
    	let section;
    	let br3;
    	let t3;
    	let h3;
    	let t5;
    	let p0;
    	let t7;
    	let br4;
    	let t8;
    	let p1;
    	let a0;
    	let br5;
    	let t10;
    	let t11;
    	let p2;
    	let a1;
    	let br6;
    	let t13;
    	let t14;
    	let p3;
    	let a2;
    	let t16;
    	let br7;
    	let t17;
    	let t18;
    	let p4;
    	let a3;
    	let br8;
    	let t20;
    	let t21;
    	let br9;
    	let t22;
    	let br10;
    	let t23;
    	let br11;

    	const block = {
    		c: function create() {
    			br0 = element("br");
    			t0 = space();
    			br1 = element("br");
    			t1 = space();
    			br2 = element("br");
    			t2 = space();
    			section = element("section");
    			br3 = element("br");
    			t3 = space();
    			h3 = element("h3");
    			h3.textContent = "References + Open Source";
    			t5 = space();
    			p0 = element("p");
    			p0.textContent = "This article is a product of the following resources + the awesome people\n    who made (and contributed to) them:";
    			t7 = space();
    			br4 = element("br");
    			t8 = space();
    			p1 = element("p");
    			a0 = element("a");
    			a0.textContent = "Reinforcement Learning: An Introduction";
    			br5 = element("br");
    			t10 = text("(Richard Sutton & Andrew Barto, 2018)");
    			t11 = space();
    			p2 = element("p");
    			a1 = element("a");
    			a1.textContent = "D3.js";
    			br6 = element("br");
    			t13 = text("(Mike Bostock &\n    Philippe Rivière)");
    			t14 = space();
    			p3 = element("p");
    			a2 = element("a");
    			a2.textContent = "KaTeX";
    			t16 = space();
    			br7 = element("br");
    			t17 = text("(Emily Eisenberg\n    & Sophie Alpert)");
    			t18 = space();
    			p4 = element("p");
    			a3 = element("a");
    			a3.textContent = "Svelte";
    			br8 = element("br");
    			t20 = text("(Rich Harris)");
    			t21 = space();
    			br9 = element("br");
    			t22 = space();
    			br10 = element("br");
    			t23 = space();
    			br11 = element("br");
    			add_location(br0, file, 3, 0, 33);
    			add_location(br1, file, 4, 0, 40);
    			add_location(br2, file, 5, 0, 47);
    			add_location(br3, file, 7, 2, 81);
    			attr_dev(h3, "class", "body-header");
    			add_location(h3, file, 8, 2, 90);
    			attr_dev(p0, "class", "body-text svelte-geidpz");
    			add_location(p0, file, 9, 2, 146);
    			add_location(br4, file, 13, 2, 295);
    			attr_dev(a0, "class", "on-end svelte-geidpz");
    			attr_dev(a0, "href", "http://incompleteideas.net/book/the-book.html");
    			add_location(a0, file, 15, 4, 334);
    			add_location(br5, file, 17, 5, 460);
    			attr_dev(p1, "class", "resource-item svelte-geidpz");
    			add_location(p1, file, 14, 2, 304);
    			attr_dev(a1, "class", "on-end svelte-geidpz");
    			attr_dev(a1, "href", "https://d3js.org/");
    			add_location(a1, file, 20, 4, 543);
    			add_location(br6, file, 20, 56, 595);
    			attr_dev(p2, "class", "resource-item svelte-geidpz");
    			add_location(p2, file, 19, 2, 513);
    			attr_dev(a2, "class", "on-end svelte-geidpz");
    			attr_dev(a2, "href", "https://katex.org/");
    			add_location(a2, file, 24, 4, 678);
    			add_location(br7, file, 24, 58, 732);
    			attr_dev(p3, "class", "resource-item svelte-geidpz");
    			add_location(p3, file, 23, 2, 648);
    			attr_dev(a3, "class", "on-end svelte-geidpz");
    			attr_dev(a3, "href", "https://svelte.dev/");
    			add_location(a3, file, 28, 4, 815);
    			add_location(br8, file, 28, 59, 870);
    			attr_dev(p4, "class", "resource-item svelte-geidpz");
    			add_location(p4, file, 27, 2, 785);
    			add_location(br9, file, 30, 2, 899);
    			add_location(br10, file, 31, 2, 908);
    			add_location(br11, file, 32, 2, 917);
    			attr_dev(section, "id", "resources");
    			attr_dev(section, "class", "svelte-geidpz");
    			add_location(section, file, 6, 0, 54);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, br0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, br1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, br2, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, section, anchor);
    			append_dev(section, br3);
    			append_dev(section, t3);
    			append_dev(section, h3);
    			append_dev(section, t5);
    			append_dev(section, p0);
    			append_dev(section, t7);
    			append_dev(section, br4);
    			append_dev(section, t8);
    			append_dev(section, p1);
    			append_dev(p1, a0);
    			append_dev(p1, br5);
    			append_dev(p1, t10);
    			append_dev(section, t11);
    			append_dev(section, p2);
    			append_dev(p2, a1);
    			append_dev(p2, br6);
    			append_dev(p2, t13);
    			append_dev(section, t14);
    			append_dev(section, p3);
    			append_dev(p3, a2);
    			append_dev(p3, t16);
    			append_dev(p3, br7);
    			append_dev(p3, t17);
    			append_dev(section, t18);
    			append_dev(section, p4);
    			append_dev(p4, a3);
    			append_dev(p4, br8);
    			append_dev(p4, t20);
    			append_dev(section, t21);
    			append_dev(section, br9);
    			append_dev(section, t22);
    			append_dev(section, br10);
    			append_dev(section, t23);
    			append_dev(section, br11);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(br0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(br1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(br2);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Resources', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Resources> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Resources extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Resources",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.52.0 */

    const { console: console_1, window: window_1 } = globals;

    function create_fragment(ctx) {
    	let logo;
    	let t0;
    	let title;
    	let t1;
    	let intro;
    	let t2;
    	let problemstructure;
    	let t3;
    	let simulation;
    	let t4;
    	let conclusion;
    	let t5;
    	let resources;
    	let current;
    	let mounted;
    	let dispose;
    	logo = new Logo({ $$inline: true });
    	title = new Title({ $$inline: true });
    	intro = new Intro({ $$inline: true });
    	problemstructure = new ProblemStructure({ $$inline: true });
    	simulation = new Simulation({ $$inline: true });
    	conclusion = new Conclusion({ $$inline: true });
    	resources = new Resources({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(logo.$$.fragment);
    			t0 = space();
    			create_component(title.$$.fragment);
    			t1 = space();
    			create_component(intro.$$.fragment);
    			t2 = space();
    			create_component(problemstructure.$$.fragment);
    			t3 = space();
    			create_component(simulation.$$.fragment);
    			t4 = space();
    			create_component(conclusion.$$.fragment);
    			t5 = space();
    			create_component(resources.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(logo, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(title, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(intro, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(problemstructure, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(simulation, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(conclusion, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(resources, target, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window_1, "resize", /*handleResize*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro$1(local) {
    			if (current) return;
    			transition_in(logo.$$.fragment, local);
    			transition_in(title.$$.fragment, local);
    			transition_in(intro.$$.fragment, local);
    			transition_in(problemstructure.$$.fragment, local);
    			transition_in(simulation.$$.fragment, local);
    			transition_in(conclusion.$$.fragment, local);
    			transition_in(resources.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(logo.$$.fragment, local);
    			transition_out(title.$$.fragment, local);
    			transition_out(intro.$$.fragment, local);
    			transition_out(problemstructure.$$.fragment, local);
    			transition_out(simulation.$$.fragment, local);
    			transition_out(conclusion.$$.fragment, local);
    			transition_out(resources.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(logo, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(title, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(intro, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(problemstructure, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(simulation, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(conclusion, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(resources, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $robotScale;
    	let $arrowScale;
    	let $bananaScale;
    	let $banditHeight;
    	let $banditWidth;
    	let $lineWidth;
    	let $gridMargin;
    	let $gridWidth;
    	let $gridHeight;
    	validate_store(robotScale, 'robotScale');
    	component_subscribe($$self, robotScale, $$value => $$invalidate(1, $robotScale = $$value));
    	validate_store(arrowScale, 'arrowScale');
    	component_subscribe($$self, arrowScale, $$value => $$invalidate(2, $arrowScale = $$value));
    	validate_store(bananaScale, 'bananaScale');
    	component_subscribe($$self, bananaScale, $$value => $$invalidate(3, $bananaScale = $$value));
    	validate_store(banditHeight, 'banditHeight');
    	component_subscribe($$self, banditHeight, $$value => $$invalidate(4, $banditHeight = $$value));
    	validate_store(banditWidth, 'banditWidth');
    	component_subscribe($$self, banditWidth, $$value => $$invalidate(5, $banditWidth = $$value));
    	validate_store(lineWidth, 'lineWidth');
    	component_subscribe($$self, lineWidth, $$value => $$invalidate(6, $lineWidth = $$value));
    	validate_store(gridMargin, 'gridMargin');
    	component_subscribe($$self, gridMargin, $$value => $$invalidate(7, $gridMargin = $$value));
    	validate_store(gridWidth, 'gridWidth');
    	component_subscribe($$self, gridWidth, $$value => $$invalidate(8, $gridWidth = $$value));
    	validate_store(gridHeight, 'gridHeight');
    	component_subscribe($$self, gridHeight, $$value => $$invalidate(9, $gridHeight = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);

    	function handleResize() {
    		const size = window.innerWidth;

    		if (size > 900 && size < 1200) {
    			set_store_value(gridHeight, $gridHeight = 400, $gridHeight);
    			set_store_value(gridWidth, $gridWidth = 400, $gridWidth);
    			set_store_value(gridMargin, $gridMargin = { top: 8, bottom: 20, left: 16, right: 14 }, $gridMargin);
    			set_store_value(lineWidth, $lineWidth = 100, $lineWidth);
    			set_store_value(banditWidth, $banditWidth = 430, $banditWidth);
    			set_store_value(banditHeight, $banditHeight = 200, $banditHeight);
    			set_store_value(bananaScale, $bananaScale = 0.13, $bananaScale);
    			set_store_value(arrowScale, $arrowScale = 0.09, $arrowScale);
    			set_store_value(robotScale, $robotScale = 0.22, $robotScale);
    		} else if (size < 900) {
    			console.log("k");
    			set_store_value(gridHeight, $gridHeight = 300, $gridHeight);
    			set_store_value(gridWidth, $gridWidth = 300, $gridWidth);
    			set_store_value(gridMargin, $gridMargin = { top: 8, bottom: 20, left: 16, right: 14 }, $gridMargin);
    			set_store_value(lineWidth, $lineWidth = 70, $lineWidth);
    			set_store_value(banditWidth, $banditWidth = 330, $banditWidth);
    			set_store_value(banditHeight, $banditHeight = 150, $banditHeight);
    			set_store_value(bananaScale, $bananaScale = 0.1, $bananaScale);
    			set_store_value(arrowScale, $arrowScale = 0.07, $arrowScale);
    			set_store_value(robotScale, $robotScale = 0.2, $robotScale);
    		} else {
    			set_store_value(gridHeight, $gridHeight = 500, $gridHeight);
    			set_store_value(gridWidth, $gridWidth = 500, $gridWidth);
    			set_store_value(gridMargin, $gridMargin = { top: 8, bottom: 20, left: 16, right: 15 }, $gridMargin);
    			set_store_value(lineWidth, $lineWidth = 125, $lineWidth);
    			set_store_value(banditWidth, $banditWidth = 430, $banditWidth);
    			set_store_value(banditHeight, $banditHeight = 200, $banditHeight);
    			set_store_value(bananaScale, $bananaScale = 0.13, $bananaScale);
    			set_store_value(arrowScale, $arrowScale = 0.09, $arrowScale);
    			set_store_value(robotScale, $robotScale = 0.22, $robotScale);
    		}
    	}

    	handleResize();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Logo,
    		Title,
    		Intro,
    		ProblemStructure,
    		Simulation,
    		Conclusion,
    		Resources,
    		banditWidth,
    		banditHeight,
    		bananaScale,
    		robotScale,
    		arrowScale,
    		gridHeight,
    		gridWidth,
    		gridMargin,
    		lineWidth,
    		handleResize,
    		$robotScale,
    		$arrowScale,
    		$bananaScale,
    		$banditHeight,
    		$banditWidth,
    		$lineWidth,
    		$gridMargin,
    		$gridWidth,
    		$gridHeight
    	});

    	return [handleResize];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    	props: {
    		name: 'world'
    	}
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
